
stm32f103_dual_vcp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a904  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800aa10  0800aa10  0000ba10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab6c  0800ab6c  0000c244  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800ab6c  0800ab6c  0000c244  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800ab6c  0800ab6c  0000c244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab6c  0800ab6c  0000bb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab70  0800ab70  0000bb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  0800ab74  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032e4  20000244  0800adb8  0000c244  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20003528  0800adb8  0000c528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c244  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145b3  00000000  00000000  0000c26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f85  00000000  00000000  00020820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  000247a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9d  00000000  00000000  00025870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b177  00000000  00000000  0002650d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174fc  00000000  00000000  00041684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a50e  00000000  00000000  00058b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e308e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a4  00000000  00000000  000e30d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e7278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000244 	.word	0x20000244
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a9f8 	.word	0x0800a9f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000248 	.word	0x20000248
 8000148:	0800a9f8 	.word	0x0800a9f8

0800014c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8000152:	4b21      	ldr	r3, [pc, #132]	@ (80001d8 <_DoInit+0x8c>)
 8000154:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2203      	movs	r2, #3
 800015a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2203      	movs	r2, #3
 8000160:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4a1d      	ldr	r2, [pc, #116]	@ (80001dc <_DoInit+0x90>)
 8000166:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	4a1d      	ldr	r2, [pc, #116]	@ (80001e0 <_DoInit+0x94>)
 800016c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000174:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	2200      	movs	r2, #0
 800017a:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2200      	movs	r2, #0
 8000180:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2200      	movs	r2, #0
 8000186:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	4a14      	ldr	r2, [pc, #80]	@ (80001dc <_DoInit+0x90>)
 800018c:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4a14      	ldr	r2, [pc, #80]	@ (80001e4 <_DoInit+0x98>)
 8000192:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2210      	movs	r2, #16
 8000198:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2200      	movs	r2, #0
 800019e:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2200      	movs	r2, #0
 80001a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2200      	movs	r2, #0
 80001aa:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3307      	adds	r3, #7
 80001b0:	4a0d      	ldr	r2, [pc, #52]	@ (80001e8 <_DoInit+0x9c>)
 80001b2:	6810      	ldr	r0, [r2, #0]
 80001b4:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	4a0c      	ldr	r2, [pc, #48]	@ (80001ec <_DoInit+0xa0>)
 80001ba:	6810      	ldr	r0, [r2, #0]
 80001bc:	6018      	str	r0, [r3, #0]
 80001be:	8891      	ldrh	r1, [r2, #4]
 80001c0:	7992      	ldrb	r2, [r2, #6]
 80001c2:	8099      	strh	r1, [r3, #4]
 80001c4:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2220      	movs	r2, #32
 80001ca:	719a      	strb	r2, [r3, #6]
}
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000260 	.word	0x20000260
 80001dc:	0800aa10 	.word	0x0800aa10
 80001e0:	20000308 	.word	0x20000308
 80001e4:	20000508 	.word	0x20000508
 80001e8:	0800aa1c 	.word	0x0800aa1c
 80001ec:	0800aa20 	.word	0x0800aa20

080001f0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b088      	sub	sp, #32
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	60f8      	str	r0, [r7, #12]
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	691b      	ldr	r3, [r3, #16]
 800020a:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 800020c:	693a      	ldr	r2, [r7, #16]
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	429a      	cmp	r2, r3
 8000212:	d905      	bls.n	8000220 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000214:	693a      	ldr	r2, [r7, #16]
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	1ad3      	subs	r3, r2, r3
 800021a:	3b01      	subs	r3, #1
 800021c:	61fb      	str	r3, [r7, #28]
 800021e:	e007      	b.n	8000230 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	689a      	ldr	r2, [r3, #8]
 8000224:	6939      	ldr	r1, [r7, #16]
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	1acb      	subs	r3, r1, r3
 800022a:	4413      	add	r3, r2
 800022c:	3b01      	subs	r3, #1
 800022e:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	689a      	ldr	r2, [r3, #8]
 8000234:	697b      	ldr	r3, [r7, #20]
 8000236:	1ad3      	subs	r3, r2, r3
 8000238:	69fa      	ldr	r2, [r7, #28]
 800023a:	4293      	cmp	r3, r2
 800023c:	bf28      	it	cs
 800023e:	4613      	movcs	r3, r2
 8000240:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000242:	69fa      	ldr	r2, [r7, #28]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4293      	cmp	r3, r2
 8000248:	bf28      	it	cs
 800024a:	4613      	movcs	r3, r2
 800024c:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	685a      	ldr	r2, [r3, #4]
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	4413      	add	r3, r2
 8000256:	69fa      	ldr	r2, [r7, #28]
 8000258:	68b9      	ldr	r1, [r7, #8]
 800025a:	4618      	mov	r0, r3
 800025c:	f00a fbbe 	bl	800a9dc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000260:	69ba      	ldr	r2, [r7, #24]
 8000262:	69fb      	ldr	r3, [r7, #28]
 8000264:	4413      	add	r3, r2
 8000266:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8000268:	68ba      	ldr	r2, [r7, #8]
 800026a:	69fb      	ldr	r3, [r7, #28]
 800026c:	4413      	add	r3, r2
 800026e:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	69fb      	ldr	r3, [r7, #28]
 8000274:	1ad3      	subs	r3, r2, r3
 8000276:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8000278:	697a      	ldr	r2, [r7, #20]
 800027a:	69fb      	ldr	r3, [r7, #28]
 800027c:	4413      	add	r3, r2
 800027e:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	697a      	ldr	r2, [r7, #20]
 8000286:	429a      	cmp	r2, r3
 8000288:	d101      	bne.n	800028e <_WriteBlocking+0x9e>
      WrOff = 0u;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	697a      	ldr	r2, [r7, #20]
 8000292:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d1b5      	bne.n	8000206 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 800029a:	69bb      	ldr	r3, [r7, #24]
}
 800029c:	4618      	mov	r0, r3
 800029e:	3720      	adds	r7, #32
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	689a      	ldr	r2, [r3, #8]
 80002ba:	69fb      	ldr	r3, [r7, #28]
 80002bc:	1ad3      	subs	r3, r2, r3
 80002be:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80002c0:	69ba      	ldr	r2, [r7, #24]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d90e      	bls.n	80002e6 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	685a      	ldr	r2, [r3, #4]
 80002cc:	69fb      	ldr	r3, [r7, #28]
 80002ce:	4413      	add	r3, r2
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	68b9      	ldr	r1, [r7, #8]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f00a fb81 	bl	800a9dc <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 80002da:	69fa      	ldr	r2, [r7, #28]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	441a      	add	r2, r3
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80002e4:	e01a      	b.n	800031c <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	685a      	ldr	r2, [r3, #4]
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	4413      	add	r3, r2
 80002f2:	697a      	ldr	r2, [r7, #20]
 80002f4:	68b9      	ldr	r1, [r7, #8]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f00a fb70 	bl	800a9dc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	69bb      	ldr	r3, [r7, #24]
 8000300:	1ad3      	subs	r3, r2, r3
 8000302:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	6858      	ldr	r0, [r3, #4]
 8000308:	68ba      	ldr	r2, [r7, #8]
 800030a:	69bb      	ldr	r3, [r7, #24]
 800030c:	4413      	add	r3, r2
 800030e:	697a      	ldr	r2, [r7, #20]
 8000310:	4619      	mov	r1, r3
 8000312:	f00a fb63 	bl	800a9dc <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	697a      	ldr	r2, [r7, #20]
 800031a:	60da      	str	r2, [r3, #12]
}
 800031c:	bf00      	nop
 800031e:	3720      	adds	r7, #32
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8000324:	b480      	push	{r7}
 8000326:	b087      	sub	sp, #28
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000338:	693a      	ldr	r2, [r7, #16]
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	429a      	cmp	r2, r3
 800033e:	d808      	bhi.n	8000352 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689a      	ldr	r2, [r3, #8]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	1ad2      	subs	r2, r2, r3
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	4413      	add	r3, r2
 800034c:	3b01      	subs	r3, #1
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	e004      	b.n	800035c <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000352:	693a      	ldr	r2, [r7, #16]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	1ad3      	subs	r3, r2, r3
 8000358:	3b01      	subs	r3, #1
 800035a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800035c:	697b      	ldr	r3, [r7, #20]
}
 800035e:	4618      	mov	r0, r3
 8000360:	371c      	adds	r7, #28
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	1c5a      	adds	r2, r3, #1
 800037c:	4613      	mov	r3, r2
 800037e:	005b      	lsls	r3, r3, #1
 8000380:	4413      	add	r3, r2
 8000382:	00db      	lsls	r3, r3, #3
 8000384:	4a1f      	ldr	r2, [pc, #124]	@ (8000404 <SEGGER_RTT_WriteNoLock+0x9c>)
 8000386:	4413      	add	r3, r2
 8000388:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	2b02      	cmp	r3, #2
 8000390:	d029      	beq.n	80003e6 <SEGGER_RTT_WriteNoLock+0x7e>
 8000392:	2b02      	cmp	r3, #2
 8000394:	d82e      	bhi.n	80003f4 <SEGGER_RTT_WriteNoLock+0x8c>
 8000396:	2b00      	cmp	r3, #0
 8000398:	d002      	beq.n	80003a0 <SEGGER_RTT_WriteNoLock+0x38>
 800039a:	2b01      	cmp	r3, #1
 800039c:	d013      	beq.n	80003c6 <SEGGER_RTT_WriteNoLock+0x5e>
 800039e:	e029      	b.n	80003f4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80003a0:	6978      	ldr	r0, [r7, #20]
 80003a2:	f7ff ffbf 	bl	8000324 <_GetAvailWriteSpace>
 80003a6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80003a8:	693a      	ldr	r2, [r7, #16]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d202      	bcs.n	80003b6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80003b0:	2300      	movs	r3, #0
 80003b2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80003b4:	e021      	b.n	80003fa <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	69b9      	ldr	r1, [r7, #24]
 80003be:	6978      	ldr	r0, [r7, #20]
 80003c0:	f7ff ff70 	bl	80002a4 <_WriteNoCheck>
    break;
 80003c4:	e019      	b.n	80003fa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80003c6:	6978      	ldr	r0, [r7, #20]
 80003c8:	f7ff ffac 	bl	8000324 <_GetAvailWriteSpace>
 80003cc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	693b      	ldr	r3, [r7, #16]
 80003d2:	4293      	cmp	r3, r2
 80003d4:	bf28      	it	cs
 80003d6:	4613      	movcs	r3, r2
 80003d8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80003da:	69fa      	ldr	r2, [r7, #28]
 80003dc:	69b9      	ldr	r1, [r7, #24]
 80003de:	6978      	ldr	r0, [r7, #20]
 80003e0:	f7ff ff60 	bl	80002a4 <_WriteNoCheck>
    break;
 80003e4:	e009      	b.n	80003fa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	69b9      	ldr	r1, [r7, #24]
 80003ea:	6978      	ldr	r0, [r7, #20]
 80003ec:	f7ff ff00 	bl	80001f0 <_WriteBlocking>
 80003f0:	61f8      	str	r0, [r7, #28]
    break;
 80003f2:	e002      	b.n	80003fa <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80003f4:	2300      	movs	r3, #0
 80003f6:	61fb      	str	r3, [r7, #28]
    break;
 80003f8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80003fa:	69fb      	ldr	r3, [r7, #28]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3720      	adds	r7, #32
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000260 	.word	0x20000260

08000408 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8000414:	4b0d      	ldr	r3, [pc, #52]	@ (800044c <SEGGER_RTT_Write+0x44>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d101      	bne.n	8000420 <SEGGER_RTT_Write+0x18>
 800041c:	f7ff fe96 	bl	800014c <_DoInit>
  SEGGER_RTT_LOCK();
 8000420:	f3ef 8311 	mrs	r3, BASEPRI
 8000424:	f04f 0120 	mov.w	r1, #32
 8000428:	f381 8811 	msr	BASEPRI, r1
 800042c:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	68b9      	ldr	r1, [r7, #8]
 8000432:	68f8      	ldr	r0, [r7, #12]
 8000434:	f7ff ff98 	bl	8000368 <SEGGER_RTT_WriteNoLock>
 8000438:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8000440:	693b      	ldr	r3, [r7, #16]
}
 8000442:	4618      	mov	r0, r3
 8000444:	3718      	adds	r7, #24
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000260 	.word	0x20000260

08000450 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	1c5a      	adds	r2, r3, #1
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	429a      	cmp	r2, r3
 800046c:	d80e      	bhi.n	800048c <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	4413      	add	r3, r2
 8000476:	78fa      	ldrb	r2, [r7, #3]
 8000478:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	1c5a      	adds	r2, r3, #1
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	689a      	ldr	r2, [r3, #8]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	429a      	cmp	r2, r3
 8000496:	d115      	bne.n	80004c4 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	6918      	ldr	r0, [r3, #16]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	6819      	ldr	r1, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	461a      	mov	r2, r3
 80004a6:	f7ff ffaf 	bl	8000408 <SEGGER_RTT_Write>
 80004aa:	4602      	mov	r2, r0
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d004      	beq.n	80004be <_StoreChar+0x6e>
      p->ReturnValue = -1;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f04f 32ff 	mov.w	r2, #4294967295
 80004ba:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 80004bc:	e002      	b.n	80004c4 <_StoreChar+0x74>
      p->Cnt = 0u;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
}
 80004c4:	bf00      	nop
 80004c6:	3710      	adds	r7, #16
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	@ 0x28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
 80004d8:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80004de:	2301      	movs	r3, #1
 80004e0:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80004e2:	2301      	movs	r3, #1
 80004e4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80004e6:	e007      	b.n	80004f8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80004e8:	6a3a      	ldr	r2, [r7, #32]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f0:	623b      	str	r3, [r7, #32]
    Width++;
 80004f2:	69fb      	ldr	r3, [r7, #28]
 80004f4:	3301      	adds	r3, #1
 80004f6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80004f8:	6a3a      	ldr	r2, [r7, #32]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d2f3      	bcs.n	80004e8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	69fb      	ldr	r3, [r7, #28]
 8000504:	429a      	cmp	r2, r3
 8000506:	d901      	bls.n	800050c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800050c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	2b00      	cmp	r3, #0
 8000514:	d125      	bne.n	8000562 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8000516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000518:	2b00      	cmp	r3, #0
 800051a:	d022      	beq.n	8000562 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800051c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	2b00      	cmp	r3, #0
 8000524:	d005      	beq.n	8000532 <_PrintUnsigned+0x66>
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d102      	bne.n	8000532 <_PrintUnsigned+0x66>
        c = '0';
 800052c:	2330      	movs	r3, #48	@ 0x30
 800052e:	76fb      	strb	r3, [r7, #27]
 8000530:	e001      	b.n	8000536 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8000532:	2320      	movs	r3, #32
 8000534:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000536:	e00b      	b.n	8000550 <_PrintUnsigned+0x84>
        FieldWidth--;
 8000538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800053a:	3b01      	subs	r3, #1
 800053c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 800053e:	7efb      	ldrb	r3, [r7, #27]
 8000540:	4619      	mov	r1, r3
 8000542:	68f8      	ldr	r0, [r7, #12]
 8000544:	f7ff ff84 	bl	8000450 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	2b00      	cmp	r3, #0
 800054e:	db07      	blt.n	8000560 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000552:	2b00      	cmp	r3, #0
 8000554:	d005      	beq.n	8000562 <_PrintUnsigned+0x96>
 8000556:	69fa      	ldr	r2, [r7, #28]
 8000558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800055a:	429a      	cmp	r2, r3
 800055c:	d3ec      	bcc.n	8000538 <_PrintUnsigned+0x6c>
 800055e:	e000      	b.n	8000562 <_PrintUnsigned+0x96>
          break;
 8000560:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	68db      	ldr	r3, [r3, #12]
 8000566:	2b00      	cmp	r3, #0
 8000568:	db55      	blt.n	8000616 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d903      	bls.n	8000578 <_PrintUnsigned+0xac>
        NumDigits--;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	3b01      	subs	r3, #1
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	e009      	b.n	800058c <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000578:	68ba      	ldr	r2, [r7, #8]
 800057a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000580:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8000582:	697a      	ldr	r2, [r7, #20]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	429a      	cmp	r2, r3
 8000588:	d200      	bcs.n	800058c <_PrintUnsigned+0xc0>
          break;
 800058a:	e005      	b.n	8000598 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 800058c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	fb02 f303 	mul.w	r3, r2, r3
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000596:	e7e8      	b.n	800056a <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8000598:	68ba      	ldr	r2, [r7, #8]
 800059a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800059c:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a0:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005a6:	fb02 f303 	mul.w	r3, r2, r3
 80005aa:	68ba      	ldr	r2, [r7, #8]
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 80005b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000620 <_PrintUnsigned+0x154>)
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f7ff ff48 	bl	8000450 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	db08      	blt.n	80005da <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 80005c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d0:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 80005d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1df      	bne.n	8000598 <_PrintUnsigned+0xcc>
 80005d8:	e000      	b.n	80005dc <_PrintUnsigned+0x110>
        break;
 80005da:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80005dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d017      	beq.n	8000616 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 80005e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d014      	beq.n	8000616 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80005ec:	e00a      	b.n	8000604 <_PrintUnsigned+0x138>
          FieldWidth--;
 80005ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005f0:	3b01      	subs	r3, #1
 80005f2:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 80005f4:	2120      	movs	r1, #32
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f7ff ff2a 	bl	8000450 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	2b00      	cmp	r3, #0
 8000602:	db07      	blt.n	8000614 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000606:	2b00      	cmp	r3, #0
 8000608:	d005      	beq.n	8000616 <_PrintUnsigned+0x14a>
 800060a:	69fa      	ldr	r2, [r7, #28]
 800060c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800060e:	429a      	cmp	r2, r3
 8000610:	d3ed      	bcc.n	80005ee <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000612:	e000      	b.n	8000616 <_PrintUnsigned+0x14a>
            break;
 8000614:	bf00      	nop
}
 8000616:	bf00      	nop
 8000618:	3728      	adds	r7, #40	@ 0x28
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	0800ab1c 	.word	0x0800ab1c

08000624 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af02      	add	r7, sp, #8
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
 8000630:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	2b00      	cmp	r3, #0
 8000636:	bfb8      	it	lt
 8000638:	425b      	neglt	r3, r3
 800063a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800063c:	2301      	movs	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000640:	e007      	b.n	8000652 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	693a      	ldr	r2, [r7, #16]
 8000646:	fb92 f3f3 	sdiv	r3, r2, r3
 800064a:	613b      	str	r3, [r7, #16]
    Width++;
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	3301      	adds	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	429a      	cmp	r2, r3
 8000658:	daf3      	bge.n	8000642 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800065a:	683a      	ldr	r2, [r7, #0]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	429a      	cmp	r2, r3
 8000660:	d901      	bls.n	8000666 <_PrintInt+0x42>
    Width = NumDigits;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000666:	6a3b      	ldr	r3, [r7, #32]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00a      	beq.n	8000682 <_PrintInt+0x5e>
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	2b00      	cmp	r3, #0
 8000670:	db04      	blt.n	800067c <_PrintInt+0x58>
 8000672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000674:	f003 0304 	and.w	r3, r3, #4
 8000678:	2b00      	cmp	r3, #0
 800067a:	d002      	beq.n	8000682 <_PrintInt+0x5e>
    FieldWidth--;
 800067c:	6a3b      	ldr	r3, [r7, #32]
 800067e:	3b01      	subs	r3, #1
 8000680:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000684:	f003 0302 	and.w	r3, r3, #2
 8000688:	2b00      	cmp	r3, #0
 800068a:	d002      	beq.n	8000692 <_PrintInt+0x6e>
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d01c      	beq.n	80006cc <_PrintInt+0xa8>
 8000692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	2b00      	cmp	r3, #0
 800069a:	d117      	bne.n	80006cc <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d014      	beq.n	80006cc <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80006a2:	e00a      	b.n	80006ba <_PrintInt+0x96>
        FieldWidth--;
 80006a4:	6a3b      	ldr	r3, [r7, #32]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80006aa:	2120      	movs	r1, #32
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f7ff fecf 	bl	8000450 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db07      	blt.n	80006ca <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80006ba:	6a3b      	ldr	r3, [r7, #32]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d005      	beq.n	80006cc <_PrintInt+0xa8>
 80006c0:	697a      	ldr	r2, [r7, #20]
 80006c2:	6a3b      	ldr	r3, [r7, #32]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d3ed      	bcc.n	80006a4 <_PrintInt+0x80>
 80006c8:	e000      	b.n	80006cc <_PrintInt+0xa8>
          break;
 80006ca:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db4a      	blt.n	800076a <_PrintInt+0x146>
    if (v < 0) {
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	da07      	bge.n	80006ea <_PrintInt+0xc6>
      v = -v;
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	425b      	negs	r3, r3
 80006de:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 80006e0:	212d      	movs	r1, #45	@ 0x2d
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	f7ff feb4 	bl	8000450 <_StoreChar>
 80006e8:	e008      	b.n	80006fc <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80006ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d003      	beq.n	80006fc <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 80006f4:	212b      	movs	r1, #43	@ 0x2b
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f7ff feaa 	bl	8000450 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	2b00      	cmp	r3, #0
 8000702:	db32      	blt.n	800076a <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8000704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	2b00      	cmp	r3, #0
 800070c:	d01f      	beq.n	800074e <_PrintInt+0x12a>
 800070e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d11a      	bne.n	800074e <_PrintInt+0x12a>
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d117      	bne.n	800074e <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 800071e:	6a3b      	ldr	r3, [r7, #32]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d014      	beq.n	800074e <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000724:	e00a      	b.n	800073c <_PrintInt+0x118>
            FieldWidth--;
 8000726:	6a3b      	ldr	r3, [r7, #32]
 8000728:	3b01      	subs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 800072c:	2130      	movs	r1, #48	@ 0x30
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f7ff fe8e 	bl	8000450 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db07      	blt.n	800074c <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800073c:	6a3b      	ldr	r3, [r7, #32]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d005      	beq.n	800074e <_PrintInt+0x12a>
 8000742:	697a      	ldr	r2, [r7, #20]
 8000744:	6a3b      	ldr	r3, [r7, #32]
 8000746:	429a      	cmp	r2, r3
 8000748:	d3ed      	bcc.n	8000726 <_PrintInt+0x102>
 800074a:	e000      	b.n	800074e <_PrintInt+0x12a>
              break;
 800074c:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	2b00      	cmp	r3, #0
 8000754:	db09      	blt.n	800076a <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8000756:	68b9      	ldr	r1, [r7, #8]
 8000758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	68f8      	ldr	r0, [r7, #12]
 8000766:	f7ff feb1 	bl	80004cc <_PrintUnsigned>
      }
    }
  }
}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b0a2      	sub	sp, #136	@ 0x88
 8000778:	af02      	add	r7, sp, #8
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	653b      	str	r3, [r7, #80]	@ 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000786:	2340      	movs	r3, #64	@ 0x40
 8000788:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.Cnt            = 0u;
 800078a:	2300      	movs	r3, #0
 800078c:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	663b      	str	r3, [r7, #96]	@ 0x60
  BufferDesc.ReturnValue    = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	65fb      	str	r3, [r7, #92]	@ 0x5c

  do {
    c = *sFormat;
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    sFormat++;
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 80007a4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	f000 819f 	beq.w	8000aec <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 80007ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80007b2:	2b25      	cmp	r3, #37	@ 0x25
 80007b4:	f040 818d 	bne.w	8000ad2 <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80007b8:	2300      	movs	r3, #0
 80007ba:	673b      	str	r3, [r7, #112]	@ 0x70
      v = 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	67bb      	str	r3, [r7, #120]	@ 0x78
      do {
        c = *sFormat;
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        switch (c) {
 80007c8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80007cc:	3b23      	subs	r3, #35	@ 0x23
 80007ce:	2b0d      	cmp	r3, #13
 80007d0:	d83e      	bhi.n	8000850 <SEGGER_RTT_vprintf+0xdc>
 80007d2:	a201      	add	r2, pc, #4	@ (adr r2, 80007d8 <SEGGER_RTT_vprintf+0x64>)
 80007d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d8:	08000841 	.word	0x08000841
 80007dc:	08000851 	.word	0x08000851
 80007e0:	08000851 	.word	0x08000851
 80007e4:	08000851 	.word	0x08000851
 80007e8:	08000851 	.word	0x08000851
 80007ec:	08000851 	.word	0x08000851
 80007f0:	08000851 	.word	0x08000851
 80007f4:	08000851 	.word	0x08000851
 80007f8:	08000831 	.word	0x08000831
 80007fc:	08000851 	.word	0x08000851
 8000800:	08000811 	.word	0x08000811
 8000804:	08000851 	.word	0x08000851
 8000808:	08000851 	.word	0x08000851
 800080c:	08000821 	.word	0x08000821
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8000810:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	673b      	str	r3, [r7, #112]	@ 0x70
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	3301      	adds	r3, #1
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	e01a      	b.n	8000856 <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8000820:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000822:	f043 0302 	orr.w	r3, r3, #2
 8000826:	673b      	str	r3, [r7, #112]	@ 0x70
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	3301      	adds	r3, #1
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	e012      	b.n	8000856 <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8000830:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	673b      	str	r3, [r7, #112]	@ 0x70
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	3301      	adds	r3, #1
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	e00a      	b.n	8000856 <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8000840:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	673b      	str	r3, [r7, #112]	@ 0x70
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	3301      	adds	r3, #1
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	e002      	b.n	8000856 <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 8000850:	2300      	movs	r3, #0
 8000852:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000854:	bf00      	nop
        }
      } while (v);
 8000856:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1b1      	bne.n	80007c0 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800085c:	2300      	movs	r3, #0
 800085e:	66fb      	str	r3, [r7, #108]	@ 0x6c
      do {
        c = *sFormat;
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c < '0') || (c > '9')) {
 8000868:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800086c:	2b2f      	cmp	r3, #47	@ 0x2f
 800086e:	d912      	bls.n	8000896 <SEGGER_RTT_vprintf+0x122>
 8000870:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000874:	2b39      	cmp	r3, #57	@ 0x39
 8000876:	d80e      	bhi.n	8000896 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	3301      	adds	r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800087e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000880:	4613      	mov	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	461a      	mov	r2, r3
 800088a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800088e:	4413      	add	r3, r2
 8000890:	3b30      	subs	r3, #48	@ 0x30
 8000892:	66fb      	str	r3, [r7, #108]	@ 0x6c
        c = *sFormat;
 8000894:	e7e4      	b.n	8000860 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8000896:	2300      	movs	r3, #0
 8000898:	677b      	str	r3, [r7, #116]	@ 0x74
      c = *sFormat;
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (c == '.') {
 80008a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80008a8:	d11d      	bne.n	80008e6 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	3301      	adds	r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          if ((c < '0') || (c > '9')) {
 80008b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80008be:	d912      	bls.n	80008e6 <SEGGER_RTT_vprintf+0x172>
 80008c0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008c4:	2b39      	cmp	r3, #57	@ 0x39
 80008c6:	d80e      	bhi.n	80008e6 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	3301      	adds	r3, #1
 80008cc:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 80008ce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80008d0:	4613      	mov	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4413      	add	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	461a      	mov	r2, r3
 80008da:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008de:	4413      	add	r3, r2
 80008e0:	3b30      	subs	r3, #48	@ 0x30
 80008e2:	677b      	str	r3, [r7, #116]	@ 0x74
          c = *sFormat;
 80008e4:	e7e4      	b.n	80008b0 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 80008ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008f2:	2b6c      	cmp	r3, #108	@ 0x6c
 80008f4:	d003      	beq.n	80008fe <SEGGER_RTT_vprintf+0x18a>
 80008f6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008fa:	2b68      	cmp	r3, #104	@ 0x68
 80008fc:	d107      	bne.n	800090e <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	3301      	adds	r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c == 'l') || (c == 'h')) {
 800090c:	e7ef      	b.n	80008ee <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800090e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000912:	2b25      	cmp	r3, #37	@ 0x25
 8000914:	f000 80d1 	beq.w	8000aba <SEGGER_RTT_vprintf+0x346>
 8000918:	2b25      	cmp	r3, #37	@ 0x25
 800091a:	f2c0 80d5 	blt.w	8000ac8 <SEGGER_RTT_vprintf+0x354>
 800091e:	2b78      	cmp	r3, #120	@ 0x78
 8000920:	f300 80d2 	bgt.w	8000ac8 <SEGGER_RTT_vprintf+0x354>
 8000924:	2b58      	cmp	r3, #88	@ 0x58
 8000926:	f2c0 80cf 	blt.w	8000ac8 <SEGGER_RTT_vprintf+0x354>
 800092a:	3b58      	subs	r3, #88	@ 0x58
 800092c:	2b20      	cmp	r3, #32
 800092e:	f200 80cb 	bhi.w	8000ac8 <SEGGER_RTT_vprintf+0x354>
 8000932:	a201      	add	r2, pc, #4	@ (adr r2, 8000938 <SEGGER_RTT_vprintf+0x1c4>)
 8000934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000938:	08000a2f 	.word	0x08000a2f
 800093c:	08000ac9 	.word	0x08000ac9
 8000940:	08000ac9 	.word	0x08000ac9
 8000944:	08000ac9 	.word	0x08000ac9
 8000948:	08000ac9 	.word	0x08000ac9
 800094c:	08000ac9 	.word	0x08000ac9
 8000950:	08000ac9 	.word	0x08000ac9
 8000954:	08000ac9 	.word	0x08000ac9
 8000958:	08000ac9 	.word	0x08000ac9
 800095c:	08000ac9 	.word	0x08000ac9
 8000960:	08000ac9 	.word	0x08000ac9
 8000964:	080009bd 	.word	0x080009bd
 8000968:	080009e3 	.word	0x080009e3
 800096c:	08000ac9 	.word	0x08000ac9
 8000970:	08000ac9 	.word	0x08000ac9
 8000974:	08000ac9 	.word	0x08000ac9
 8000978:	08000ac9 	.word	0x08000ac9
 800097c:	08000ac9 	.word	0x08000ac9
 8000980:	08000ac9 	.word	0x08000ac9
 8000984:	08000ac9 	.word	0x08000ac9
 8000988:	08000ac9 	.word	0x08000ac9
 800098c:	08000ac9 	.word	0x08000ac9
 8000990:	08000ac9 	.word	0x08000ac9
 8000994:	08000ac9 	.word	0x08000ac9
 8000998:	08000a95 	.word	0x08000a95
 800099c:	08000ac9 	.word	0x08000ac9
 80009a0:	08000ac9 	.word	0x08000ac9
 80009a4:	08000a55 	.word	0x08000a55
 80009a8:	08000ac9 	.word	0x08000ac9
 80009ac:	08000a09 	.word	0x08000a09
 80009b0:	08000ac9 	.word	0x08000ac9
 80009b4:	08000ac9 	.word	0x08000ac9
 80009b8:	08000a2f 	.word	0x08000a2f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	1d19      	adds	r1, r3, #4
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	6011      	str	r1, [r2, #0]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	67bb      	str	r3, [r7, #120]	@ 0x78
        c0 = (char)v;
 80009ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80009cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        _StoreChar(&BufferDesc, c0);
 80009d0:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80009d4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80009d8:	4611      	mov	r1, r2
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fd38 	bl	8000450 <_StoreChar>
        break;
 80009e0:	e073      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	1d19      	adds	r1, r3, #4
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	6011      	str	r1, [r2, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80009f0:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80009f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009fe:	220a      	movs	r2, #10
 8000a00:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000a02:	f7ff fe0f 	bl	8000624 <_PrintInt>
        break;
 8000a06:	e060      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	1d19      	adds	r1, r3, #4
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	6011      	str	r1, [r2, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000a16:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000a18:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000a1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a26:	220a      	movs	r2, #10
 8000a28:	f7ff fd50 	bl	80004cc <_PrintUnsigned>
        break;
 8000a2c:	e04d      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	1d19      	adds	r1, r3, #4
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	6011      	str	r1, [r2, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8000a3c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000a3e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a4c:	2210      	movs	r2, #16
 8000a4e:	f7ff fd3d 	bl	80004cc <_PrintUnsigned>
        break;
 8000a52:	e03a      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	1d19      	adds	r1, r3, #4
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	6011      	str	r1, [r2, #0]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	66bb      	str	r3, [r7, #104]	@ 0x68
          do {
            c = *s;
 8000a62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            s++;
 8000a6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (c == '\0') {
 8000a70:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d00b      	beq.n	8000a90 <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8000a78:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8000a7c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fce4 	bl	8000450 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8000a88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	dae9      	bge.n	8000a62 <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 8000a8e:	e01c      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
              break;
 8000a90:	bf00      	nop
        break;
 8000a92:	e01a      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	1d19      	adds	r1, r3, #4
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	6011      	str	r1, [r2, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8000aa2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000aa4:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	9301      	str	r3, [sp, #4]
 8000aac:	2308      	movs	r3, #8
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	2210      	movs	r2, #16
 8000ab4:	f7ff fd0a 	bl	80004cc <_PrintUnsigned>
        break;
 8000ab8:	e007      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8000aba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000abe:	2125      	movs	r1, #37	@ 0x25
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fcc5 	bl	8000450 <_StoreChar>
        break;
 8000ac6:	e000      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 8000ac8:	bf00      	nop
      }
      sFormat++;
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	3301      	adds	r3, #1
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	e007      	b.n	8000ae2 <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 8000ad2:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8000ad6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fcb7 	bl	8000450 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8000ae2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	f6bf ae56 	bge.w	8000796 <SEGGER_RTT_vprintf+0x22>
 8000aea:	e000      	b.n	8000aee <SEGGER_RTT_vprintf+0x37a>
      break;
 8000aec:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8000aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	dd0d      	ble.n	8000b10 <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8000af4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d006      	beq.n	8000b08 <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8000afa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	f7ff fc80 	bl	8000408 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8000b08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000b0c:	4413      	add	r3, r2
 8000b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }
  return BufferDesc.ReturnValue;
 8000b10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3780      	adds	r7, #128	@ 0x80
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop

08000b1c <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8000b1c:	b40e      	push	{r1, r2, r3}
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b085      	sub	sp, #20
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	461a      	mov	r2, r3
 8000b32:	69f9      	ldr	r1, [r7, #28]
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff fe1d 	bl	8000774 <SEGGER_RTT_vprintf>
 8000b3a:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b48:	b003      	add	sp, #12
 8000b4a:	4770      	bx	lr

08000b4c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
void MX_DMA_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b52:	4b29      	ldr	r3, [pc, #164]	@ (8000bf8 <MX_DMA_Init+0xac>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a28      	ldr	r2, [pc, #160]	@ (8000bf8 <MX_DMA_Init+0xac>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6153      	str	r3, [r2, #20]
 8000b5e:	4b26      	ldr	r3, [pc, #152]	@ (8000bf8 <MX_DMA_Init+0xac>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000b6a:	4b24      	ldr	r3, [pc, #144]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b6c:	4a24      	ldr	r2, [pc, #144]	@ (8000c00 <MX_DMA_Init+0xb4>)
 8000b6e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000b70:	4b22      	ldr	r3, [pc, #136]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b76:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000b78:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b7a:	2240      	movs	r2, #64	@ 0x40
 8000b7c:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b80:	2280      	movs	r2, #128	@ 0x80
 8000b82:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b96:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b9c:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000b9e:	4817      	ldr	r0, [pc, #92]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000ba0:	f000 ffd4 	bl	8001b4c <HAL_DMA_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_DMA_Init+0x62>
  {
    Error_Handler();
 8000baa:	f000 f9db 	bl	8000f64 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	200e      	movs	r0, #14
 8000bb4:	f000 ff87 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000bb8:	200e      	movs	r0, #14
 8000bba:	f000 ffa0 	bl	8001afe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	200f      	movs	r0, #15
 8000bc4:	f000 ff7f 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000bc8:	200f      	movs	r0, #15
 8000bca:	f000 ff98 	bl	8001afe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2010      	movs	r0, #16
 8000bd4:	f000 ff77 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000bd8:	2010      	movs	r0, #16
 8000bda:	f000 ff90 	bl	8001afe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2011      	movs	r0, #17
 8000be4:	f000 ff6f 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000be8:	2011      	movs	r0, #17
 8000bea:	f000 ff88 	bl	8001afe <HAL_NVIC_EnableIRQ>

}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	20000518 	.word	0x20000518
 8000c00:	40020008 	.word	0x40020008

08000c04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	4a13      	ldr	r2, [pc, #76]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c10:	f043 0310 	orr.w	r3, r3, #16
 8000c14:	6193      	str	r3, [r2, #24]
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f003 0310 	and.w	r3, r3, #16
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c28:	f043 0320 	orr.w	r3, r3, #32
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 0320 	and.w	r3, r3, #32
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6193      	str	r3, [r2, #24]
 8000c46:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40021000 	.word	0x40021000

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int i;
	uart_ctx_t * uart_ctx;
	memset(&ctx, 0, sizeof(ctx_t));
 8000c66:	f242 0254 	movw	r2, #8276	@ 0x2054
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4878      	ldr	r0, [pc, #480]	@ (8000e50 <main+0x1f0>)
 8000c6e:	f009 fe89 	bl	800a984 <memset>
	ctx.uart1.name = "UART1";
 8000c72:	4b77      	ldr	r3, [pc, #476]	@ (8000e50 <main+0x1f0>)
 8000c74:	4a77      	ldr	r2, [pc, #476]	@ (8000e54 <main+0x1f4>)
 8000c76:	601a      	str	r2, [r3, #0]
	ctx.uart1.huart = &huart1;
 8000c78:	4b75      	ldr	r3, [pc, #468]	@ (8000e50 <main+0x1f0>)
 8000c7a:	4a77      	ldr	r2, [pc, #476]	@ (8000e58 <main+0x1f8>)
 8000c7c:	605a      	str	r2, [r3, #4]
	ctx.uart1.hdma_rx = &hdma_usart1_rx;
 8000c7e:	4b74      	ldr	r3, [pc, #464]	@ (8000e50 <main+0x1f0>)
 8000c80:	4a76      	ldr	r2, [pc, #472]	@ (8000e5c <main+0x1fc>)
 8000c82:	60da      	str	r2, [r3, #12]
	ctx.uart1.hdma_tx = &hdma_usart1_tx;
 8000c84:	4b72      	ldr	r3, [pc, #456]	@ (8000e50 <main+0x1f0>)
 8000c86:	4a76      	ldr	r2, [pc, #472]	@ (8000e60 <main+0x200>)
 8000c88:	611a      	str	r2, [r3, #16]
	ctx.uart1.irq_num = USART1_IRQn;
 8000c8a:	4b71      	ldr	r3, [pc, #452]	@ (8000e50 <main+0x1f0>)
 8000c8c:	2225      	movs	r2, #37	@ 0x25
 8000c8e:	721a      	strb	r2, [r3, #8]
	ctx.uart2.name = "UART2";
 8000c90:	4b6f      	ldr	r3, [pc, #444]	@ (8000e50 <main+0x1f0>)
 8000c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b72      	ldr	r3, [pc, #456]	@ (8000e64 <main+0x204>)
 8000c9a:	6293      	str	r3, [r2, #40]	@ 0x28
	ctx.uart2.huart = &huart2;
 8000c9c:	4b6c      	ldr	r3, [pc, #432]	@ (8000e50 <main+0x1f0>)
 8000c9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b70      	ldr	r3, [pc, #448]	@ (8000e68 <main+0x208>)
 8000ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ctx.uart2.hdma_rx = &hdma_usart2_rx;
 8000ca8:	4b69      	ldr	r3, [pc, #420]	@ (8000e50 <main+0x1f0>)
 8000caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b6e      	ldr	r3, [pc, #440]	@ (8000e6c <main+0x20c>)
 8000cb2:	6353      	str	r3, [r2, #52]	@ 0x34
	ctx.uart2.hdma_tx = &hdma_usart2_tx;
 8000cb4:	4b66      	ldr	r3, [pc, #408]	@ (8000e50 <main+0x1f0>)
 8000cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b6c      	ldr	r3, [pc, #432]	@ (8000e70 <main+0x210>)
 8000cbe:	6393      	str	r3, [r2, #56]	@ 0x38
	ctx.uart2.irq_num = USART2_IRQn;
 8000cc0:	4b63      	ldr	r3, [pc, #396]	@ (8000e50 <main+0x1f0>)
 8000cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cc6:	2226      	movs	r2, #38	@ 0x26
 8000cc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	ctx.memcpy_dma = &hdma_memtomem_dma1_channel1;
 8000ccc:	4b60      	ldr	r3, [pc, #384]	@ (8000e50 <main+0x1f0>)
 8000cce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b67      	ldr	r3, [pc, #412]	@ (8000e74 <main+0x214>)
 8000cd6:	6513      	str	r3, [r2, #80]	@ 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd8:	f000 fd98 	bl	800180c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cdc:	f000 f8ce 	bl	8000e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce0:	f7ff ff90 	bl	8000c04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ce4:	f7ff ff32 	bl	8000b4c <MX_DMA_Init>
  MX_RTC_Init();
 8000ce8:	f000 f942 	bl	8000f70 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000cec:	f000 fb42 	bl	8001374 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000cf0:	f000 fb6a 	bl	80013c8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000cf4:	f009 f82e 	bl	8009d54 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000cf8:	2005      	movs	r0, #5
 8000cfa:	f000 fed9 	bl	8001ab0 <HAL_NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn  , 0, 2);
 8000cfe:	2202      	movs	r2, #2
 8000d00:	2100      	movs	r1, #0
 8000d02:	2013      	movs	r0, #19
 8000d04:	f000 fedf 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn , 0, 3);
 8000d08:	2203      	movs	r2, #3
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2014      	movs	r0, #20
 8000d0e:	f000 feda 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(USART1_IRQn          , 0, 1);
 8000d12:	2201      	movs	r2, #1
 8000d14:	2100      	movs	r1, #0
 8000d16:	2025      	movs	r0, #37	@ 0x25
 8000d18:	f000 fed5 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(USART2_IRQn          , 0, 1);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2026      	movs	r0, #38	@ 0x26
 8000d22:	f000 fed0 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn   , 0, 2); // DMA for memory copy.
 8000d26:	2202      	movs	r2, #2
 8000d28:	2100      	movs	r1, #0
 8000d2a:	200b      	movs	r0, #11
 8000d2c:	f000 fecb 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn   , 1, 1); // UART1 Tx
 8000d30:	2201      	movs	r2, #1
 8000d32:	2101      	movs	r1, #1
 8000d34:	200e      	movs	r0, #14
 8000d36:	f000 fec6 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn   , 1, 0); // UART1 Rx
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	200f      	movs	r0, #15
 8000d40:	f000 fec1 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn   , 1, 1); // UART2 Tx
 8000d44:	2201      	movs	r2, #1
 8000d46:	2101      	movs	r1, #1
 8000d48:	2010      	movs	r0, #16
 8000d4a:	f000 febc 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn   , 1, 0); // UART2 Rx
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2101      	movs	r1, #1
 8000d52:	2011      	movs	r0, #17
 8000d54:	f000 feb7 	bl	8001ac6 <HAL_NVIC_SetPriority>

  __HAL_UART_DISABLE(&huart1);
 8000d58:	4b3f      	ldr	r3, [pc, #252]	@ (8000e58 <main+0x1f8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e58 <main+0x1f8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000d66:	60da      	str	r2, [r3, #12]
  __HAL_UART_DISABLE(&huart2);
 8000d68:	4b3f      	ldr	r3, [pc, #252]	@ (8000e68 <main+0x208>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e68 <main+0x208>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000d76:	60da      	str	r2, [r3, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for (i = 0; i < 2; i++)
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	e063      	b.n	8000e46 <main+0x1e6>
	  {
		uart_ctx = (i == 0) ? &ctx.uart1 : &ctx.uart2;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d101      	bne.n	8000d88 <main+0x128>
 8000d84:	4b32      	ldr	r3, [pc, #200]	@ (8000e50 <main+0x1f0>)
 8000d86:	e000      	b.n	8000d8a <main+0x12a>
 8000d88:	4b3b      	ldr	r3, [pc, #236]	@ (8000e78 <main+0x218>)
 8000d8a:	60bb      	str	r3, [r7, #8]
	    if (uart_ctx->buf_idx != uart_ctx->buf.idx)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d028      	beq.n	8000df2 <main+0x192>
	    {
	    	int buf_idx = uart_ctx->buf_idx;
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da8:	607b      	str	r3, [r7, #4]
	    	while (CDC_Transmit_FS((uint8_t *)uart_ctx->buf.data[buf_idx], uart_ctx->buf.len[buf_idx], 2 * i) == USBD_BUSY) {
 8000daa:	bf00      	nop
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	029b      	lsls	r3, r3, #10
 8000db0:	3310      	adds	r3, #16
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	4413      	add	r3, r2
 8000db6:	1d18      	adds	r0, r3, #4
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	b299      	uxth	r1, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	f009 f95d 	bl	800a090 <CDC_Transmit_FS>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d0e7      	beq.n	8000dac <main+0x14c>
	        /* Until data out. */
	    }
	    uart_ctx->buf_idx = buf_idx ? 0 : 1;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	bf0c      	ite	eq
 8000de2:	2301      	moveq	r3, #1
 8000de4:	2300      	movne	r3, #0
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	461a      	mov	r2, r3
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000df0:	625a      	str	r2, [r3, #36]	@ 0x24
	    // SEGGER_RTT_printf(0, "mloop: buf=%d\n", buf_idx);
	  }

	  if (uart_ctx->buf.rest_len > 0)
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	dd20      	ble.n	8000e40 <main+0x1e0>
	  {
		  int tx_len = uart_ctx->buf.rest_len;
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	603b      	str	r3, [r7, #0]
	      uart_ctx->buf.rest_len = 0;
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e0e:	461a      	mov	r2, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	61d3      	str	r3, [r2, #28]
	      uart_ctx->buf_idx = 0;
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	6253      	str	r3, [r2, #36]	@ 0x24
	      while (CDC_Transmit_FS((uint8_t *)uart_ctx->buf.data_rest, tx_len, 2 * i) == USBD_BUSY)
 8000e20:	bf00      	nop
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	f603 0014 	addw	r0, r3, #2068	@ 0x814
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b299      	uxth	r1, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	f009 f92b 	bl	800a090 <CDC_Transmit_FS>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d0f0      	beq.n	8000e22 <main+0x1c2>
	  for (i = 0; i < 2; i++)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3301      	adds	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	dd98      	ble.n	8000d7e <main+0x11e>
 8000e4c:	e794      	b.n	8000d78 <main+0x118>
 8000e4e:	bf00      	nop
 8000e50:	2000055c 	.word	0x2000055c
 8000e54:	0800aa28 	.word	0x0800aa28
 8000e58:	200025c4 	.word	0x200025c4
 8000e5c:	20002654 	.word	0x20002654
 8000e60:	20002698 	.word	0x20002698
 8000e64:	0800aa30 	.word	0x0800aa30
 8000e68:	2000260c 	.word	0x2000260c
 8000e6c:	200026dc 	.word	0x200026dc
 8000e70:	20002720 	.word	0x20002720
 8000e74:	20000518 	.word	0x20000518
 8000e78:	20001584 	.word	0x20001584

08000e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b094      	sub	sp, #80	@ 0x50
 8000e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e86:	2228      	movs	r2, #40	@ 0x28
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f009 fd7a 	bl	800a984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000eac:	2305      	movs	r3, #5
 8000eae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ecc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 f99e 	bl	8004218 <HAL_RCC_OscConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ee2:	f000 f83f 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ef6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2102      	movs	r1, #2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 fc0a 	bl	800471c <HAL_RCC_ClockConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f0e:	f000 f829 	bl	8000f64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8000f12:	2311      	movs	r3, #17
 8000f14:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f1a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 fd88 	bl	8004a38 <HAL_RCCEx_PeriphCLKConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f2e:	f000 f819 	bl	8000f64 <Error_Handler>
  }
}
 8000f32:	bf00      	nop
 8000f34:	3750      	adds	r7, #80	@ 0x50
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
    SEGGER_RTT_printf(0, "_Error_Handler: %s #%d\n", file, line);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	4905      	ldr	r1, [pc, #20]	@ (8000f60 <_Error_Handler+0x24>)
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff fde5 	bl	8000b1c <SEGGER_RTT_printf>
    HAL_Delay(1000);
 8000f52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f56:	f000 fcbb 	bl	80018d0 <HAL_Delay>
    SEGGER_RTT_printf(0, "_Error_Handler: %s #%d\n", file, line);
 8000f5a:	bf00      	nop
 8000f5c:	e7f3      	b.n	8000f46 <_Error_Handler+0xa>
 8000f5e:	bf00      	nop
 8000f60:	0800aa38 	.word	0x0800aa38

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <MX_RTC_Init+0x30>)
 8000f76:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <MX_RTC_Init+0x34>)
 8000f78:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <MX_RTC_Init+0x30>)
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f80:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <MX_RTC_Init+0x30>)
 8000f84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f88:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_RTC_Init+0x30>)
 8000f8c:	f003 fec0 	bl	8004d10 <HAL_RTC_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000f96:	f7ff ffe5 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200025b0 	.word	0x200025b0
 8000fa4:	40002800 	.word	0x40002800

08000fa8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe4 <HAL_RTC_MspInit+0x3c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d110      	bne.n	8000fdc <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000fba:	f003 f921 	bl	8004200 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <HAL_RTC_MspInit+0x40>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	4a09      	ldr	r2, [pc, #36]	@ (8000fe8 <HAL_RTC_MspInit+0x40>)
 8000fc4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000fc8:	61d3      	str	r3, [r2, #28]
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <HAL_RTC_MspInit+0x40>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fd6:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <HAL_RTC_MspInit+0x44>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40002800 	.word	0x40002800
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	4242043c 	.word	0x4242043c

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff6:	4b19      	ldr	r3, [pc, #100]	@ (800105c <HAL_MspInit+0x6c>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	4a18      	ldr	r2, [pc, #96]	@ (800105c <HAL_MspInit+0x6c>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6193      	str	r3, [r2, #24]
 8001002:	4b16      	ldr	r3, [pc, #88]	@ (800105c <HAL_MspInit+0x6c>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b13      	ldr	r3, [pc, #76]	@ (800105c <HAL_MspInit+0x6c>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a12      	ldr	r2, [pc, #72]	@ (800105c <HAL_MspInit+0x6c>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <HAL_MspInit+0x6c>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2005      	movs	r0, #5
 800102c:	f000 fd4b 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001030:	2005      	movs	r0, #5
 8001032:	f000 fd64 	bl	8001afe <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001036:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <HAL_MspInit+0x70>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <HAL_MspInit+0x70>)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	40010000 	.word	0x40010000

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <NMI_Handler+0x4>

0800106c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <MemManage_Handler+0x4>

0800107c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <UsageFault_Handler+0x4>

0800108c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b4:	f000 fbf0 	bl	8001898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80010b8:	f000 fd3b 	bl	8001b32 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80010d0:	4802      	ldr	r0, [pc, #8]	@ (80010dc <DMA1_Channel4_IRQHandler+0x10>)
 80010d2:	f001 f87d 	bl	80021d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20002698 	.word	0x20002698

080010e0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80010e4:	4802      	ldr	r0, [pc, #8]	@ (80010f0 <DMA1_Channel5_IRQHandler+0x10>)
 80010e6:	f001 f873 	bl	80021d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20002654 	.word	0x20002654

080010f4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80010f8:	4802      	ldr	r0, [pc, #8]	@ (8001104 <DMA1_Channel6_IRQHandler+0x10>)
 80010fa:	f001 f869 	bl	80021d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200026dc 	.word	0x200026dc

08001108 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800110c:	4802      	ldr	r0, [pc, #8]	@ (8001118 <DMA1_Channel7_IRQHandler+0x10>)
 800110e:	f001 f85f 	bl	80021d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20002720 	.word	0x20002720

0800111c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001120:	4802      	ldr	r0, [pc, #8]	@ (800112c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001122:	f001 fc29 	bl	8002978 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20003030 	.word	0x20003030

08001130 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001136:	4843      	ldr	r0, [pc, #268]	@ (8001244 <USART1_IRQHandler+0x114>)
 8001138:	f004 f858 	bl	80051ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 800113c:	4b41      	ldr	r3, [pc, #260]	@ (8001244 <USART1_IRQHandler+0x114>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	2b10      	cmp	r3, #16
 8001148:	d177      	bne.n	800123a <USART1_IRQHandler+0x10a>
    uart_ctx_t * const uart_ctx = &ctx.uart1;
 800114a:	4b3f      	ldr	r3, [pc, #252]	@ (8001248 <USART1_IRQHandler+0x118>)
 800114c:	60bb      	str	r3, [r7, #8]
    int buf_len; 

    __HAL_UART_CLEAR_IDLEFLAG(uart_ctx->huart);
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]

    if (uart_ctx->buf.idx == 0) {
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d107      	bne.n	8001184 <USART1_IRQHandler+0x54>
      buf_len = DBL_BUF_TOTAL_LEN - __HAL_DMA_GET_COUNTER(uart_ctx->hdma_rx); 
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	e006      	b.n	8001192 <USART1_IRQHandler+0x62>
    } else {
      buf_len = DBL_BUF_LEN - __HAL_DMA_GET_COUNTER(uart_ctx->hdma_rx); 
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8001190:	60fb      	str	r3, [r7, #12]
    }

    // SEGGER_RTT_printf(0, "idle[1]: %d, len=%d\n", uart_ctx->buf.idx, buf_len);
    HAL_UART_DMAStop(uart_ctx->huart);
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	f003 ffa9 	bl	80050ee <HAL_UART_DMAStop>
    if (buf_len > 0) {
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	dd3c      	ble.n	800121c <USART1_IRQHandler+0xec>
      if (buf_len == 1) {
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d112      	bne.n	80011ce <USART1_IRQHandler+0x9e>
        uart_ctx->buf.data_rest[0] = uart_ctx->buf.data[uart_ctx->buf.idx][0];
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	029b      	lsls	r3, r3, #10
 80011b4:	4413      	add	r3, r2
 80011b6:	3314      	adds	r3, #20
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
        uart_ctx->buf.rest_len = 1;
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011c6:	461a      	mov	r2, r3
 80011c8:	2301      	movs	r3, #1
 80011ca:	61d3      	str	r3, [r2, #28]
 80011cc:	e026      	b.n	800121c <USART1_IRQHandler+0xec>
      } else {
        // memcpy(uart_ctx->buf.data_rest, uart_ctx->buf.data[uart_ctx->buf.idx], buf_len);
        HAL_DMA_Start(ctx.memcpy_dma, (uint32_t)uart_ctx->buf.data[uart_ctx->buf.idx], (uint32_t)uart_ctx->buf.data_rest, buf_len);
 80011ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001248 <USART1_IRQHandler+0x118>)
 80011d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011d4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	029b      	lsls	r3, r3, #10
 80011e0:	3310      	adds	r3, #16
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	4413      	add	r3, r2
 80011e6:	3304      	adds	r3, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 80011f0:	461a      	mov	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f000 fd04 	bl	8001c00 <HAL_DMA_Start>
        if (HAL_DMA_PollForTransfer(ctx.memcpy_dma, HAL_DMA_FULL_TRANSFER, 2) == HAL_OK) {
 80011f8:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <USART1_IRQHandler+0x118>)
 80011fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001200:	2202      	movs	r2, #2
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fe51 	bl	8001eac <HAL_DMA_PollForTransfer>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d105      	bne.n	800121c <USART1_IRQHandler+0xec>
          uart_ctx->buf.rest_len = buf_len;
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	61d3      	str	r3, [r2, #28]
        }
      }
    }

    // Set index of double buffer to next.
    uart_ctx->buf.idx = 0;
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001222:	461a      	mov	r2, r3
 8001224:	2300      	movs	r3, #0
 8001226:	6213      	str	r3, [r2, #32]
    HAL_UART_Receive_DMA(uart_ctx->huart, (uint8_t *)uart_ctx->buf.data[0], DBL_BUF_TOTAL_LEN);
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	6858      	ldr	r0, [r3, #4]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	3314      	adds	r3, #20
 8001230:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001234:	4619      	mov	r1, r3
 8001236:	f003 ff35 	bl	80050a4 <HAL_UART_Receive_DMA>

  }
  /* USER CODE END USART1_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200025c4 	.word	0x200025c4
 8001248:	2000055c 	.word	0x2000055c

0800124c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  // SEGGER_RTT_printf(0, "Uart2 IRQ\n");
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001252:	4842      	ldr	r0, [pc, #264]	@ (800135c <USART2_IRQHandler+0x110>)
 8001254:	f003 ffca 	bl	80051ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 8001258:	4b40      	ldr	r3, [pc, #256]	@ (800135c <USART2_IRQHandler+0x110>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0310 	and.w	r3, r3, #16
 8001262:	2b10      	cmp	r3, #16
 8001264:	d175      	bne.n	8001352 <USART2_IRQHandler+0x106>
    uart_ctx_t * const uart_ctx = &ctx.uart2;
 8001266:	4b3e      	ldr	r3, [pc, #248]	@ (8001360 <USART2_IRQHandler+0x114>)
 8001268:	60bb      	str	r3, [r7, #8]
    int buf_len; 

    __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b3b      	ldr	r3, [pc, #236]	@ (800135c <USART2_IRQHandler+0x110>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b39      	ldr	r3, [pc, #228]	@ (800135c <USART2_IRQHandler+0x110>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]

    if (uart_ctx->buf.idx == 0) {
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d107      	bne.n	800129c <USART2_IRQHandler+0x50>
      buf_len = DBL_BUF_TOTAL_LEN - __HAL_DMA_GET_COUNTER(uart_ctx->hdma_rx); 
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	e006      	b.n	80012aa <USART2_IRQHandler+0x5e>
    } else {
      buf_len = DBL_BUF_LEN - __HAL_DMA_GET_COUNTER(uart_ctx->hdma_rx); 
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80012a8:	60fb      	str	r3, [r7, #12]
    }

    // SEGGER_RTT_printf(0, "idle[2]: %d, len=%d\n", uart_ctx->buf.idx, buf_len);
    HAL_UART_DMAStop(uart_ctx->huart);
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 ff1d 	bl	80050ee <HAL_UART_DMAStop>
    if (buf_len > 0) {
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	dd3c      	ble.n	8001334 <USART2_IRQHandler+0xe8>
      if (buf_len == 1) {
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d112      	bne.n	80012e6 <USART2_IRQHandler+0x9a>
        uart_ctx->buf.data_rest[0] = uart_ctx->buf.data[uart_ctx->buf.idx][0];
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	029b      	lsls	r3, r3, #10
 80012cc:	4413      	add	r3, r2
 80012ce:	3314      	adds	r3, #20
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
        uart_ctx->buf.rest_len = 1;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012de:	461a      	mov	r2, r3
 80012e0:	2301      	movs	r3, #1
 80012e2:	61d3      	str	r3, [r2, #28]
 80012e4:	e026      	b.n	8001334 <USART2_IRQHandler+0xe8>
      } else {
        // memcpy(uart_ctx->buf.data_rest, uart_ctx->buf.data[uart_ctx->buf.idx], buf_len);
        HAL_DMA_Start(ctx.memcpy_dma, (uint32_t)uart_ctx->buf.data[uart_ctx->buf.idx], (uint32_t)uart_ctx->buf.data_rest, buf_len);
 80012e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001364 <USART2_IRQHandler+0x118>)
 80012e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80012ec:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	029b      	lsls	r3, r3, #10
 80012f8:	3310      	adds	r3, #16
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	4413      	add	r3, r2
 80012fe:	3304      	adds	r3, #4
 8001300:	4619      	mov	r1, r3
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001308:	461a      	mov	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f000 fc78 	bl	8001c00 <HAL_DMA_Start>
        if (HAL_DMA_PollForTransfer(ctx.memcpy_dma, HAL_DMA_FULL_TRANSFER, 10) == HAL_OK) {
 8001310:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <USART2_IRQHandler+0x118>)
 8001312:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001318:	220a      	movs	r2, #10
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fdc5 	bl	8001eac <HAL_DMA_PollForTransfer>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d105      	bne.n	8001334 <USART2_IRQHandler+0xe8>
          uart_ctx->buf.rest_len = buf_len;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	61d3      	str	r3, [r2, #28]
        }
      }
    }

    // Set index of double buffer to next.
    uart_ctx->buf.idx = 0;
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800133a:	461a      	mov	r2, r3
 800133c:	2300      	movs	r3, #0
 800133e:	6213      	str	r3, [r2, #32]
    HAL_UART_Receive_DMA(uart_ctx->huart, (uint8_t *)uart_ctx->buf.data[0], DBL_BUF_TOTAL_LEN);
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	6858      	ldr	r0, [r3, #4]
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	3314      	adds	r3, #20
 8001348:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800134c:	4619      	mov	r1, r3
 800134e:	f003 fea9 	bl	80050a4 <HAL_UART_Receive_DMA>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000260c 	.word	0x2000260c
 8001360:	20001584 	.word	0x20001584
 8001364:	2000055c 	.word	0x2000055c

08001368 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_USART1_UART_Init+0x4c>)
 800137a:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <MX_USART1_UART_Init+0x50>)
 800137c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <MX_USART1_UART_Init+0x4c>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <MX_USART1_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <MX_USART1_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <MX_USART1_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MX_USART1_UART_Init+0x4c>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <MX_USART1_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <MX_USART1_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <MX_USART1_UART_Init+0x4c>)
 80013ac:	f003 fdb9 	bl	8004f22 <HAL_UART_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013b6:	f7ff fdd5 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200025c4 	.word	0x200025c4
 80013c4:	40013800 	.word	0x40013800

080013c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013ce:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <MX_USART2_UART_Init+0x50>)
 80013d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ec:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f8:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <MX_USART2_UART_Init+0x4c>)
 8001400:	f003 fd8f 	bl	8004f22 <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800140a:	f7ff fdab 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000260c 	.word	0x2000260c
 8001418:	40004400 	.word	0x40004400

0800141c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	@ 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0318 	add.w	r3, r7, #24
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a8d      	ldr	r2, [pc, #564]	@ (800166c <HAL_UART_MspInit+0x250>)
 8001438:	4293      	cmp	r3, r2
 800143a:	f040 8088 	bne.w	800154e <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800143e:	4b8c      	ldr	r3, [pc, #560]	@ (8001670 <HAL_UART_MspInit+0x254>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	4a8b      	ldr	r2, [pc, #556]	@ (8001670 <HAL_UART_MspInit+0x254>)
 8001444:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001448:	6193      	str	r3, [r2, #24]
 800144a:	4b89      	ldr	r3, [pc, #548]	@ (8001670 <HAL_UART_MspInit+0x254>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	4b86      	ldr	r3, [pc, #536]	@ (8001670 <HAL_UART_MspInit+0x254>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	4a85      	ldr	r2, [pc, #532]	@ (8001670 <HAL_UART_MspInit+0x254>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	6193      	str	r3, [r2, #24]
 8001462:	4b83      	ldr	r3, [pc, #524]	@ (8001670 <HAL_UART_MspInit+0x254>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800146e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0318 	add.w	r3, r7, #24
 8001480:	4619      	mov	r1, r3
 8001482:	487c      	ldr	r0, [pc, #496]	@ (8001674 <HAL_UART_MspInit+0x258>)
 8001484:	f000 ffd8 	bl	8002438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001488:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0318 	add.w	r3, r7, #24
 800149a:	4619      	mov	r1, r3
 800149c:	4875      	ldr	r0, [pc, #468]	@ (8001674 <HAL_UART_MspInit+0x258>)
 800149e:	f000 ffcb 	bl	8002438 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80014a2:	4b75      	ldr	r3, [pc, #468]	@ (8001678 <HAL_UART_MspInit+0x25c>)
 80014a4:	4a75      	ldr	r2, [pc, #468]	@ (800167c <HAL_UART_MspInit+0x260>)
 80014a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014a8:	4b73      	ldr	r3, [pc, #460]	@ (8001678 <HAL_UART_MspInit+0x25c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ae:	4b72      	ldr	r3, [pc, #456]	@ (8001678 <HAL_UART_MspInit+0x25c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014b4:	4b70      	ldr	r3, [pc, #448]	@ (8001678 <HAL_UART_MspInit+0x25c>)
 80014b6:	2280      	movs	r2, #128	@ 0x80
 80014b8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ba:	4b6f      	ldr	r3, [pc, #444]	@ (8001678 <HAL_UART_MspInit+0x25c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014c0:	4b6d      	ldr	r3, [pc, #436]	@ (8001678 <HAL_UART_MspInit+0x25c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80014c6:	4b6c      	ldr	r3, [pc, #432]	@ (8001678 <HAL_UART_MspInit+0x25c>)
 80014c8:	2220      	movs	r2, #32
 80014ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001678 <HAL_UART_MspInit+0x25c>)
 80014ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80014d4:	4868      	ldr	r0, [pc, #416]	@ (8001678 <HAL_UART_MspInit+0x25c>)
 80014d6:	f000 fb39 	bl	8001b4c <HAL_DMA_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80014e0:	f7ff fd40 	bl	8000f64 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a64      	ldr	r2, [pc, #400]	@ (8001678 <HAL_UART_MspInit+0x25c>)
 80014e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014ea:	4a63      	ldr	r2, [pc, #396]	@ (8001678 <HAL_UART_MspInit+0x25c>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80014f0:	4b63      	ldr	r3, [pc, #396]	@ (8001680 <HAL_UART_MspInit+0x264>)
 80014f2:	4a64      	ldr	r2, [pc, #400]	@ (8001684 <HAL_UART_MspInit+0x268>)
 80014f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014f6:	4b62      	ldr	r3, [pc, #392]	@ (8001680 <HAL_UART_MspInit+0x264>)
 80014f8:	2210      	movs	r2, #16
 80014fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fc:	4b60      	ldr	r3, [pc, #384]	@ (8001680 <HAL_UART_MspInit+0x264>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001502:	4b5f      	ldr	r3, [pc, #380]	@ (8001680 <HAL_UART_MspInit+0x264>)
 8001504:	2280      	movs	r2, #128	@ 0x80
 8001506:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001508:	4b5d      	ldr	r3, [pc, #372]	@ (8001680 <HAL_UART_MspInit+0x264>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800150e:	4b5c      	ldr	r3, [pc, #368]	@ (8001680 <HAL_UART_MspInit+0x264>)
 8001510:	2200      	movs	r2, #0
 8001512:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001514:	4b5a      	ldr	r3, [pc, #360]	@ (8001680 <HAL_UART_MspInit+0x264>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800151a:	4b59      	ldr	r3, [pc, #356]	@ (8001680 <HAL_UART_MspInit+0x264>)
 800151c:	2200      	movs	r2, #0
 800151e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001520:	4857      	ldr	r0, [pc, #348]	@ (8001680 <HAL_UART_MspInit+0x264>)
 8001522:	f000 fb13 	bl	8001b4c <HAL_DMA_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 800152c:	f7ff fd1a 	bl	8000f64 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a53      	ldr	r2, [pc, #332]	@ (8001680 <HAL_UART_MspInit+0x264>)
 8001534:	639a      	str	r2, [r3, #56]	@ 0x38
 8001536:	4a52      	ldr	r2, [pc, #328]	@ (8001680 <HAL_UART_MspInit+0x264>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	2025      	movs	r0, #37	@ 0x25
 8001542:	f000 fac0 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001546:	2025      	movs	r0, #37	@ 0x25
 8001548:	f000 fad9 	bl	8001afe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800154c:	e08a      	b.n	8001664 <HAL_UART_MspInit+0x248>
  else if(uartHandle->Instance==USART2)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a4d      	ldr	r2, [pc, #308]	@ (8001688 <HAL_UART_MspInit+0x26c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	f040 8085 	bne.w	8001664 <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART2_CLK_ENABLE();
 800155a:	4b45      	ldr	r3, [pc, #276]	@ (8001670 <HAL_UART_MspInit+0x254>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4a44      	ldr	r2, [pc, #272]	@ (8001670 <HAL_UART_MspInit+0x254>)
 8001560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001564:	61d3      	str	r3, [r2, #28]
 8001566:	4b42      	ldr	r3, [pc, #264]	@ (8001670 <HAL_UART_MspInit+0x254>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b3f      	ldr	r3, [pc, #252]	@ (8001670 <HAL_UART_MspInit+0x254>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	4a3e      	ldr	r2, [pc, #248]	@ (8001670 <HAL_UART_MspInit+0x254>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	6193      	str	r3, [r2, #24]
 800157e:	4b3c      	ldr	r3, [pc, #240]	@ (8001670 <HAL_UART_MspInit+0x254>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800158a:	2304      	movs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 0318 	add.w	r3, r7, #24
 800159a:	4619      	mov	r1, r3
 800159c:	4835      	ldr	r0, [pc, #212]	@ (8001674 <HAL_UART_MspInit+0x258>)
 800159e:	f000 ff4b 	bl	8002438 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015a2:	2308      	movs	r3, #8
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 0318 	add.w	r3, r7, #24
 80015b2:	4619      	mov	r1, r3
 80015b4:	482f      	ldr	r0, [pc, #188]	@ (8001674 <HAL_UART_MspInit+0x258>)
 80015b6:	f000 ff3f 	bl	8002438 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80015ba:	4b34      	ldr	r3, [pc, #208]	@ (800168c <HAL_UART_MspInit+0x270>)
 80015bc:	4a34      	ldr	r2, [pc, #208]	@ (8001690 <HAL_UART_MspInit+0x274>)
 80015be:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c0:	4b32      	ldr	r3, [pc, #200]	@ (800168c <HAL_UART_MspInit+0x270>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c6:	4b31      	ldr	r3, [pc, #196]	@ (800168c <HAL_UART_MspInit+0x270>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015cc:	4b2f      	ldr	r3, [pc, #188]	@ (800168c <HAL_UART_MspInit+0x270>)
 80015ce:	2280      	movs	r2, #128	@ 0x80
 80015d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015d2:	4b2e      	ldr	r3, [pc, #184]	@ (800168c <HAL_UART_MspInit+0x270>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d8:	4b2c      	ldr	r3, [pc, #176]	@ (800168c <HAL_UART_MspInit+0x270>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80015de:	4b2b      	ldr	r3, [pc, #172]	@ (800168c <HAL_UART_MspInit+0x270>)
 80015e0:	2220      	movs	r2, #32
 80015e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80015e4:	4b29      	ldr	r3, [pc, #164]	@ (800168c <HAL_UART_MspInit+0x270>)
 80015e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015ec:	4827      	ldr	r0, [pc, #156]	@ (800168c <HAL_UART_MspInit+0x270>)
 80015ee:	f000 faad 	bl	8001b4c <HAL_DMA_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 80015f8:	f7ff fcb4 	bl	8000f64 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a23      	ldr	r2, [pc, #140]	@ (800168c <HAL_UART_MspInit+0x270>)
 8001600:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001602:	4a22      	ldr	r2, [pc, #136]	@ (800168c <HAL_UART_MspInit+0x270>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001608:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <HAL_UART_MspInit+0x278>)
 800160a:	4a23      	ldr	r2, [pc, #140]	@ (8001698 <HAL_UART_MspInit+0x27c>)
 800160c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800160e:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <HAL_UART_MspInit+0x278>)
 8001610:	2210      	movs	r2, #16
 8001612:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001614:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <HAL_UART_MspInit+0x278>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800161a:	4b1e      	ldr	r3, [pc, #120]	@ (8001694 <HAL_UART_MspInit+0x278>)
 800161c:	2280      	movs	r2, #128	@ 0x80
 800161e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001620:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <HAL_UART_MspInit+0x278>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001626:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <HAL_UART_MspInit+0x278>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800162c:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <HAL_UART_MspInit+0x278>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001632:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <HAL_UART_MspInit+0x278>)
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001638:	4816      	ldr	r0, [pc, #88]	@ (8001694 <HAL_UART_MspInit+0x278>)
 800163a:	f000 fa87 	bl	8001b4c <HAL_DMA_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 8001644:	f7ff fc8e 	bl	8000f64 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <HAL_UART_MspInit+0x278>)
 800164c:	639a      	str	r2, [r3, #56]	@ 0x38
 800164e:	4a11      	ldr	r2, [pc, #68]	@ (8001694 <HAL_UART_MspInit+0x278>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	2026      	movs	r0, #38	@ 0x26
 800165a:	f000 fa34 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800165e:	2026      	movs	r0, #38	@ 0x26
 8001660:	f000 fa4d 	bl	8001afe <HAL_NVIC_EnableIRQ>
}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	@ 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40013800 	.word	0x40013800
 8001670:	40021000 	.word	0x40021000
 8001674:	40010800 	.word	0x40010800
 8001678:	20002654 	.word	0x20002654
 800167c:	40020058 	.word	0x40020058
 8001680:	20002698 	.word	0x20002698
 8001684:	40020044 	.word	0x40020044
 8001688:	40004400 	.word	0x40004400
 800168c:	200026dc 	.word	0x200026dc
 8001690:	4002006c 	.word	0x4002006c
 8001694:	20002720 	.word	0x20002720
 8001698:	40020080 	.word	0x40020080

0800169c <HAL_UART_RxHalfCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uart_ctx_t * const uart_ctx = (huart == &huart1) ? &ctx.uart1 : &ctx.uart2;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a16      	ldr	r2, [pc, #88]	@ (8001700 <HAL_UART_RxHalfCpltCallback+0x64>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_UART_RxHalfCpltCallback+0x14>
 80016ac:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <HAL_UART_RxHalfCpltCallback+0x68>)
 80016ae:	e000      	b.n	80016b2 <HAL_UART_RxHalfCpltCallback+0x16>
 80016b0:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <HAL_UART_RxHalfCpltCallback+0x6c>)
 80016b2:	60fb      	str	r3, [r7, #12]
  // const int usb_idx = (huart == &huart2) ? 0 : 2;

  if (uart_ctx->buf.idx != 0) {
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_UART_RxHalfCpltCallback+0x30>
    uart_ctx->buf.idx = 0;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c6:	461a      	mov	r2, r3
 80016c8:	2300      	movs	r3, #0
 80016ca:	6213      	str	r3, [r2, #32]
  }

  if (uart_ctx->buf_idx == 1) {
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d00d      	beq.n	80016f4 <HAL_UART_RxHalfCpltCallback+0x58>
    // SEGGER_RTT_printf(0, "rxhalf: %s; [X]\n", uart_ctx->name);
    return;
  }

  // In Rx Half callback, the length of received data is half length of double buffer.
  uart_ctx->buf.len[0] = DBL_BUF_LEN;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016de:	461a      	mov	r2, r3
 80016e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016e4:	6153      	str	r3, [r2, #20]
  // Set index of double buffer to next.
  uart_ctx->buf.idx = 1;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ec:	461a      	mov	r2, r3
 80016ee:	2301      	movs	r3, #1
 80016f0:	6213      	str	r3, [r2, #32]
 80016f2:	e000      	b.n	80016f6 <HAL_UART_RxHalfCpltCallback+0x5a>
    return;
 80016f4:	bf00      	nop
  // SEGGER_RTT_printf(0, "rxhalf: %s; \n", uart_ctx->name);
}
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	200025c4 	.word	0x200025c4
 8001704:	2000055c 	.word	0x2000055c
 8001708:	20001584 	.word	0x20001584

0800170c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uart_ctx_t * const uart_ctx = (huart == &huart1) ? &ctx.uart1 : &ctx.uart2;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a16      	ldr	r2, [pc, #88]	@ (8001770 <HAL_UART_RxCpltCallback+0x64>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d101      	bne.n	8001720 <HAL_UART_RxCpltCallback+0x14>
 800171c:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <HAL_UART_RxCpltCallback+0x68>)
 800171e:	e000      	b.n	8001722 <HAL_UART_RxCpltCallback+0x16>
 8001720:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <HAL_UART_RxCpltCallback+0x6c>)
 8001722:	60fb      	str	r3, [r7, #12]
  // const int usb_idx = (huart == &huart2) ? 0 : 2;

  if (uart_ctx->buf.idx != 1) {
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d005      	beq.n	800173c <HAL_UART_RxCpltCallback+0x30>
    uart_ctx->buf.idx = 1;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001736:	461a      	mov	r2, r3
 8001738:	2301      	movs	r3, #1
 800173a:	6213      	str	r3, [r2, #32]
  }
  if (uart_ctx->buf_idx == 0) {
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00d      	beq.n	8001764 <HAL_UART_RxCpltCallback+0x58>
    // SEGGER_RTT_printf(0, "rxcmpl: %s; [X]\n", uart_ctx->name);
    return;
  }

  // In Rx callback, the length of received data is half length of double buffer.
  uart_ctx->buf.len[1] = DBL_BUF_LEN;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800174e:	461a      	mov	r2, r3
 8001750:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001754:	6193      	str	r3, [r2, #24]
  // Set index of double buffer to next.
  uart_ctx->buf.idx = 0;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800175c:	461a      	mov	r2, r3
 800175e:	2300      	movs	r3, #0
 8001760:	6213      	str	r3, [r2, #32]
 8001762:	e000      	b.n	8001766 <HAL_UART_RxCpltCallback+0x5a>
    return;
 8001764:	bf00      	nop
  // SEGGER_RTT_printf(0, "rxcmpl: %s; \n", uart_ctx->name);
}
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	200025c4 	.word	0x200025c4
 8001774:	2000055c 	.word	0x2000055c
 8001778:	20001584 	.word	0x20001584

0800177c <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uart_ctx_t * const uart_ctx = (huart == &huart1) ? &ctx.uart1 : &ctx.uart2;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a0b      	ldr	r2, [pc, #44]	@ (80017b4 <HAL_UART_ErrorCallback+0x38>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d101      	bne.n	8001790 <HAL_UART_ErrorCallback+0x14>
 800178c:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <HAL_UART_ErrorCallback+0x3c>)
 800178e:	e000      	b.n	8001792 <HAL_UART_ErrorCallback+0x16>
 8001790:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <HAL_UART_ErrorCallback+0x40>)
 8001792:	60fb      	str	r3, [r7, #12]

  HAL_UART_DMAStop(huart);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f003 fcaa 	bl	80050ee <HAL_UART_DMAStop>
  HAL_UART_Receive_DMA(huart, (uint8_t *)uart_ctx->buf.data[0], DBL_BUF_TOTAL_LEN);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3314      	adds	r3, #20
 800179e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017a2:	4619      	mov	r1, r3
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f003 fc7d 	bl	80050a4 <HAL_UART_Receive_DMA>
}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200025c4 	.word	0x200025c4
 80017b8:	2000055c 	.word	0x2000055c
 80017bc:	20001584 	.word	0x20001584

080017c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c0:	f7ff fdd2 	bl	8001368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c4:	480b      	ldr	r0, [pc, #44]	@ (80017f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017c6:	490c      	ldr	r1, [pc, #48]	@ (80017f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017c8:	4a0c      	ldr	r2, [pc, #48]	@ (80017fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a09      	ldr	r2, [pc, #36]	@ (8001800 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017dc:	4c09      	ldr	r4, [pc, #36]	@ (8001804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ea:	f009 f8d3 	bl	800a994 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ee:	f7ff fa37 	bl	8000c60 <main>
  bx lr
 80017f2:	4770      	bx	lr
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 80017fc:	0800ab74 	.word	0x0800ab74
  ldr r2, =_sbss
 8001800:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8001804:	20003528 	.word	0x20003528

08001808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC1_2_IRQHandler>
	...

0800180c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001810:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <HAL_Init+0x28>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a07      	ldr	r2, [pc, #28]	@ (8001834 <HAL_Init+0x28>)
 8001816:	f043 0310 	orr.w	r3, r3, #16
 800181a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f000 f947 	bl	8001ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001822:	200f      	movs	r0, #15
 8001824:	f000 f808 	bl	8001838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001828:	f7ff fbe2 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <HAL_InitTick+0x54>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_InitTick+0x58>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800184e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f95f 	bl	8001b1a <HAL_SYSTICK_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e00e      	b.n	8001884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d80a      	bhi.n	8001882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f000 f927 	bl	8001ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001878:	4a06      	ldr	r2, [pc, #24]	@ (8001894 <HAL_InitTick+0x5c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e000      	b.n	8001884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000000 	.word	0x20000000
 8001890:	20000008 	.word	0x20000008
 8001894:	20000004 	.word	0x20000004

08001898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_IncTick+0x1c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <HAL_IncTick+0x20>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a03      	ldr	r2, [pc, #12]	@ (80018b8 <HAL_IncTick+0x20>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	20000008 	.word	0x20000008
 80018b8:	20002764 	.word	0x20002764

080018bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b02      	ldr	r3, [pc, #8]	@ (80018cc <HAL_GetTick+0x10>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	20002764 	.word	0x20002764

080018d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff fff0 	bl	80018bc <HAL_GetTick>
 80018dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d005      	beq.n	80018f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <HAL_Delay+0x44>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f6:	bf00      	nop
 80018f8:	f7ff ffe0 	bl	80018bc <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	d8f7      	bhi.n	80018f8 <HAL_Delay+0x28>
  {
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000008 	.word	0x20000008

08001918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001934:	4013      	ands	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001940:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194a:	4a04      	ldr	r2, [pc, #16]	@ (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	60d3      	str	r3, [r2, #12]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001964:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <__NVIC_GetPriorityGrouping+0x18>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	f003 0307 	and.w	r3, r3, #7
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	2b00      	cmp	r3, #0
 800198c:	db0b      	blt.n	80019a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	f003 021f 	and.w	r2, r3, #31
 8001994:	4906      	ldr	r1, [pc, #24]	@ (80019b0 <__NVIC_EnableIRQ+0x34>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	2001      	movs	r0, #1
 800199e:	fa00 f202 	lsl.w	r2, r0, r2
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100

080019b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db0a      	blt.n	80019de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	490c      	ldr	r1, [pc, #48]	@ (8001a00 <__NVIC_SetPriority+0x4c>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	440b      	add	r3, r1
 80019d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019dc:	e00a      	b.n	80019f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4908      	ldr	r1, [pc, #32]	@ (8001a04 <__NVIC_SetPriority+0x50>)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	3b04      	subs	r3, #4
 80019ec:	0112      	lsls	r2, r2, #4
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	761a      	strb	r2, [r3, #24]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	@ 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f1c3 0307 	rsb	r3, r3, #7
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	bf28      	it	cs
 8001a26:	2304      	movcs	r3, #4
 8001a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d902      	bls.n	8001a38 <NVIC_EncodePriority+0x30>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3b03      	subs	r3, #3
 8001a36:	e000      	b.n	8001a3a <NVIC_EncodePriority+0x32>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	43d9      	mvns	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	4313      	orrs	r3, r2
         );
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3724      	adds	r7, #36	@ 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a7c:	d301      	bcc.n	8001a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00f      	b.n	8001aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a82:	4a0a      	ldr	r2, [pc, #40]	@ (8001aac <SysTick_Config+0x40>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8a:	210f      	movs	r1, #15
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f7ff ff90 	bl	80019b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <SysTick_Config+0x40>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9a:	4b04      	ldr	r3, [pc, #16]	@ (8001aac <SysTick_Config+0x40>)
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	e000e010 	.word	0xe000e010

08001ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff2d 	bl	8001918 <__NVIC_SetPriorityGrouping>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad8:	f7ff ff42 	bl	8001960 <__NVIC_GetPriorityGrouping>
 8001adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f7ff ff90 	bl	8001a08 <NVIC_EncodePriority>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff5f 	bl	80019b4 <__NVIC_SetPriority>
}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff35 	bl	800197c <__NVIC_EnableIRQ>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffa2 	bl	8001a6c <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001b36:	f000 f802 	bl	8001b3e <HAL_SYSTICK_Callback>
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
	...

08001b4c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e043      	b.n	8001bea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b22      	ldr	r3, [pc, #136]	@ (8001bf4 <HAL_DMA_Init+0xa8>)
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a22      	ldr	r2, [pc, #136]	@ (8001bf8 <HAL_DMA_Init+0xac>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	091b      	lsrs	r3, r3, #4
 8001b74:	009a      	lsls	r2, r3, #2
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001bfc <HAL_DMA_Init+0xb0>)
 8001b7e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b96:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001b9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	bffdfff8 	.word	0xbffdfff8
 8001bf8:	cccccccd 	.word	0xcccccccd
 8001bfc:	40020000 	.word	0x40020000

08001c00 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <HAL_DMA_Start+0x20>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e02e      	b.n	8001c7e <HAL_DMA_Start+0x7e>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d11d      	bne.n	8001c70 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	639a      	str	r2, [r3, #56]	@ 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0201 	bic.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	68b9      	ldr	r1, [r7, #8]
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 fbbf 	bl	80023dc <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	e005      	b.n	8001c7c <HAL_DMA_Start+0x7c>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d101      	bne.n	8001ca6 <HAL_DMA_Start_IT+0x20>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e04b      	b.n	8001d3e <HAL_DMA_Start_IT+0xb8>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d13a      	bne.n	8001d30 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0201 	bic.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 fb7c 	bl	80023dc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d008      	beq.n	8001cfe <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 020e 	orr.w	r2, r2, #14
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	e00f      	b.n	8001d1e <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0204 	bic.w	r2, r2, #4
 8001d0c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 020a 	orr.w	r2, r2, #10
 8001d1c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0201 	orr.w	r2, r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e005      	b.n	8001d3c <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b085      	sub	sp, #20
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d008      	beq.n	8001d70 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2204      	movs	r2, #4
 8001d62:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e020      	b.n	8001db2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 020e 	bic.w	r2, r2, #14
 8001d7e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d98:	2101      	movs	r1, #1
 8001d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d005      	beq.n	8001de0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	e051      	b.n	8001e84 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 020e 	bic.w	r2, r2, #14
 8001dee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0201 	bic.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a22      	ldr	r2, [pc, #136]	@ (8001e90 <HAL_DMA_Abort_IT+0xd4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d029      	beq.n	8001e5e <HAL_DMA_Abort_IT+0xa2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a21      	ldr	r2, [pc, #132]	@ (8001e94 <HAL_DMA_Abort_IT+0xd8>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d022      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x9e>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1f      	ldr	r2, [pc, #124]	@ (8001e98 <HAL_DMA_Abort_IT+0xdc>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d01a      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x98>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1e      	ldr	r2, [pc, #120]	@ (8001e9c <HAL_DMA_Abort_IT+0xe0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d012      	beq.n	8001e4e <HAL_DMA_Abort_IT+0x92>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea0 <HAL_DMA_Abort_IT+0xe4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00a      	beq.n	8001e48 <HAL_DMA_Abort_IT+0x8c>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea4 <HAL_DMA_Abort_IT+0xe8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d102      	bne.n	8001e42 <HAL_DMA_Abort_IT+0x86>
 8001e3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e40:	e00e      	b.n	8001e60 <HAL_DMA_Abort_IT+0xa4>
 8001e42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e46:	e00b      	b.n	8001e60 <HAL_DMA_Abort_IT+0xa4>
 8001e48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e4c:	e008      	b.n	8001e60 <HAL_DMA_Abort_IT+0xa4>
 8001e4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e52:	e005      	b.n	8001e60 <HAL_DMA_Abort_IT+0xa4>
 8001e54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e58:	e002      	b.n	8001e60 <HAL_DMA_Abort_IT+0xa4>
 8001e5a:	2310      	movs	r3, #16
 8001e5c:	e000      	b.n	8001e60 <HAL_DMA_Abort_IT+0xa4>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	4a11      	ldr	r2, [pc, #68]	@ (8001ea8 <HAL_DMA_Abort_IT+0xec>)
 8001e62:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	4798      	blx	r3
    } 
  }
  return status;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40020008 	.word	0x40020008
 8001e94:	4002001c 	.word	0x4002001c
 8001e98:	40020030 	.word	0x40020030
 8001e9c:	40020044 	.word	0x40020044
 8001ea0:	40020058 	.word	0x40020058
 8001ea4:	4002006c 	.word	0x4002006c
 8001ea8:	40020000 	.word	0x40020000

08001eac <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the DMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  uint32_t temp;
  uint32_t tickstart = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d008      	beq.n	8001eda <HAL_DMA_PollForTransfer+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2204      	movs	r2, #4
 8001ecc:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2020 	strb.w	r2, [r3, #32]
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e167      	b.n	80021aa <HAL_DMA_PollForTransfer+0x2fe>
  }

  /* Polling mode not supported in circular mode */
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_DMA_PollForTransfer+0x48>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e15a      	b.n	80021aa <HAL_DMA_PollForTransfer+0x2fe>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d131      	bne.n	8001f5e <HAL_DMA_PollForTransfer+0xb2>
  {
    /* Transfer Complete flag */
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a88      	ldr	r2, [pc, #544]	@ (8002120 <HAL_DMA_PollForTransfer+0x274>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d029      	beq.n	8001f58 <HAL_DMA_PollForTransfer+0xac>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a86      	ldr	r2, [pc, #536]	@ (8002124 <HAL_DMA_PollForTransfer+0x278>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d022      	beq.n	8001f54 <HAL_DMA_PollForTransfer+0xa8>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a85      	ldr	r2, [pc, #532]	@ (8002128 <HAL_DMA_PollForTransfer+0x27c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d01a      	beq.n	8001f4e <HAL_DMA_PollForTransfer+0xa2>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a83      	ldr	r2, [pc, #524]	@ (800212c <HAL_DMA_PollForTransfer+0x280>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d012      	beq.n	8001f48 <HAL_DMA_PollForTransfer+0x9c>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a82      	ldr	r2, [pc, #520]	@ (8002130 <HAL_DMA_PollForTransfer+0x284>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d00a      	beq.n	8001f42 <HAL_DMA_PollForTransfer+0x96>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a80      	ldr	r2, [pc, #512]	@ (8002134 <HAL_DMA_PollForTransfer+0x288>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d102      	bne.n	8001f3c <HAL_DMA_PollForTransfer+0x90>
 8001f36:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f3a:	e00e      	b.n	8001f5a <HAL_DMA_PollForTransfer+0xae>
 8001f3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f40:	e00b      	b.n	8001f5a <HAL_DMA_PollForTransfer+0xae>
 8001f42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f46:	e008      	b.n	8001f5a <HAL_DMA_PollForTransfer+0xae>
 8001f48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f4c:	e005      	b.n	8001f5a <HAL_DMA_PollForTransfer+0xae>
 8001f4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f52:	e002      	b.n	8001f5a <HAL_DMA_PollForTransfer+0xae>
 8001f54:	2320      	movs	r3, #32
 8001f56:	e000      	b.n	8001f5a <HAL_DMA_PollForTransfer+0xae>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	e030      	b.n	8001fc0 <HAL_DMA_PollForTransfer+0x114>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a6f      	ldr	r2, [pc, #444]	@ (8002120 <HAL_DMA_PollForTransfer+0x274>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d029      	beq.n	8001fbc <HAL_DMA_PollForTransfer+0x110>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a6d      	ldr	r2, [pc, #436]	@ (8002124 <HAL_DMA_PollForTransfer+0x278>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d022      	beq.n	8001fb8 <HAL_DMA_PollForTransfer+0x10c>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a6c      	ldr	r2, [pc, #432]	@ (8002128 <HAL_DMA_PollForTransfer+0x27c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d01a      	beq.n	8001fb2 <HAL_DMA_PollForTransfer+0x106>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a6a      	ldr	r2, [pc, #424]	@ (800212c <HAL_DMA_PollForTransfer+0x280>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d012      	beq.n	8001fac <HAL_DMA_PollForTransfer+0x100>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a69      	ldr	r2, [pc, #420]	@ (8002130 <HAL_DMA_PollForTransfer+0x284>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00a      	beq.n	8001fa6 <HAL_DMA_PollForTransfer+0xfa>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a67      	ldr	r2, [pc, #412]	@ (8002134 <HAL_DMA_PollForTransfer+0x288>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d102      	bne.n	8001fa0 <HAL_DMA_PollForTransfer+0xf4>
 8001f9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f9e:	e00e      	b.n	8001fbe <HAL_DMA_PollForTransfer+0x112>
 8001fa0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001fa4:	e00b      	b.n	8001fbe <HAL_DMA_PollForTransfer+0x112>
 8001fa6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001faa:	e008      	b.n	8001fbe <HAL_DMA_PollForTransfer+0x112>
 8001fac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001fb0:	e005      	b.n	8001fbe <HAL_DMA_PollForTransfer+0x112>
 8001fb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fb6:	e002      	b.n	8001fbe <HAL_DMA_PollForTransfer+0x112>
 8001fb8:	2340      	movs	r3, #64	@ 0x40
 8001fba:	e000      	b.n	8001fbe <HAL_DMA_PollForTransfer+0x112>
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fc0:	f7ff fc7c 	bl	80018bc <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8001fc6:	e06b      	b.n	80020a0 <HAL_DMA_PollForTransfer+0x1f4>
  {
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 8001fc8:	4b5b      	ldr	r3, [pc, #364]	@ (8002138 <HAL_DMA_PollForTransfer+0x28c>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4953      	ldr	r1, [pc, #332]	@ (8002120 <HAL_DMA_PollForTransfer+0x274>)
 8001fd2:	428b      	cmp	r3, r1
 8001fd4:	d029      	beq.n	800202a <HAL_DMA_PollForTransfer+0x17e>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4952      	ldr	r1, [pc, #328]	@ (8002124 <HAL_DMA_PollForTransfer+0x278>)
 8001fdc:	428b      	cmp	r3, r1
 8001fde:	d022      	beq.n	8002026 <HAL_DMA_PollForTransfer+0x17a>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4950      	ldr	r1, [pc, #320]	@ (8002128 <HAL_DMA_PollForTransfer+0x27c>)
 8001fe6:	428b      	cmp	r3, r1
 8001fe8:	d01a      	beq.n	8002020 <HAL_DMA_PollForTransfer+0x174>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	494f      	ldr	r1, [pc, #316]	@ (800212c <HAL_DMA_PollForTransfer+0x280>)
 8001ff0:	428b      	cmp	r3, r1
 8001ff2:	d012      	beq.n	800201a <HAL_DMA_PollForTransfer+0x16e>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	494d      	ldr	r1, [pc, #308]	@ (8002130 <HAL_DMA_PollForTransfer+0x284>)
 8001ffa:	428b      	cmp	r3, r1
 8001ffc:	d00a      	beq.n	8002014 <HAL_DMA_PollForTransfer+0x168>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	494c      	ldr	r1, [pc, #304]	@ (8002134 <HAL_DMA_PollForTransfer+0x288>)
 8002004:	428b      	cmp	r3, r1
 8002006:	d102      	bne.n	800200e <HAL_DMA_PollForTransfer+0x162>
 8002008:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800200c:	e00e      	b.n	800202c <HAL_DMA_PollForTransfer+0x180>
 800200e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002012:	e00b      	b.n	800202c <HAL_DMA_PollForTransfer+0x180>
 8002014:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002018:	e008      	b.n	800202c <HAL_DMA_PollForTransfer+0x180>
 800201a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800201e:	e005      	b.n	800202c <HAL_DMA_PollForTransfer+0x180>
 8002020:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002024:	e002      	b.n	800202c <HAL_DMA_PollForTransfer+0x180>
 8002026:	2380      	movs	r3, #128	@ 0x80
 8002028:	e000      	b.n	800202c <HAL_DMA_PollForTransfer+0x180>
 800202a:	2308      	movs	r3, #8
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d017      	beq.n	8002062 <HAL_DMA_PollForTransfer+0x1b6>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f202 	lsl.w	r2, r1, r2
 8002040:	605a      	str	r2, [r3, #4]

      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002046:	f043 0201 	orr.w	r2, r3, #1
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e0a3      	b.n	80021aa <HAL_DMA_PollForTransfer+0x2fe>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002068:	d01a      	beq.n	80020a0 <HAL_DMA_PollForTransfer+0x1f4>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_DMA_PollForTransfer+0x1d4>
 8002070:	f7ff fc24 	bl	80018bc <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	d20f      	bcs.n	80020a0 <HAL_DMA_PollForTransfer+0x1f4>
      {
        /* Update error code */
        SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002084:	f043 0220 	orr.w	r2, r3, #32
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e084      	b.n	80021aa <HAL_DMA_PollForTransfer+0x2fe>
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 80020a0:	4b25      	ldr	r3, [pc, #148]	@ (8002138 <HAL_DMA_PollForTransfer+0x28c>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d08d      	beq.n	8001fc8 <HAL_DMA_PollForTransfer+0x11c>
      }
    }
  }

  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d144      	bne.n	800213c <HAL_DMA_PollForTransfer+0x290>
  {
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002120 <HAL_DMA_PollForTransfer+0x274>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d029      	beq.n	8002110 <HAL_DMA_PollForTransfer+0x264>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a18      	ldr	r2, [pc, #96]	@ (8002124 <HAL_DMA_PollForTransfer+0x278>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d022      	beq.n	800210c <HAL_DMA_PollForTransfer+0x260>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a17      	ldr	r2, [pc, #92]	@ (8002128 <HAL_DMA_PollForTransfer+0x27c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d01a      	beq.n	8002106 <HAL_DMA_PollForTransfer+0x25a>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a15      	ldr	r2, [pc, #84]	@ (800212c <HAL_DMA_PollForTransfer+0x280>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d012      	beq.n	8002100 <HAL_DMA_PollForTransfer+0x254>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a14      	ldr	r2, [pc, #80]	@ (8002130 <HAL_DMA_PollForTransfer+0x284>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d00a      	beq.n	80020fa <HAL_DMA_PollForTransfer+0x24e>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a12      	ldr	r2, [pc, #72]	@ (8002134 <HAL_DMA_PollForTransfer+0x288>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d102      	bne.n	80020f4 <HAL_DMA_PollForTransfer+0x248>
 80020ee:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80020f2:	e00e      	b.n	8002112 <HAL_DMA_PollForTransfer+0x266>
 80020f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020f8:	e00b      	b.n	8002112 <HAL_DMA_PollForTransfer+0x266>
 80020fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020fe:	e008      	b.n	8002112 <HAL_DMA_PollForTransfer+0x266>
 8002100:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002104:	e005      	b.n	8002112 <HAL_DMA_PollForTransfer+0x266>
 8002106:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800210a:	e002      	b.n	8002112 <HAL_DMA_PollForTransfer+0x266>
 800210c:	2320      	movs	r3, #32
 800210e:	e000      	b.n	8002112 <HAL_DMA_PollForTransfer+0x266>
 8002110:	2302      	movs	r3, #2
 8002112:	4a09      	ldr	r2, [pc, #36]	@ (8002138 <HAL_DMA_PollForTransfer+0x28c>)
 8002114:	6053      	str	r3, [r2, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800211e:	e03f      	b.n	80021a0 <HAL_DMA_PollForTransfer+0x2f4>
 8002120:	40020008 	.word	0x40020008
 8002124:	4002001c 	.word	0x4002001c
 8002128:	40020030 	.word	0x40020030
 800212c:	40020044 	.word	0x40020044
 8002130:	40020058 	.word	0x40020058
 8002134:	4002006c 	.word	0x4002006c
 8002138:	40020000 	.word	0x40020000
  }
  else
  {
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1c      	ldr	r2, [pc, #112]	@ (80021b4 <HAL_DMA_PollForTransfer+0x308>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d029      	beq.n	800219a <HAL_DMA_PollForTransfer+0x2ee>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1b      	ldr	r2, [pc, #108]	@ (80021b8 <HAL_DMA_PollForTransfer+0x30c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d022      	beq.n	8002196 <HAL_DMA_PollForTransfer+0x2ea>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a19      	ldr	r2, [pc, #100]	@ (80021bc <HAL_DMA_PollForTransfer+0x310>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d01a      	beq.n	8002190 <HAL_DMA_PollForTransfer+0x2e4>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a18      	ldr	r2, [pc, #96]	@ (80021c0 <HAL_DMA_PollForTransfer+0x314>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d012      	beq.n	800218a <HAL_DMA_PollForTransfer+0x2de>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a16      	ldr	r2, [pc, #88]	@ (80021c4 <HAL_DMA_PollForTransfer+0x318>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00a      	beq.n	8002184 <HAL_DMA_PollForTransfer+0x2d8>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a15      	ldr	r2, [pc, #84]	@ (80021c8 <HAL_DMA_PollForTransfer+0x31c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d102      	bne.n	800217e <HAL_DMA_PollForTransfer+0x2d2>
 8002178:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800217c:	e00e      	b.n	800219c <HAL_DMA_PollForTransfer+0x2f0>
 800217e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002182:	e00b      	b.n	800219c <HAL_DMA_PollForTransfer+0x2f0>
 8002184:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002188:	e008      	b.n	800219c <HAL_DMA_PollForTransfer+0x2f0>
 800218a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800218e:	e005      	b.n	800219c <HAL_DMA_PollForTransfer+0x2f0>
 8002190:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002194:	e002      	b.n	800219c <HAL_DMA_PollForTransfer+0x2f0>
 8002196:	2340      	movs	r3, #64	@ 0x40
 8002198:	e000      	b.n	800219c <HAL_DMA_PollForTransfer+0x2f0>
 800219a:	2304      	movs	r3, #4
 800219c:	4a0b      	ldr	r2, [pc, #44]	@ (80021cc <HAL_DMA_PollForTransfer+0x320>)
 800219e:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40020008 	.word	0x40020008
 80021b8:	4002001c 	.word	0x4002001c
 80021bc:	40020030 	.word	0x40020030
 80021c0:	40020044 	.word	0x40020044
 80021c4:	40020058 	.word	0x40020058
 80021c8:	4002006c 	.word	0x4002006c
 80021cc:	40020000 	.word	0x40020000

080021d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ec:	2204      	movs	r2, #4
 80021ee:	409a      	lsls	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d04f      	beq.n	8002298 <HAL_DMA_IRQHandler+0xc8>
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d04a      	beq.n	8002298 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b00      	cmp	r3, #0
 800220e:	d107      	bne.n	8002220 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0204 	bic.w	r2, r2, #4
 800221e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a66      	ldr	r2, [pc, #408]	@ (80023c0 <HAL_DMA_IRQHandler+0x1f0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d029      	beq.n	800227e <HAL_DMA_IRQHandler+0xae>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a65      	ldr	r2, [pc, #404]	@ (80023c4 <HAL_DMA_IRQHandler+0x1f4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d022      	beq.n	800227a <HAL_DMA_IRQHandler+0xaa>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a63      	ldr	r2, [pc, #396]	@ (80023c8 <HAL_DMA_IRQHandler+0x1f8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01a      	beq.n	8002274 <HAL_DMA_IRQHandler+0xa4>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a62      	ldr	r2, [pc, #392]	@ (80023cc <HAL_DMA_IRQHandler+0x1fc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d012      	beq.n	800226e <HAL_DMA_IRQHandler+0x9e>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a60      	ldr	r2, [pc, #384]	@ (80023d0 <HAL_DMA_IRQHandler+0x200>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00a      	beq.n	8002268 <HAL_DMA_IRQHandler+0x98>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a5f      	ldr	r2, [pc, #380]	@ (80023d4 <HAL_DMA_IRQHandler+0x204>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d102      	bne.n	8002262 <HAL_DMA_IRQHandler+0x92>
 800225c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002260:	e00e      	b.n	8002280 <HAL_DMA_IRQHandler+0xb0>
 8002262:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002266:	e00b      	b.n	8002280 <HAL_DMA_IRQHandler+0xb0>
 8002268:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800226c:	e008      	b.n	8002280 <HAL_DMA_IRQHandler+0xb0>
 800226e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002272:	e005      	b.n	8002280 <HAL_DMA_IRQHandler+0xb0>
 8002274:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002278:	e002      	b.n	8002280 <HAL_DMA_IRQHandler+0xb0>
 800227a:	2340      	movs	r3, #64	@ 0x40
 800227c:	e000      	b.n	8002280 <HAL_DMA_IRQHandler+0xb0>
 800227e:	2304      	movs	r3, #4
 8002280:	4a55      	ldr	r2, [pc, #340]	@ (80023d8 <HAL_DMA_IRQHandler+0x208>)
 8002282:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8094 	beq.w	80023b6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002296:	e08e      	b.n	80023b6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229c:	2202      	movs	r2, #2
 800229e:	409a      	lsls	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d056      	beq.n	8002356 <HAL_DMA_IRQHandler+0x186>
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d051      	beq.n	8002356 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0320 	and.w	r3, r3, #32
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10b      	bne.n	80022d8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 020a 	bic.w	r2, r2, #10
 80022ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a38      	ldr	r2, [pc, #224]	@ (80023c0 <HAL_DMA_IRQHandler+0x1f0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d029      	beq.n	8002336 <HAL_DMA_IRQHandler+0x166>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a37      	ldr	r2, [pc, #220]	@ (80023c4 <HAL_DMA_IRQHandler+0x1f4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d022      	beq.n	8002332 <HAL_DMA_IRQHandler+0x162>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a35      	ldr	r2, [pc, #212]	@ (80023c8 <HAL_DMA_IRQHandler+0x1f8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d01a      	beq.n	800232c <HAL_DMA_IRQHandler+0x15c>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a34      	ldr	r2, [pc, #208]	@ (80023cc <HAL_DMA_IRQHandler+0x1fc>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d012      	beq.n	8002326 <HAL_DMA_IRQHandler+0x156>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a32      	ldr	r2, [pc, #200]	@ (80023d0 <HAL_DMA_IRQHandler+0x200>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00a      	beq.n	8002320 <HAL_DMA_IRQHandler+0x150>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a31      	ldr	r2, [pc, #196]	@ (80023d4 <HAL_DMA_IRQHandler+0x204>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d102      	bne.n	800231a <HAL_DMA_IRQHandler+0x14a>
 8002314:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002318:	e00e      	b.n	8002338 <HAL_DMA_IRQHandler+0x168>
 800231a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800231e:	e00b      	b.n	8002338 <HAL_DMA_IRQHandler+0x168>
 8002320:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002324:	e008      	b.n	8002338 <HAL_DMA_IRQHandler+0x168>
 8002326:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800232a:	e005      	b.n	8002338 <HAL_DMA_IRQHandler+0x168>
 800232c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002330:	e002      	b.n	8002338 <HAL_DMA_IRQHandler+0x168>
 8002332:	2320      	movs	r3, #32
 8002334:	e000      	b.n	8002338 <HAL_DMA_IRQHandler+0x168>
 8002336:	2302      	movs	r3, #2
 8002338:	4a27      	ldr	r2, [pc, #156]	@ (80023d8 <HAL_DMA_IRQHandler+0x208>)
 800233a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002348:	2b00      	cmp	r3, #0
 800234a:	d034      	beq.n	80023b6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002354:	e02f      	b.n	80023b6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	2208      	movs	r2, #8
 800235c:	409a      	lsls	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d028      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x1e8>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d023      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 020e 	bic.w	r2, r2, #14
 800237e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002388:	2101      	movs	r1, #1
 800238a:	fa01 f202 	lsl.w	r2, r1, r2
 800238e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d004      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4798      	blx	r3
    }
  }
  return;
 80023b6:	bf00      	nop
 80023b8:	bf00      	nop
}
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40020008 	.word	0x40020008
 80023c4:	4002001c 	.word	0x4002001c
 80023c8:	40020030 	.word	0x40020030
 80023cc:	40020044 	.word	0x40020044
 80023d0:	40020058 	.word	0x40020058
 80023d4:	4002006c 	.word	0x4002006c
 80023d8:	40020000 	.word	0x40020000

080023dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f2:	2101      	movs	r1, #1
 80023f4:	fa01 f202 	lsl.w	r2, r1, r2
 80023f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b10      	cmp	r3, #16
 8002408:	d108      	bne.n	800241c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800241a:	e007      	b.n	800242c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	60da      	str	r2, [r3, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
	...

08002438 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002438:	b480      	push	{r7}
 800243a:	b08b      	sub	sp, #44	@ 0x2c
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800244a:	e169      	b.n	8002720 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800244c:	2201      	movs	r2, #1
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	429a      	cmp	r2, r3
 8002466:	f040 8158 	bne.w	800271a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4a9a      	ldr	r2, [pc, #616]	@ (80026d8 <HAL_GPIO_Init+0x2a0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d05e      	beq.n	8002532 <HAL_GPIO_Init+0xfa>
 8002474:	4a98      	ldr	r2, [pc, #608]	@ (80026d8 <HAL_GPIO_Init+0x2a0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d875      	bhi.n	8002566 <HAL_GPIO_Init+0x12e>
 800247a:	4a98      	ldr	r2, [pc, #608]	@ (80026dc <HAL_GPIO_Init+0x2a4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d058      	beq.n	8002532 <HAL_GPIO_Init+0xfa>
 8002480:	4a96      	ldr	r2, [pc, #600]	@ (80026dc <HAL_GPIO_Init+0x2a4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d86f      	bhi.n	8002566 <HAL_GPIO_Init+0x12e>
 8002486:	4a96      	ldr	r2, [pc, #600]	@ (80026e0 <HAL_GPIO_Init+0x2a8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d052      	beq.n	8002532 <HAL_GPIO_Init+0xfa>
 800248c:	4a94      	ldr	r2, [pc, #592]	@ (80026e0 <HAL_GPIO_Init+0x2a8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d869      	bhi.n	8002566 <HAL_GPIO_Init+0x12e>
 8002492:	4a94      	ldr	r2, [pc, #592]	@ (80026e4 <HAL_GPIO_Init+0x2ac>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d04c      	beq.n	8002532 <HAL_GPIO_Init+0xfa>
 8002498:	4a92      	ldr	r2, [pc, #584]	@ (80026e4 <HAL_GPIO_Init+0x2ac>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d863      	bhi.n	8002566 <HAL_GPIO_Init+0x12e>
 800249e:	4a92      	ldr	r2, [pc, #584]	@ (80026e8 <HAL_GPIO_Init+0x2b0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d046      	beq.n	8002532 <HAL_GPIO_Init+0xfa>
 80024a4:	4a90      	ldr	r2, [pc, #576]	@ (80026e8 <HAL_GPIO_Init+0x2b0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d85d      	bhi.n	8002566 <HAL_GPIO_Init+0x12e>
 80024aa:	2b12      	cmp	r3, #18
 80024ac:	d82a      	bhi.n	8002504 <HAL_GPIO_Init+0xcc>
 80024ae:	2b12      	cmp	r3, #18
 80024b0:	d859      	bhi.n	8002566 <HAL_GPIO_Init+0x12e>
 80024b2:	a201      	add	r2, pc, #4	@ (adr r2, 80024b8 <HAL_GPIO_Init+0x80>)
 80024b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b8:	08002533 	.word	0x08002533
 80024bc:	0800250d 	.word	0x0800250d
 80024c0:	0800251f 	.word	0x0800251f
 80024c4:	08002561 	.word	0x08002561
 80024c8:	08002567 	.word	0x08002567
 80024cc:	08002567 	.word	0x08002567
 80024d0:	08002567 	.word	0x08002567
 80024d4:	08002567 	.word	0x08002567
 80024d8:	08002567 	.word	0x08002567
 80024dc:	08002567 	.word	0x08002567
 80024e0:	08002567 	.word	0x08002567
 80024e4:	08002567 	.word	0x08002567
 80024e8:	08002567 	.word	0x08002567
 80024ec:	08002567 	.word	0x08002567
 80024f0:	08002567 	.word	0x08002567
 80024f4:	08002567 	.word	0x08002567
 80024f8:	08002567 	.word	0x08002567
 80024fc:	08002515 	.word	0x08002515
 8002500:	08002529 	.word	0x08002529
 8002504:	4a79      	ldr	r2, [pc, #484]	@ (80026ec <HAL_GPIO_Init+0x2b4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d013      	beq.n	8002532 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800250a:	e02c      	b.n	8002566 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	623b      	str	r3, [r7, #32]
          break;
 8002512:	e029      	b.n	8002568 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	3304      	adds	r3, #4
 800251a:	623b      	str	r3, [r7, #32]
          break;
 800251c:	e024      	b.n	8002568 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	3308      	adds	r3, #8
 8002524:	623b      	str	r3, [r7, #32]
          break;
 8002526:	e01f      	b.n	8002568 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	330c      	adds	r3, #12
 800252e:	623b      	str	r3, [r7, #32]
          break;
 8002530:	e01a      	b.n	8002568 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d102      	bne.n	8002540 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800253a:	2304      	movs	r3, #4
 800253c:	623b      	str	r3, [r7, #32]
          break;
 800253e:	e013      	b.n	8002568 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d105      	bne.n	8002554 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002548:	2308      	movs	r3, #8
 800254a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	611a      	str	r2, [r3, #16]
          break;
 8002552:	e009      	b.n	8002568 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002554:	2308      	movs	r3, #8
 8002556:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	615a      	str	r2, [r3, #20]
          break;
 800255e:	e003      	b.n	8002568 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002560:	2300      	movs	r3, #0
 8002562:	623b      	str	r3, [r7, #32]
          break;
 8002564:	e000      	b.n	8002568 <HAL_GPIO_Init+0x130>
          break;
 8002566:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2bff      	cmp	r3, #255	@ 0xff
 800256c:	d801      	bhi.n	8002572 <HAL_GPIO_Init+0x13a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	e001      	b.n	8002576 <HAL_GPIO_Init+0x13e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3304      	adds	r3, #4
 8002576:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2bff      	cmp	r3, #255	@ 0xff
 800257c:	d802      	bhi.n	8002584 <HAL_GPIO_Init+0x14c>
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	e002      	b.n	800258a <HAL_GPIO_Init+0x152>
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	3b08      	subs	r3, #8
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	210f      	movs	r1, #15
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	401a      	ands	r2, r3
 800259c:	6a39      	ldr	r1, [r7, #32]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	431a      	orrs	r2, r3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 80b1 	beq.w	800271a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025b8:	4b4d      	ldr	r3, [pc, #308]	@ (80026f0 <HAL_GPIO_Init+0x2b8>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	4a4c      	ldr	r2, [pc, #304]	@ (80026f0 <HAL_GPIO_Init+0x2b8>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6193      	str	r3, [r2, #24]
 80025c4:	4b4a      	ldr	r3, [pc, #296]	@ (80026f0 <HAL_GPIO_Init+0x2b8>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025d0:	4a48      	ldr	r2, [pc, #288]	@ (80026f4 <HAL_GPIO_Init+0x2bc>)
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	3302      	adds	r3, #2
 80025d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	220f      	movs	r2, #15
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4013      	ands	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a40      	ldr	r2, [pc, #256]	@ (80026f8 <HAL_GPIO_Init+0x2c0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d013      	beq.n	8002624 <HAL_GPIO_Init+0x1ec>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a3f      	ldr	r2, [pc, #252]	@ (80026fc <HAL_GPIO_Init+0x2c4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00d      	beq.n	8002620 <HAL_GPIO_Init+0x1e8>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a3e      	ldr	r2, [pc, #248]	@ (8002700 <HAL_GPIO_Init+0x2c8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <HAL_GPIO_Init+0x1e4>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a3d      	ldr	r2, [pc, #244]	@ (8002704 <HAL_GPIO_Init+0x2cc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d101      	bne.n	8002618 <HAL_GPIO_Init+0x1e0>
 8002614:	2303      	movs	r3, #3
 8002616:	e006      	b.n	8002626 <HAL_GPIO_Init+0x1ee>
 8002618:	2304      	movs	r3, #4
 800261a:	e004      	b.n	8002626 <HAL_GPIO_Init+0x1ee>
 800261c:	2302      	movs	r3, #2
 800261e:	e002      	b.n	8002626 <HAL_GPIO_Init+0x1ee>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_GPIO_Init+0x1ee>
 8002624:	2300      	movs	r3, #0
 8002626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002628:	f002 0203 	and.w	r2, r2, #3
 800262c:	0092      	lsls	r2, r2, #2
 800262e:	4093      	lsls	r3, r2
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002636:	492f      	ldr	r1, [pc, #188]	@ (80026f4 <HAL_GPIO_Init+0x2bc>)
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	089b      	lsrs	r3, r3, #2
 800263c:	3302      	adds	r3, #2
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d006      	beq.n	800265e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002650:	4b2d      	ldr	r3, [pc, #180]	@ (8002708 <HAL_GPIO_Init+0x2d0>)
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	492c      	ldr	r1, [pc, #176]	@ (8002708 <HAL_GPIO_Init+0x2d0>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	608b      	str	r3, [r1, #8]
 800265c:	e006      	b.n	800266c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800265e:	4b2a      	ldr	r3, [pc, #168]	@ (8002708 <HAL_GPIO_Init+0x2d0>)
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	43db      	mvns	r3, r3
 8002666:	4928      	ldr	r1, [pc, #160]	@ (8002708 <HAL_GPIO_Init+0x2d0>)
 8002668:	4013      	ands	r3, r2
 800266a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d006      	beq.n	8002686 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002678:	4b23      	ldr	r3, [pc, #140]	@ (8002708 <HAL_GPIO_Init+0x2d0>)
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	4922      	ldr	r1, [pc, #136]	@ (8002708 <HAL_GPIO_Init+0x2d0>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	60cb      	str	r3, [r1, #12]
 8002684:	e006      	b.n	8002694 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002686:	4b20      	ldr	r3, [pc, #128]	@ (8002708 <HAL_GPIO_Init+0x2d0>)
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	43db      	mvns	r3, r3
 800268e:	491e      	ldr	r1, [pc, #120]	@ (8002708 <HAL_GPIO_Init+0x2d0>)
 8002690:	4013      	ands	r3, r2
 8002692:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d006      	beq.n	80026ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026a0:	4b19      	ldr	r3, [pc, #100]	@ (8002708 <HAL_GPIO_Init+0x2d0>)
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	4918      	ldr	r1, [pc, #96]	@ (8002708 <HAL_GPIO_Init+0x2d0>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026ae:	4b16      	ldr	r3, [pc, #88]	@ (8002708 <HAL_GPIO_Init+0x2d0>)
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	4914      	ldr	r1, [pc, #80]	@ (8002708 <HAL_GPIO_Init+0x2d0>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d021      	beq.n	800270c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002708 <HAL_GPIO_Init+0x2d0>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	490e      	ldr	r1, [pc, #56]	@ (8002708 <HAL_GPIO_Init+0x2d0>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]
 80026d4:	e021      	b.n	800271a <HAL_GPIO_Init+0x2e2>
 80026d6:	bf00      	nop
 80026d8:	10320000 	.word	0x10320000
 80026dc:	10310000 	.word	0x10310000
 80026e0:	10220000 	.word	0x10220000
 80026e4:	10210000 	.word	0x10210000
 80026e8:	10120000 	.word	0x10120000
 80026ec:	10110000 	.word	0x10110000
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40010000 	.word	0x40010000
 80026f8:	40010800 	.word	0x40010800
 80026fc:	40010c00 	.word	0x40010c00
 8002700:	40011000 	.word	0x40011000
 8002704:	40011400 	.word	0x40011400
 8002708:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800270c:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <HAL_GPIO_Init+0x304>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	43db      	mvns	r3, r3
 8002714:	4909      	ldr	r1, [pc, #36]	@ (800273c <HAL_GPIO_Init+0x304>)
 8002716:	4013      	ands	r3, r2
 8002718:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	3301      	adds	r3, #1
 800271e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002726:	fa22 f303 	lsr.w	r3, r2, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	f47f ae8e 	bne.w	800244c <HAL_GPIO_Init+0x14>
  }
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	372c      	adds	r7, #44	@ 0x2c
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	40010400 	.word	0x40010400

08002740 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e0e8      	b.n	8002924 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f007 fdae 	bl	800a2c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2203      	movs	r2, #3
 8002770:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f003 fc49 	bl	8006016 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3304      	adds	r3, #4
 800278c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800278e:	f003 fc1f 	bl	8005fd0 <USB_CoreInit>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0bf      	b.n	8002924 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f003 fc4d 	bl	800604a <USB_SetCurrentMode>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e0b0      	b.n	8002924 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	73fb      	strb	r3, [r7, #15]
 80027c6:	e03e      	b.n	8002846 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	440b      	add	r3, r1
 80027d6:	3311      	adds	r3, #17
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	3310      	adds	r3, #16
 80027ec:	7bfa      	ldrb	r2, [r7, #15]
 80027ee:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	440b      	add	r3, r1
 80027fe:	3313      	adds	r3, #19
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	3320      	adds	r3, #32
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002818:	7bfa      	ldrb	r2, [r7, #15]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	440b      	add	r3, r1
 8002826:	3324      	adds	r3, #36	@ 0x24
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	440b      	add	r3, r1
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	3301      	adds	r3, #1
 8002844:	73fb      	strb	r3, [r7, #15]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	791b      	ldrb	r3, [r3, #4]
 800284a:	7bfa      	ldrb	r2, [r7, #15]
 800284c:	429a      	cmp	r2, r3
 800284e:	d3bb      	bcc.n	80027c8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	e044      	b.n	80028e0 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	440b      	add	r3, r1
 8002864:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800286c:	7bfa      	ldrb	r2, [r7, #15]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	440b      	add	r3, r1
 800287a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800287e:	7bfa      	ldrb	r2, [r7, #15]
 8002880:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002882:	7bfa      	ldrb	r2, [r7, #15]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	440b      	add	r3, r1
 8002890:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002898:	7bfa      	ldrb	r2, [r7, #15]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	440b      	add	r3, r1
 80028a6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	440b      	add	r3, r1
 80028bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028c4:	7bfa      	ldrb	r2, [r7, #15]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	440b      	add	r3, r1
 80028d2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	3301      	adds	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	791b      	ldrb	r3, [r3, #4]
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d3b5      	bcc.n	8002856 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3304      	adds	r3, #4
 80028f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f4:	f003 fbb5 	bl	8006062 <USB_DevInit>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2202      	movs	r2, #2
 8002902:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e00c      	b.n	8002924 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f005 fe34 	bl	800858a <USB_DevDisconnect>

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_PCD_Start+0x16>
 800293e:	2302      	movs	r3, #2
 8002940:	e016      	b.n	8002970 <HAL_PCD_Start+0x44>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f003 fb4b 	bl	8005fea <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002954:	2101      	movs	r1, #1
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f008 f809 	bl	800a96e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f005 fe08 	bl	8008576 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f005 fe0a 	bl	800859e <USB_ReadInterrupts>
 800298a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fb1a 	bl	8002fd0 <PCD_EP_ISR_Handler>

    return;
 800299c:	e119      	b.n	8002bd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029ba:	b292      	uxth	r2, r2
 80029bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f007 fcfc 	bl	800a3be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80029c6:	2100      	movs	r1, #0
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f905 	bl	8002bd8 <HAL_PCD_SetAddress>

    return;
 80029ce:	e100      	b.n	8002bd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00c      	beq.n	80029f4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80029ec:	b292      	uxth	r2, r2
 80029ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80029f2:	e0ee      	b.n	8002bd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00c      	beq.n	8002a18 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a10:	b292      	uxth	r2, r2
 8002a12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002a16:	e0dc      	b.n	8002bd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d027      	beq.n	8002a72 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0204 	bic.w	r2, r2, #4
 8002a34:	b292      	uxth	r2, r2
 8002a36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0208 	bic.w	r2, r2, #8
 8002a4c:	b292      	uxth	r2, r2
 8002a4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f007 fcf0 	bl	800a438 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a6a:	b292      	uxth	r2, r2
 8002a6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002a70:	e0af      	b.n	8002bd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 8083 	beq.w	8002b84 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002a7e:	2300      	movs	r3, #0
 8002a80:	77fb      	strb	r3, [r7, #31]
 8002a82:	e010      	b.n	8002aa6 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	7ffb      	ldrb	r3, [r7, #31]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	441a      	add	r2, r3
 8002a90:	7ffb      	ldrb	r3, [r7, #31]
 8002a92:	8812      	ldrh	r2, [r2, #0]
 8002a94:	b292      	uxth	r2, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	3320      	adds	r3, #32
 8002a9a:	443b      	add	r3, r7
 8002a9c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002aa0:	7ffb      	ldrb	r3, [r7, #31]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	77fb      	strb	r3, [r7, #31]
 8002aa6:	7ffb      	ldrb	r3, [r7, #31]
 8002aa8:	2b07      	cmp	r3, #7
 8002aaa:	d9eb      	bls.n	8002a84 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	b292      	uxth	r2, r2
 8002ac0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0201 	bic.w	r2, r2, #1
 8002ad6:	b292      	uxth	r2, r2
 8002ad8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002adc:	bf00      	nop
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f6      	beq.n	8002ade <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b02:	b292      	uxth	r2, r2
 8002b04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002b08:	2300      	movs	r3, #0
 8002b0a:	77fb      	strb	r3, [r7, #31]
 8002b0c:	e00f      	b.n	8002b2e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	4611      	mov	r1, r2
 8002b16:	7ffa      	ldrb	r2, [r7, #31]
 8002b18:	0092      	lsls	r2, r2, #2
 8002b1a:	440a      	add	r2, r1
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	3320      	adds	r3, #32
 8002b20:	443b      	add	r3, r7
 8002b22:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002b26:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002b28:	7ffb      	ldrb	r3, [r7, #31]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	77fb      	strb	r3, [r7, #31]
 8002b2e:	7ffb      	ldrb	r3, [r7, #31]
 8002b30:	2b07      	cmp	r3, #7
 8002b32:	d9ec      	bls.n	8002b0e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0208 	orr.w	r2, r2, #8
 8002b46:	b292      	uxth	r2, r2
 8002b48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b5e:	b292      	uxth	r2, r2
 8002b60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0204 	orr.w	r2, r2, #4
 8002b76:	b292      	uxth	r2, r2
 8002b78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f007 fc41 	bl	800a404 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b82:	e026      	b.n	8002bd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00f      	beq.n	8002bae <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ba0:	b292      	uxth	r2, r2
 8002ba2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f007 fbfb 	bl	800a3a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002bac:	e011      	b.n	8002bd2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00c      	beq.n	8002bd2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bca:	b292      	uxth	r2, r2
 8002bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002bd0:	bf00      	nop
  }
}
 8002bd2:	3720      	adds	r7, #32
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_PCD_SetAddress+0x1a>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e012      	b.n	8002c18 <HAL_PCD_SetAddress+0x40>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f005 fca1 	bl	8008550 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	4608      	mov	r0, r1
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4603      	mov	r3, r0
 8002c30:	70fb      	strb	r3, [r7, #3]
 8002c32:	460b      	mov	r3, r1
 8002c34:	803b      	strh	r3, [r7, #0]
 8002c36:	4613      	mov	r3, r2
 8002c38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	da0e      	bge.n	8002c64 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	f003 0207 	and.w	r2, r3, #7
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	3310      	adds	r3, #16
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	705a      	strb	r2, [r3, #1]
 8002c62:	e00e      	b.n	8002c82 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	f003 0207 	and.w	r2, r3, #7
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c8e:	883a      	ldrh	r2, [r7, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	78ba      	ldrb	r2, [r7, #2]
 8002c98:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c9a:	78bb      	ldrb	r3, [r7, #2]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d102      	bne.n	8002ca6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_PCD_EP_Open+0x94>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e00e      	b.n	8002cd2 <HAL_PCD_EP_Open+0xb2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68f9      	ldr	r1, [r7, #12]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 f9ea 	bl	800609c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002cd0:	7afb      	ldrb	r3, [r7, #11]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	da0e      	bge.n	8002d0c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	f003 0207 	and.w	r2, r3, #7
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	3310      	adds	r3, #16
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	705a      	strb	r2, [r3, #1]
 8002d0a:	e00e      	b.n	8002d2a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	f003 0207 	and.w	r2, r3, #7
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_PCD_EP_Close+0x6a>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e00e      	b.n	8002d62 <HAL_PCD_EP_Close+0x88>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68f9      	ldr	r1, [r7, #12]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f003 fd62 	bl	800681c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b086      	sub	sp, #24
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	460b      	mov	r3, r1
 8002d78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d7a:	7afb      	ldrb	r3, [r7, #11]
 8002d7c:	f003 0207 	and.w	r2, r3, #7
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4413      	add	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2200      	movs	r2, #0
 8002da2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2200      	movs	r2, #0
 8002da8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002daa:	7afb      	ldrb	r3, [r7, #11]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6979      	ldr	r1, [r7, #20]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f003 ff19 	bl	8006bf4 <USB_EPStartXfer>

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	f003 0207 	and.w	r2, r3, #7
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	440b      	add	r3, r1
 8002dea:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b086      	sub	sp, #24
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	460b      	mov	r3, r1
 8002e08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e0a:	7afb      	ldrb	r3, [r7, #11]
 8002e0c:	f003 0207 	and.w	r2, r3, #7
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	3310      	adds	r3, #16
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2201      	movs	r2, #1
 8002e44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e46:	7afb      	ldrb	r3, [r7, #11]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6979      	ldr	r1, [r7, #20]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f003 fecb 	bl	8006bf4 <USB_EPStartXfer>

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	7912      	ldrb	r2, [r2, #4]
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d901      	bls.n	8002e86 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e04c      	b.n	8002f20 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	da0e      	bge.n	8002eac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	f003 0207 	and.w	r2, r3, #7
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	3310      	adds	r3, #16
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	705a      	strb	r2, [r3, #1]
 8002eaa:	e00c      	b.n	8002ec6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002eac:	78fa      	ldrb	r2, [r7, #3]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_PCD_EP_SetStall+0x7e>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e01c      	b.n	8002f20 <HAL_PCD_EP_SetStall+0xb8>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68f9      	ldr	r1, [r7, #12]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f005 fa2e 	bl	8008356 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d108      	bne.n	8002f16 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4610      	mov	r0, r2
 8002f12:	f005 fb53 	bl	80085bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	7912      	ldrb	r2, [r2, #4]
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e040      	b.n	8002fc8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	da0e      	bge.n	8002f6c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	f003 0207 	and.w	r2, r3, #7
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	3310      	adds	r3, #16
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	4413      	add	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	705a      	strb	r2, [r3, #1]
 8002f6a:	e00e      	b.n	8002f8a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	f003 0207 	and.w	r2, r3, #7
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_PCD_EP_ClrStall+0x82>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e00e      	b.n	8002fc8 <HAL_PCD_EP_ClrStall+0xa0>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68f9      	ldr	r1, [r7, #12]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f005 fa1c 	bl	80083f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b096      	sub	sp, #88	@ 0x58
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002fd8:	e3bb      	b.n	8003752 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fe2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002fe6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002ff4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f040 8175 	bne.w	80032e8 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002ffe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	2b00      	cmp	r3, #0
 8003008:	d14e      	bne.n	80030a8 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b29b      	uxth	r3, r3
 8003012:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800301a:	81fb      	strh	r3, [r7, #14]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	89fb      	ldrh	r3, [r7, #14]
 8003022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800302a:	b29b      	uxth	r3, r3
 800302c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3310      	adds	r3, #16
 8003032:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800303c:	b29b      	uxth	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4413      	add	r3, r2
 8003048:	3302      	adds	r3, #2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800305c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800305e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	441a      	add	r2, r3
 800306a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800306c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800306e:	2100      	movs	r1, #0
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f007 f97c 	bl	800a36e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	7b5b      	ldrb	r3, [r3, #13]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8368 	beq.w	8003752 <PCD_EP_ISR_Handler+0x782>
 8003082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 8363 	bne.w	8003752 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	7b5b      	ldrb	r3, [r3, #13]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003096:	b2da      	uxtb	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	735a      	strb	r2, [r3, #13]
 80030a6:	e354      	b.n	8003752 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030ae:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80030ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80030be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d034      	beq.n	8003130 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	3306      	adds	r3, #6
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80030fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030fe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003102:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003104:	b29b      	uxth	r3, r3
 8003106:	f005 faaa 	bl	800865e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29a      	uxth	r2, r3
 8003112:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003116:	4013      	ands	r3, r2
 8003118:	823b      	strh	r3, [r7, #16]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	8a3a      	ldrh	r2, [r7, #16]
 8003120:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003124:	b292      	uxth	r2, r2
 8003126:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f007 f8f3 	bl	800a314 <HAL_PCD_SetupStageCallback>
 800312e:	e310      	b.n	8003752 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003130:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003134:	2b00      	cmp	r3, #0
 8003136:	f280 830c 	bge.w	8003752 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	b29a      	uxth	r2, r3
 8003142:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003146:	4013      	ands	r3, r2
 8003148:	83fb      	strh	r3, [r7, #30]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	8bfa      	ldrh	r2, [r7, #30]
 8003150:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003154:	b292      	uxth	r2, r2
 8003156:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003160:	b29b      	uxth	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	3306      	adds	r3, #6
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003182:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d019      	beq.n	80031c0 <PCD_EP_ISR_Handler+0x1f0>
 800318c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d015      	beq.n	80031c0 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800319a:	6959      	ldr	r1, [r3, #20]
 800319c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800319e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80031a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	f005 fa5a 	bl	800865e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80031aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	441a      	add	r2, r3
 80031b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80031b8:	2100      	movs	r1, #0
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f007 f8bc 	bl	800a338 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80031ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f040 82bd 	bne.w	8003752 <PCD_EP_ISR_Handler+0x782>
 80031d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031dc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80031e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031e4:	f000 82b5 	beq.w	8003752 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	4413      	add	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	b29b      	uxth	r3, r3
 800320e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003212:	b29a      	uxth	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	801a      	strh	r2, [r3, #0]
 8003218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	2b3e      	cmp	r3, #62	@ 0x3e
 800321e:	d91d      	bls.n	800325c <PCD_EP_ISR_Handler+0x28c>
 8003220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	647b      	str	r3, [r7, #68]	@ 0x44
 8003228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	2b00      	cmp	r3, #0
 8003232:	d102      	bne.n	800323a <PCD_EP_ISR_Handler+0x26a>
 8003234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003236:	3b01      	subs	r3, #1
 8003238:	647b      	str	r3, [r7, #68]	@ 0x44
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	b29a      	uxth	r2, r3
 8003240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003242:	b29b      	uxth	r3, r3
 8003244:	029b      	lsls	r3, r3, #10
 8003246:	b29b      	uxth	r3, r3
 8003248:	4313      	orrs	r3, r2
 800324a:	b29b      	uxth	r3, r3
 800324c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003254:	b29a      	uxth	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	801a      	strh	r2, [r3, #0]
 800325a:	e026      	b.n	80032aa <PCD_EP_ISR_Handler+0x2da>
 800325c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <PCD_EP_ISR_Handler+0x2aa>
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	b29b      	uxth	r3, r3
 800326a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800326e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003272:	b29a      	uxth	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	801a      	strh	r2, [r3, #0]
 8003278:	e017      	b.n	80032aa <PCD_EP_ISR_Handler+0x2da>
 800327a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	085b      	lsrs	r3, r3, #1
 8003280:	647b      	str	r3, [r7, #68]	@ 0x44
 8003282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <PCD_EP_ISR_Handler+0x2c4>
 800328e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003290:	3301      	adds	r3, #1
 8003292:	647b      	str	r3, [r7, #68]	@ 0x44
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	b29a      	uxth	r2, r3
 800329a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800329c:	b29b      	uxth	r3, r3
 800329e:	029b      	lsls	r3, r3, #10
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	4313      	orrs	r3, r2
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ba:	827b      	strh	r3, [r7, #18]
 80032bc:	8a7b      	ldrh	r3, [r7, #18]
 80032be:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80032c2:	827b      	strh	r3, [r7, #18]
 80032c4:	8a7b      	ldrh	r3, [r7, #18]
 80032c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80032ca:	827b      	strh	r3, [r7, #18]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	8a7b      	ldrh	r3, [r7, #18]
 80032d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	8013      	strh	r3, [r2, #0]
 80032e6:	e234      	b.n	8003752 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032fc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003300:	2b00      	cmp	r3, #0
 8003302:	f280 80fc 	bge.w	80034fe <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	b29a      	uxth	r2, r3
 8003318:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800331c:	4013      	ands	r3, r2
 800331e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003334:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003338:	b292      	uxth	r2, r2
 800333a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800333c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	4413      	add	r3, r2
 8003350:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003354:	7b1b      	ldrb	r3, [r3, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d125      	bne.n	80033a6 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003362:	b29b      	uxth	r3, r3
 8003364:	461a      	mov	r2, r3
 8003366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	3306      	adds	r3, #6
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6812      	ldr	r2, [r2, #0]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003382:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003386:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 8092 	beq.w	80034b4 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003396:	6959      	ldr	r1, [r3, #20]
 8003398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800339a:	88da      	ldrh	r2, [r3, #6]
 800339c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80033a0:	f005 f95d 	bl	800865e <USB_ReadPMA>
 80033a4:	e086      	b.n	80034b4 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80033a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a8:	78db      	ldrb	r3, [r3, #3]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d10a      	bne.n	80033c4 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80033ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80033b2:	461a      	mov	r2, r3
 80033b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f9d9 	bl	800376e <HAL_PCD_EP_DB_Receive>
 80033bc:	4603      	mov	r3, r0
 80033be:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80033c2:	e077      	b.n	80034b4 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033de:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	441a      	add	r2, r3
 80033f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80033f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003400:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003404:	b29b      	uxth	r3, r3
 8003406:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d024      	beq.n	800346c <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800342a:	b29b      	uxth	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	3302      	adds	r3, #2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800344a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800344e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003452:	2b00      	cmp	r3, #0
 8003454:	d02e      	beq.n	80034b4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800345c:	6959      	ldr	r1, [r3, #20]
 800345e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003460:	891a      	ldrh	r2, [r3, #8]
 8003462:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003466:	f005 f8fa 	bl	800865e <USB_ReadPMA>
 800346a:	e023      	b.n	80034b4 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003474:	b29b      	uxth	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4413      	add	r3, r2
 8003480:	3306      	adds	r3, #6
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	4413      	add	r3, r2
 800348a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003494:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003498:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800349c:	2b00      	cmp	r3, #0
 800349e:	d009      	beq.n	80034b4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a6:	6959      	ldr	r1, [r3, #20]
 80034a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034aa:	895a      	ldrh	r2, [r3, #10]
 80034ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034b0:	f005 f8d5 	bl	800865e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80034b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034bc:	441a      	add	r2, r3
 80034be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80034c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034ca:	441a      	add	r2, r3
 80034cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ce:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80034d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <PCD_EP_ISR_Handler+0x514>
 80034d8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80034dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d206      	bcs.n	80034f2 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80034e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	4619      	mov	r1, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f006 ff24 	bl	800a338 <HAL_PCD_DataOutStageCallback>
 80034f0:	e005      	b.n	80034fe <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034f8:	4618      	mov	r0, r3
 80034fa:	f003 fb7b 	bl	8006bf4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80034fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 8123 	beq.w	8003752 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800350c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	3310      	adds	r3, #16
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	4413      	add	r3, r2
 800351e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	b29b      	uxth	r3, r3
 8003532:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800353a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	441a      	add	r2, r3
 800354c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003558:	b29b      	uxth	r3, r3
 800355a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800355c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800355e:	78db      	ldrb	r3, [r3, #3]
 8003560:	2b01      	cmp	r3, #1
 8003562:	f040 80a2 	bne.w	80036aa <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003568:	2200      	movs	r2, #0
 800356a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800356c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356e:	7b1b      	ldrb	r3, [r3, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8093 	beq.w	800369c <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003576:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800357a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d046      	beq.n	8003610 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003584:	785b      	ldrb	r3, [r3, #1]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d126      	bne.n	80035d8 <PCD_EP_ISR_Handler+0x608>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003598:	b29b      	uxth	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	4413      	add	r3, r2
 80035a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	011a      	lsls	r2, r3, #4
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	4413      	add	r3, r2
 80035ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80035b0:	623b      	str	r3, [r7, #32]
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035bc:	b29a      	uxth	r2, r3
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	801a      	strh	r2, [r3, #0]
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	801a      	strh	r2, [r3, #0]
 80035d6:	e061      	b.n	800369c <PCD_EP_ISR_Handler+0x6cc>
 80035d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035da:	785b      	ldrb	r3, [r3, #1]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d15d      	bne.n	800369c <PCD_EP_ISR_Handler+0x6cc>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f4:	4413      	add	r3, r2
 80035f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	011a      	lsls	r2, r3, #4
 80035fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003600:	4413      	add	r3, r2
 8003602:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003606:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360a:	2200      	movs	r2, #0
 800360c:	801a      	strh	r2, [r3, #0]
 800360e:	e045      	b.n	800369c <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003618:	785b      	ldrb	r3, [r3, #1]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d126      	bne.n	800366c <PCD_EP_ISR_Handler+0x69c>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	637b      	str	r3, [r7, #52]	@ 0x34
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800362c:	b29b      	uxth	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003632:	4413      	add	r3, r2
 8003634:	637b      	str	r3, [r7, #52]	@ 0x34
 8003636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	011a      	lsls	r2, r3, #4
 800363c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800363e:	4413      	add	r3, r2
 8003640:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003644:	633b      	str	r3, [r7, #48]	@ 0x30
 8003646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003650:	b29a      	uxth	r2, r3
 8003652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003654:	801a      	strh	r2, [r3, #0]
 8003656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	b29b      	uxth	r3, r3
 800365c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003664:	b29a      	uxth	r2, r3
 8003666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003668:	801a      	strh	r2, [r3, #0]
 800366a:	e017      	b.n	800369c <PCD_EP_ISR_Handler+0x6cc>
 800366c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366e:	785b      	ldrb	r3, [r3, #1]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d113      	bne.n	800369c <PCD_EP_ISR_Handler+0x6cc>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800367c:	b29b      	uxth	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003682:	4413      	add	r3, r2
 8003684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	011a      	lsls	r2, r3, #4
 800368c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800368e:	4413      	add	r3, r2
 8003690:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003694:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003698:	2200      	movs	r2, #0
 800369a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800369c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	4619      	mov	r1, r3
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f006 fe63 	bl	800a36e <HAL_PCD_DataInStageCallback>
 80036a8:	e053      	b.n	8003752 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80036aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80036ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d146      	bne.n	8003744 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036be:	b29b      	uxth	r3, r3
 80036c0:	461a      	mov	r2, r3
 80036c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	3302      	adds	r3, #2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036de:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80036e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d907      	bls.n	80036fe <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80036ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80036f6:	1ad2      	subs	r2, r2, r3
 80036f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036fa:	619a      	str	r2, [r3, #24]
 80036fc:	e002      	b.n	8003704 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80036fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003700:	2200      	movs	r2, #0
 8003702:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d106      	bne.n	800371a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800370c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	4619      	mov	r1, r3
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f006 fe2b 	bl	800a36e <HAL_PCD_DataInStageCallback>
 8003718:	e01b      	b.n	8003752 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800371a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003722:	441a      	add	r2, r3
 8003724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003726:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003730:	441a      	add	r2, r3
 8003732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003734:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800373c:	4618      	mov	r0, r3
 800373e:	f003 fa59 	bl	8006bf4 <USB_EPStartXfer>
 8003742:	e006      	b.n	8003752 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003744:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003748:	461a      	mov	r2, r3
 800374a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f91b 	bl	8003988 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800375a:	b29b      	uxth	r3, r3
 800375c:	b21b      	sxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	f6ff ac3b 	blt.w	8002fda <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3758      	adds	r7, #88	@ 0x58
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b088      	sub	sp, #32
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	4613      	mov	r3, r2
 800377a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800377c:	88fb      	ldrh	r3, [r7, #6]
 800377e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d07e      	beq.n	8003884 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800378e:	b29b      	uxth	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	3302      	adds	r3, #2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	699a      	ldr	r2, [r3, #24]
 80037b4:	8b7b      	ldrh	r3, [r7, #26]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d306      	bcc.n	80037c8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	8b7b      	ldrh	r3, [r7, #26]
 80037c0:	1ad2      	subs	r2, r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	619a      	str	r2, [r3, #24]
 80037c6:	e002      	b.n	80037ce <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2200      	movs	r2, #0
 80037cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d123      	bne.n	800381e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037f0:	833b      	strh	r3, [r7, #24]
 80037f2:	8b3b      	ldrh	r3, [r7, #24]
 80037f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80037f8:	833b      	strh	r3, [r7, #24]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	441a      	add	r2, r3
 8003808:	8b3b      	ldrh	r3, [r7, #24]
 800380a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800380e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800381a:	b29b      	uxth	r3, r3
 800381c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01f      	beq.n	8003868 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	461a      	mov	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	b29b      	uxth	r3, r3
 800383a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800383e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003842:	82fb      	strh	r3, [r7, #22]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	441a      	add	r2, r3
 8003852:	8afb      	ldrh	r3, [r7, #22]
 8003854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800385c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003860:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003864:	b29b      	uxth	r3, r3
 8003866:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003868:	8b7b      	ldrh	r3, [r7, #26]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 8087 	beq.w	800397e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	6959      	ldr	r1, [r3, #20]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	891a      	ldrh	r2, [r3, #8]
 800387c:	8b7b      	ldrh	r3, [r7, #26]
 800387e:	f004 feee 	bl	800865e <USB_ReadPMA>
 8003882:	e07c      	b.n	800397e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800388c:	b29b      	uxth	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4413      	add	r3, r2
 8003898:	3306      	adds	r3, #6
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	8b7b      	ldrh	r3, [r7, #26]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d306      	bcc.n	80038c6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	8b7b      	ldrh	r3, [r7, #26]
 80038be:	1ad2      	subs	r2, r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	619a      	str	r2, [r3, #24]
 80038c4:	e002      	b.n	80038cc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2200      	movs	r2, #0
 80038ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d123      	bne.n	800391c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ee:	83fb      	strh	r3, [r7, #30]
 80038f0:	8bfb      	ldrh	r3, [r7, #30]
 80038f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80038f6:	83fb      	strh	r3, [r7, #30]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	441a      	add	r2, r3
 8003906:	8bfb      	ldrh	r3, [r7, #30]
 8003908:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800390c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003910:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003918:	b29b      	uxth	r3, r3
 800391a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d11f      	bne.n	8003966 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800393c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003940:	83bb      	strh	r3, [r7, #28]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	441a      	add	r2, r3
 8003950:	8bbb      	ldrh	r3, [r7, #28]
 8003952:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003956:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800395a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800395e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003962:	b29b      	uxth	r3, r3
 8003964:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003966:	8b7b      	ldrh	r3, [r7, #26]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	6959      	ldr	r1, [r3, #20]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	895a      	ldrh	r2, [r3, #10]
 8003978:	8b7b      	ldrh	r3, [r7, #26]
 800397a:	f004 fe70 	bl	800865e <USB_ReadPMA>
    }
  }

  return count;
 800397e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b0a4      	sub	sp, #144	@ 0x90
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	4613      	mov	r3, r2
 8003994:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 81dd 	beq.w	8003d5c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4413      	add	r3, r2
 80039b6:	3302      	adds	r3, #2
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ca:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d907      	bls.n	80039ea <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039e2:	1ad2      	subs	r2, r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	619a      	str	r2, [r3, #24]
 80039e8:	e002      	b.n	80039f0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2200      	movs	r2, #0
 80039ee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f040 80b9 	bne.w	8003b6c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	785b      	ldrb	r3, [r3, #1]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d126      	bne.n	8003a50 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a16:	4413      	add	r3, r2
 8003a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	011a      	lsls	r2, r3, #4
 8003a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a22:	4413      	add	r3, r2
 8003a24:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a38:	801a      	strh	r2, [r3, #0]
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4c:	801a      	strh	r2, [r3, #0]
 8003a4e:	e01a      	b.n	8003a86 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	785b      	ldrb	r3, [r3, #1]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d116      	bne.n	8003a86 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6c:	4413      	add	r3, r2
 8003a6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	011a      	lsls	r2, r3, #4
 8003a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a78:	4413      	add	r3, r2
 8003a7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a82:	2200      	movs	r2, #0
 8003a84:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	785b      	ldrb	r3, [r3, #1]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d126      	bne.n	8003ae2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	011a      	lsls	r2, r3, #4
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	801a      	strh	r2, [r3, #0]
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	801a      	strh	r2, [r3, #0]
 8003ae0:	e017      	b.n	8003b12 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	785b      	ldrb	r3, [r3, #1]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d113      	bne.n	8003b12 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	461a      	mov	r2, r3
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	4413      	add	r3, r2
 8003afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	011a      	lsls	r2, r3, #4
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	4413      	add	r3, r2
 8003b06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b0a:	623b      	str	r3, [r7, #32]
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	4619      	mov	r1, r3
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f006 fc28 	bl	800a36e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 82fc 	beq.w	8004122 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b44:	82fb      	strh	r3, [r7, #22]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	441a      	add	r2, r3
 8003b54:	8afb      	ldrh	r3, [r7, #22]
 8003b56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	8013      	strh	r3, [r2, #0]
 8003b6a:	e2da      	b.n	8004122 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d021      	beq.n	8003bba <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b90:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	441a      	add	r2, r3
 8003ba2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003ba6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003baa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	f040 82ae 	bne.w	8004122 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003bce:	441a      	add	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003bdc:	441a      	add	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	6a1a      	ldr	r2, [r3, #32]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d30b      	bcc.n	8003c06 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	6a1a      	ldr	r2, [r3, #32]
 8003bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bfe:	1ad2      	subs	r2, r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	621a      	str	r2, [r3, #32]
 8003c04:	e017      	b.n	8003c36 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d108      	bne.n	8003c20 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003c0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003c1e:	e00a      	b.n	8003c36 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2200      	movs	r2, #0
 8003c34:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	785b      	ldrb	r3, [r3, #1]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d165      	bne.n	8003d0a <HAL_PCD_EP_DB_Transmit+0x382>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c52:	4413      	add	r3, r2
 8003c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	011a      	lsls	r2, r3, #4
 8003c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c5e:	4413      	add	r3, r2
 8003c60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c74:	801a      	strh	r2, [r3, #0]
 8003c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c7c:	d91d      	bls.n	8003cba <HAL_PCD_EP_DB_Transmit+0x332>
 8003c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <HAL_PCD_EP_DB_Transmit+0x310>
 8003c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c94:	3b01      	subs	r3, #1
 8003c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	029b      	lsls	r3, r3, #10
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb6:	801a      	strh	r2, [r3, #0]
 8003cb8:	e044      	b.n	8003d44 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <HAL_PCD_EP_DB_Transmit+0x350>
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd4:	801a      	strh	r2, [r3, #0]
 8003cd6:	e035      	b.n	8003d44 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cdc:	085b      	lsrs	r3, r3, #1
 8003cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cee:	3301      	adds	r3, #1
 8003cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	029b      	lsls	r3, r3, #10
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	4313      	orrs	r3, r2
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d06:	801a      	strh	r2, [r3, #0]
 8003d08:	e01c      	b.n	8003d44 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	785b      	ldrb	r3, [r3, #1]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d118      	bne.n	8003d44 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d26:	4413      	add	r3, r2
 8003d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	011a      	lsls	r2, r3, #4
 8003d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d32:	4413      	add	r3, r2
 8003d34:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d42:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	6959      	ldr	r1, [r3, #20]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	891a      	ldrh	r2, [r3, #8]
 8003d50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	f004 fc3c 	bl	80085d2 <USB_WritePMA>
 8003d5a:	e1e2      	b.n	8004122 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4413      	add	r3, r2
 8003d70:	3306      	adds	r3, #6
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d84:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	699a      	ldr	r2, [r3, #24]
 8003d8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d307      	bcc.n	8003da4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	699a      	ldr	r2, [r3, #24]
 8003d98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d9c:	1ad2      	subs	r2, r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	619a      	str	r2, [r3, #24]
 8003da2:	e002      	b.n	8003daa <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2200      	movs	r2, #0
 8003da8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f040 80c0 	bne.w	8003f34 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	785b      	ldrb	r3, [r3, #1]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d126      	bne.n	8003e0a <HAL_PCD_EP_DB_Transmit+0x482>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003dd0:	4413      	add	r3, r2
 8003dd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	011a      	lsls	r2, r3, #4
 8003dda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ddc:	4413      	add	r3, r2
 8003dde:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003de2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003de4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003df2:	801a      	strh	r2, [r3, #0]
 8003df4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e06:	801a      	strh	r2, [r3, #0]
 8003e08:	e01a      	b.n	8003e40 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	785b      	ldrb	r3, [r3, #1]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d116      	bne.n	8003e40 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e26:	4413      	add	r3, r2
 8003e28:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	011a      	lsls	r2, r3, #4
 8003e30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e32:	4413      	add	r3, r2
 8003e34:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e38:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	785b      	ldrb	r3, [r3, #1]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d12b      	bne.n	8003ea6 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e62:	4413      	add	r3, r2
 8003e64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	011a      	lsls	r2, r3, #4
 8003e6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e6e:	4413      	add	r3, r2
 8003e70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e8a:	801a      	strh	r2, [r3, #0]
 8003e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ea2:	801a      	strh	r2, [r3, #0]
 8003ea4:	e017      	b.n	8003ed6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	785b      	ldrb	r3, [r3, #1]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d113      	bne.n	8003ed6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ebc:	4413      	add	r3, r2
 8003ebe:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	011a      	lsls	r2, r3, #4
 8003ec6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ec8:	4413      	add	r3, r2
 8003eca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ece:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ed0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	4619      	mov	r1, r3
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f006 fa46 	bl	800a36e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f040 811a 	bne.w	8004122 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f08:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	441a      	add	r2, r3
 8003f1a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003f1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	8013      	strh	r3, [r2, #0]
 8003f32:	e0f6      	b.n	8004122 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d121      	bne.n	8003f82 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f58:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	441a      	add	r2, r3
 8003f6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003f6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	f040 80ca 	bne.w	8004122 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f96:	441a      	add	r2, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003fa4:	441a      	add	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	6a1a      	ldr	r2, [r3, #32]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d30b      	bcc.n	8003fce <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	6a1a      	ldr	r2, [r3, #32]
 8003fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fc6:	1ad2      	subs	r2, r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	621a      	str	r2, [r3, #32]
 8003fcc:	e017      	b.n	8003ffe <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d108      	bne.n	8003fe8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003fd6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003fda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003fe6:	e00a      	b.n	8003ffe <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	657b      	str	r3, [r7, #84]	@ 0x54
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	785b      	ldrb	r3, [r3, #1]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d165      	bne.n	80040d8 <HAL_PCD_EP_DB_Transmit+0x750>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800401a:	b29b      	uxth	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004020:	4413      	add	r3, r2
 8004022:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	011a      	lsls	r2, r3, #4
 800402a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800402c:	4413      	add	r3, r2
 800402e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004032:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004034:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	b29b      	uxth	r3, r3
 800403a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800403e:	b29a      	uxth	r2, r3
 8004040:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004042:	801a      	strh	r2, [r3, #0]
 8004044:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004048:	2b3e      	cmp	r3, #62	@ 0x3e
 800404a:	d91d      	bls.n	8004088 <HAL_PCD_EP_DB_Transmit+0x700>
 800404c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004054:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	2b00      	cmp	r3, #0
 800405e:	d102      	bne.n	8004066 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004060:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004062:	3b01      	subs	r3, #1
 8004064:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004066:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	b29a      	uxth	r2, r3
 800406c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800406e:	b29b      	uxth	r3, r3
 8004070:	029b      	lsls	r3, r3, #10
 8004072:	b29b      	uxth	r3, r3
 8004074:	4313      	orrs	r3, r2
 8004076:	b29b      	uxth	r3, r3
 8004078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800407c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004080:	b29a      	uxth	r2, r3
 8004082:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004084:	801a      	strh	r2, [r3, #0]
 8004086:	e041      	b.n	800410c <HAL_PCD_EP_DB_Transmit+0x784>
 8004088:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10a      	bne.n	80040a6 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004090:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	b29b      	uxth	r3, r3
 8004096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800409a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800409e:	b29a      	uxth	r2, r3
 80040a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040a2:	801a      	strh	r2, [r3, #0]
 80040a4:	e032      	b.n	800410c <HAL_PCD_EP_DB_Transmit+0x784>
 80040a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040aa:	085b      	lsrs	r3, r3, #1
 80040ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_PCD_EP_DB_Transmit+0x738>
 80040ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040bc:	3301      	adds	r3, #1
 80040be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	029b      	lsls	r3, r3, #10
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	4313      	orrs	r3, r2
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040d4:	801a      	strh	r2, [r3, #0]
 80040d6:	e019      	b.n	800410c <HAL_PCD_EP_DB_Transmit+0x784>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d115      	bne.n	800410c <HAL_PCD_EP_DB_Transmit+0x784>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ee:	4413      	add	r3, r2
 80040f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	011a      	lsls	r2, r3, #4
 80040f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fa:	4413      	add	r3, r2
 80040fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004100:	653b      	str	r3, [r7, #80]	@ 0x50
 8004102:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004106:	b29a      	uxth	r2, r3
 8004108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800410a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	6959      	ldr	r1, [r3, #20]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	895a      	ldrh	r2, [r3, #10]
 8004118:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800411c:	b29b      	uxth	r3, r3
 800411e:	f004 fa58 	bl	80085d2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004138:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800413c:	82bb      	strh	r3, [r7, #20]
 800413e:	8abb      	ldrh	r3, [r7, #20]
 8004140:	f083 0310 	eor.w	r3, r3, #16
 8004144:	82bb      	strh	r3, [r7, #20]
 8004146:	8abb      	ldrh	r3, [r7, #20]
 8004148:	f083 0320 	eor.w	r3, r3, #32
 800414c:	82bb      	strh	r3, [r7, #20]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	441a      	add	r2, r3
 800415c:	8abb      	ldrh	r3, [r7, #20]
 800415e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004162:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004166:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800416a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800416e:	b29b      	uxth	r3, r3
 8004170:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3790      	adds	r7, #144	@ 0x90
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	817b      	strh	r3, [r7, #10]
 800418a:	4613      	mov	r3, r2
 800418c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800418e:	897b      	ldrh	r3, [r7, #10]
 8004190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00b      	beq.n	80041b2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800419a:	897b      	ldrh	r3, [r7, #10]
 800419c:	f003 0207 	and.w	r2, r3, #7
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	3310      	adds	r3, #16
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4413      	add	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	e009      	b.n	80041c6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041b2:	897a      	ldrh	r2, [r7, #10]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80041c6:	893b      	ldrh	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d107      	bne.n	80041dc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2200      	movs	r2, #0
 80041d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	80da      	strh	r2, [r3, #6]
 80041da:	e00b      	b.n	80041f4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2201      	movs	r2, #1
 80041e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	0c1b      	lsrs	r3, r3, #16
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	371c      	adds	r7, #28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr

08004200 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004204:	4b03      	ldr	r3, [pc, #12]	@ (8004214 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]
}
 800420a:	bf00      	nop
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	420e0020 	.word	0x420e0020

08004218 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e272      	b.n	8004710 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 8087 	beq.w	8004346 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004238:	4b92      	ldr	r3, [pc, #584]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 030c 	and.w	r3, r3, #12
 8004240:	2b04      	cmp	r3, #4
 8004242:	d00c      	beq.n	800425e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004244:	4b8f      	ldr	r3, [pc, #572]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 030c 	and.w	r3, r3, #12
 800424c:	2b08      	cmp	r3, #8
 800424e:	d112      	bne.n	8004276 <HAL_RCC_OscConfig+0x5e>
 8004250:	4b8c      	ldr	r3, [pc, #560]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800425c:	d10b      	bne.n	8004276 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425e:	4b89      	ldr	r3, [pc, #548]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d06c      	beq.n	8004344 <HAL_RCC_OscConfig+0x12c>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d168      	bne.n	8004344 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e24c      	b.n	8004710 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800427e:	d106      	bne.n	800428e <HAL_RCC_OscConfig+0x76>
 8004280:	4b80      	ldr	r3, [pc, #512]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a7f      	ldr	r2, [pc, #508]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 8004286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	e02e      	b.n	80042ec <HAL_RCC_OscConfig+0xd4>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10c      	bne.n	80042b0 <HAL_RCC_OscConfig+0x98>
 8004296:	4b7b      	ldr	r3, [pc, #492]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a7a      	ldr	r2, [pc, #488]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 800429c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	4b78      	ldr	r3, [pc, #480]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a77      	ldr	r2, [pc, #476]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 80042a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e01d      	b.n	80042ec <HAL_RCC_OscConfig+0xd4>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042b8:	d10c      	bne.n	80042d4 <HAL_RCC_OscConfig+0xbc>
 80042ba:	4b72      	ldr	r3, [pc, #456]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a71      	ldr	r2, [pc, #452]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	4b6f      	ldr	r3, [pc, #444]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a6e      	ldr	r2, [pc, #440]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e00b      	b.n	80042ec <HAL_RCC_OscConfig+0xd4>
 80042d4:	4b6b      	ldr	r3, [pc, #428]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a6a      	ldr	r2, [pc, #424]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 80042da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	4b68      	ldr	r3, [pc, #416]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a67      	ldr	r2, [pc, #412]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 80042e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d013      	beq.n	800431c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f4:	f7fd fae2 	bl	80018bc <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042fc:	f7fd fade 	bl	80018bc <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b64      	cmp	r3, #100	@ 0x64
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e200      	b.n	8004710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430e:	4b5d      	ldr	r3, [pc, #372]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0f0      	beq.n	80042fc <HAL_RCC_OscConfig+0xe4>
 800431a:	e014      	b.n	8004346 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7fd face 	bl	80018bc <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004324:	f7fd faca 	bl	80018bc <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b64      	cmp	r3, #100	@ 0x64
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e1ec      	b.n	8004710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004336:	4b53      	ldr	r3, [pc, #332]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x10c>
 8004342:	e000      	b.n	8004346 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d063      	beq.n	800441a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004352:	4b4c      	ldr	r3, [pc, #304]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 030c 	and.w	r3, r3, #12
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00b      	beq.n	8004376 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800435e:	4b49      	ldr	r3, [pc, #292]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	2b08      	cmp	r3, #8
 8004368:	d11c      	bne.n	80043a4 <HAL_RCC_OscConfig+0x18c>
 800436a:	4b46      	ldr	r3, [pc, #280]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d116      	bne.n	80043a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004376:	4b43      	ldr	r3, [pc, #268]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_RCC_OscConfig+0x176>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d001      	beq.n	800438e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e1c0      	b.n	8004710 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438e:	4b3d      	ldr	r3, [pc, #244]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	4939      	ldr	r1, [pc, #228]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a2:	e03a      	b.n	800441a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d020      	beq.n	80043ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ac:	4b36      	ldr	r3, [pc, #216]	@ (8004488 <HAL_RCC_OscConfig+0x270>)
 80043ae:	2201      	movs	r2, #1
 80043b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b2:	f7fd fa83 	bl	80018bc <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ba:	f7fd fa7f 	bl	80018bc <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e1a1      	b.n	8004710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0f0      	beq.n	80043ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	4927      	ldr	r1, [pc, #156]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	600b      	str	r3, [r1, #0]
 80043ec:	e015      	b.n	800441a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ee:	4b26      	ldr	r3, [pc, #152]	@ (8004488 <HAL_RCC_OscConfig+0x270>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fd fa62 	bl	80018bc <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043fc:	f7fd fa5e 	bl	80018bc <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e180      	b.n	8004710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440e:	4b1d      	ldr	r3, [pc, #116]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d03a      	beq.n	800449c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d019      	beq.n	8004462 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800442e:	4b17      	ldr	r3, [pc, #92]	@ (800448c <HAL_RCC_OscConfig+0x274>)
 8004430:	2201      	movs	r2, #1
 8004432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004434:	f7fd fa42 	bl	80018bc <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443c:	f7fd fa3e 	bl	80018bc <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e160      	b.n	8004710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444e:	4b0d      	ldr	r3, [pc, #52]	@ (8004484 <HAL_RCC_OscConfig+0x26c>)
 8004450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800445a:	2001      	movs	r0, #1
 800445c:	f000 face 	bl	80049fc <RCC_Delay>
 8004460:	e01c      	b.n	800449c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004462:	4b0a      	ldr	r3, [pc, #40]	@ (800448c <HAL_RCC_OscConfig+0x274>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004468:	f7fd fa28 	bl	80018bc <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800446e:	e00f      	b.n	8004490 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004470:	f7fd fa24 	bl	80018bc <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d908      	bls.n	8004490 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e146      	b.n	8004710 <HAL_RCC_OscConfig+0x4f8>
 8004482:	bf00      	nop
 8004484:	40021000 	.word	0x40021000
 8004488:	42420000 	.word	0x42420000
 800448c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004490:	4b92      	ldr	r3, [pc, #584]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e9      	bne.n	8004470 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80a6 	beq.w	80045f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044aa:	2300      	movs	r3, #0
 80044ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ae:	4b8b      	ldr	r3, [pc, #556]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10d      	bne.n	80044d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ba:	4b88      	ldr	r3, [pc, #544]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	4a87      	ldr	r2, [pc, #540]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 80044c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044c4:	61d3      	str	r3, [r2, #28]
 80044c6:	4b85      	ldr	r3, [pc, #532]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ce:	60bb      	str	r3, [r7, #8]
 80044d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044d2:	2301      	movs	r3, #1
 80044d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d6:	4b82      	ldr	r3, [pc, #520]	@ (80046e0 <HAL_RCC_OscConfig+0x4c8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d118      	bne.n	8004514 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044e2:	4b7f      	ldr	r3, [pc, #508]	@ (80046e0 <HAL_RCC_OscConfig+0x4c8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a7e      	ldr	r2, [pc, #504]	@ (80046e0 <HAL_RCC_OscConfig+0x4c8>)
 80044e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ee:	f7fd f9e5 	bl	80018bc <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f6:	f7fd f9e1 	bl	80018bc <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b64      	cmp	r3, #100	@ 0x64
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e103      	b.n	8004710 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004508:	4b75      	ldr	r3, [pc, #468]	@ (80046e0 <HAL_RCC_OscConfig+0x4c8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0f0      	beq.n	80044f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d106      	bne.n	800452a <HAL_RCC_OscConfig+0x312>
 800451c:	4b6f      	ldr	r3, [pc, #444]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	4a6e      	ldr	r2, [pc, #440]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	6213      	str	r3, [r2, #32]
 8004528:	e02d      	b.n	8004586 <HAL_RCC_OscConfig+0x36e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10c      	bne.n	800454c <HAL_RCC_OscConfig+0x334>
 8004532:	4b6a      	ldr	r3, [pc, #424]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	4a69      	ldr	r2, [pc, #420]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	6213      	str	r3, [r2, #32]
 800453e:	4b67      	ldr	r3, [pc, #412]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	4a66      	ldr	r2, [pc, #408]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 8004544:	f023 0304 	bic.w	r3, r3, #4
 8004548:	6213      	str	r3, [r2, #32]
 800454a:	e01c      	b.n	8004586 <HAL_RCC_OscConfig+0x36e>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b05      	cmp	r3, #5
 8004552:	d10c      	bne.n	800456e <HAL_RCC_OscConfig+0x356>
 8004554:	4b61      	ldr	r3, [pc, #388]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	4a60      	ldr	r2, [pc, #384]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 800455a:	f043 0304 	orr.w	r3, r3, #4
 800455e:	6213      	str	r3, [r2, #32]
 8004560:	4b5e      	ldr	r3, [pc, #376]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	4a5d      	ldr	r2, [pc, #372]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	6213      	str	r3, [r2, #32]
 800456c:	e00b      	b.n	8004586 <HAL_RCC_OscConfig+0x36e>
 800456e:	4b5b      	ldr	r3, [pc, #364]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	4a5a      	ldr	r2, [pc, #360]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	6213      	str	r3, [r2, #32]
 800457a:	4b58      	ldr	r3, [pc, #352]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	4a57      	ldr	r2, [pc, #348]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 8004580:	f023 0304 	bic.w	r3, r3, #4
 8004584:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d015      	beq.n	80045ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458e:	f7fd f995 	bl	80018bc <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004594:	e00a      	b.n	80045ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004596:	f7fd f991 	bl	80018bc <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e0b1      	b.n	8004710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ac:	4b4b      	ldr	r3, [pc, #300]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0ee      	beq.n	8004596 <HAL_RCC_OscConfig+0x37e>
 80045b8:	e014      	b.n	80045e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ba:	f7fd f97f 	bl	80018bc <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c0:	e00a      	b.n	80045d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c2:	f7fd f97b 	bl	80018bc <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e09b      	b.n	8004710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d8:	4b40      	ldr	r3, [pc, #256]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1ee      	bne.n	80045c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045e4:	7dfb      	ldrb	r3, [r7, #23]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d105      	bne.n	80045f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ea:	4b3c      	ldr	r3, [pc, #240]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	4a3b      	ldr	r2, [pc, #236]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 80045f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 8087 	beq.w	800470e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004600:	4b36      	ldr	r3, [pc, #216]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 030c 	and.w	r3, r3, #12
 8004608:	2b08      	cmp	r3, #8
 800460a:	d061      	beq.n	80046d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	2b02      	cmp	r3, #2
 8004612:	d146      	bne.n	80046a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004614:	4b33      	ldr	r3, [pc, #204]	@ (80046e4 <HAL_RCC_OscConfig+0x4cc>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461a:	f7fd f94f 	bl	80018bc <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004622:	f7fd f94b 	bl	80018bc <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e06d      	b.n	8004710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004634:	4b29      	ldr	r3, [pc, #164]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f0      	bne.n	8004622 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004648:	d108      	bne.n	800465c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800464a:	4b24      	ldr	r3, [pc, #144]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	4921      	ldr	r1, [pc, #132]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 8004658:	4313      	orrs	r3, r2
 800465a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800465c:	4b1f      	ldr	r3, [pc, #124]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a19      	ldr	r1, [r3, #32]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	430b      	orrs	r3, r1
 800466e:	491b      	ldr	r1, [pc, #108]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 8004670:	4313      	orrs	r3, r2
 8004672:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004674:	4b1b      	ldr	r3, [pc, #108]	@ (80046e4 <HAL_RCC_OscConfig+0x4cc>)
 8004676:	2201      	movs	r2, #1
 8004678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467a:	f7fd f91f 	bl	80018bc <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004682:	f7fd f91b 	bl	80018bc <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e03d      	b.n	8004710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004694:	4b11      	ldr	r3, [pc, #68]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f0      	beq.n	8004682 <HAL_RCC_OscConfig+0x46a>
 80046a0:	e035      	b.n	800470e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a2:	4b10      	ldr	r3, [pc, #64]	@ (80046e4 <HAL_RCC_OscConfig+0x4cc>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fd f908 	bl	80018bc <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b0:	f7fd f904 	bl	80018bc <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e026      	b.n	8004710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c2:	4b06      	ldr	r3, [pc, #24]	@ (80046dc <HAL_RCC_OscConfig+0x4c4>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCC_OscConfig+0x498>
 80046ce:	e01e      	b.n	800470e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d107      	bne.n	80046e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e019      	b.n	8004710 <HAL_RCC_OscConfig+0x4f8>
 80046dc:	40021000 	.word	0x40021000
 80046e0:	40007000 	.word	0x40007000
 80046e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004718 <HAL_RCC_OscConfig+0x500>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d106      	bne.n	800470a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d001      	beq.n	800470e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40021000 	.word	0x40021000

0800471c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0d0      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004730:	4b6a      	ldr	r3, [pc, #424]	@ (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d910      	bls.n	8004760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473e:	4b67      	ldr	r3, [pc, #412]	@ (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 0207 	bic.w	r2, r3, #7
 8004746:	4965      	ldr	r1, [pc, #404]	@ (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	4313      	orrs	r3, r2
 800474c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800474e:	4b63      	ldr	r3, [pc, #396]	@ (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d001      	beq.n	8004760 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0b8      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d020      	beq.n	80047ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004778:	4b59      	ldr	r3, [pc, #356]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4a58      	ldr	r2, [pc, #352]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 800477e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004782:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004790:	4b53      	ldr	r3, [pc, #332]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4a52      	ldr	r2, [pc, #328]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004796:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800479a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800479c:	4b50      	ldr	r3, [pc, #320]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	494d      	ldr	r1, [pc, #308]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d040      	beq.n	800483c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d107      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c2:	4b47      	ldr	r3, [pc, #284]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d115      	bne.n	80047fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e07f      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047da:	4b41      	ldr	r3, [pc, #260]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d109      	bne.n	80047fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e073      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ea:	4b3d      	ldr	r3, [pc, #244]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e06b      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fa:	4b39      	ldr	r3, [pc, #228]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f023 0203 	bic.w	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	4936      	ldr	r1, [pc, #216]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004808:	4313      	orrs	r3, r2
 800480a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800480c:	f7fd f856 	bl	80018bc <HAL_GetTick>
 8004810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004812:	e00a      	b.n	800482a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004814:	f7fd f852 	bl	80018bc <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e053      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482a:	4b2d      	ldr	r3, [pc, #180]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f003 020c 	and.w	r2, r3, #12
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	429a      	cmp	r2, r3
 800483a:	d1eb      	bne.n	8004814 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800483c:	4b27      	ldr	r3, [pc, #156]	@ (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d210      	bcs.n	800486c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484a:	4b24      	ldr	r3, [pc, #144]	@ (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f023 0207 	bic.w	r2, r3, #7
 8004852:	4922      	ldr	r1, [pc, #136]	@ (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485a:	4b20      	ldr	r3, [pc, #128]	@ (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d001      	beq.n	800486c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e032      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004878:	4b19      	ldr	r3, [pc, #100]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4916      	ldr	r1, [pc, #88]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004886:	4313      	orrs	r3, r2
 8004888:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004896:	4b12      	ldr	r3, [pc, #72]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	490e      	ldr	r1, [pc, #56]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048aa:	f000 f821 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 80048ae:	4602      	mov	r2, r0
 80048b0:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	490a      	ldr	r1, [pc, #40]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80048bc:	5ccb      	ldrb	r3, [r1, r3]
 80048be:	fa22 f303 	lsr.w	r3, r2, r3
 80048c2:	4a09      	ldr	r2, [pc, #36]	@ (80048e8 <HAL_RCC_ClockConfig+0x1cc>)
 80048c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048c6:	4b09      	ldr	r3, [pc, #36]	@ (80048ec <HAL_RCC_ClockConfig+0x1d0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fc ffb4 	bl	8001838 <HAL_InitTick>

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40022000 	.word	0x40022000
 80048e0:	40021000 	.word	0x40021000
 80048e4:	0800ab2c 	.word	0x0800ab2c
 80048e8:	20000000 	.word	0x20000000
 80048ec:	20000004 	.word	0x20000004

080048f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	2300      	movs	r3, #0
 80048fc:	60bb      	str	r3, [r7, #8]
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	2300      	movs	r3, #0
 8004904:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800490a:	4b1e      	ldr	r3, [pc, #120]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x94>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 030c 	and.w	r3, r3, #12
 8004916:	2b04      	cmp	r3, #4
 8004918:	d002      	beq.n	8004920 <HAL_RCC_GetSysClockFreq+0x30>
 800491a:	2b08      	cmp	r3, #8
 800491c:	d003      	beq.n	8004926 <HAL_RCC_GetSysClockFreq+0x36>
 800491e:	e027      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004920:	4b19      	ldr	r3, [pc, #100]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x98>)
 8004922:	613b      	str	r3, [r7, #16]
      break;
 8004924:	e027      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	0c9b      	lsrs	r3, r3, #18
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	4a17      	ldr	r2, [pc, #92]	@ (800498c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004930:	5cd3      	ldrb	r3, [r2, r3]
 8004932:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d010      	beq.n	8004960 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800493e:	4b11      	ldr	r3, [pc, #68]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x94>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	0c5b      	lsrs	r3, r3, #17
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	4a11      	ldr	r2, [pc, #68]	@ (8004990 <HAL_RCC_GetSysClockFreq+0xa0>)
 800494a:	5cd3      	ldrb	r3, [r2, r3]
 800494c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a0d      	ldr	r2, [pc, #52]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x98>)
 8004952:	fb03 f202 	mul.w	r2, r3, r2
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	fbb2 f3f3 	udiv	r3, r2, r3
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	e004      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a0c      	ldr	r2, [pc, #48]	@ (8004994 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004964:	fb02 f303 	mul.w	r3, r2, r3
 8004968:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	613b      	str	r3, [r7, #16]
      break;
 800496e:	e002      	b.n	8004976 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004970:	4b05      	ldr	r3, [pc, #20]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x98>)
 8004972:	613b      	str	r3, [r7, #16]
      break;
 8004974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004976:	693b      	ldr	r3, [r7, #16]
}
 8004978:	4618      	mov	r0, r3
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40021000 	.word	0x40021000
 8004988:	007a1200 	.word	0x007a1200
 800498c:	0800ab44 	.word	0x0800ab44
 8004990:	0800ab54 	.word	0x0800ab54
 8004994:	003d0900 	.word	0x003d0900

08004998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800499c:	4b02      	ldr	r3, [pc, #8]	@ (80049a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800499e:	681b      	ldr	r3, [r3, #0]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr
 80049a8:	20000000 	.word	0x20000000

080049ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049b0:	f7ff fff2 	bl	8004998 <HAL_RCC_GetHCLKFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b05      	ldr	r3, [pc, #20]	@ (80049cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	0a1b      	lsrs	r3, r3, #8
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4903      	ldr	r1, [pc, #12]	@ (80049d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049c2:	5ccb      	ldrb	r3, [r1, r3]
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40021000 	.word	0x40021000
 80049d0:	0800ab3c 	.word	0x0800ab3c

080049d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049d8:	f7ff ffde 	bl	8004998 <HAL_RCC_GetHCLKFreq>
 80049dc:	4602      	mov	r2, r0
 80049de:	4b05      	ldr	r3, [pc, #20]	@ (80049f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	0adb      	lsrs	r3, r3, #11
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	4903      	ldr	r1, [pc, #12]	@ (80049f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ea:	5ccb      	ldrb	r3, [r1, r3]
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40021000 	.word	0x40021000
 80049f8:	0800ab3c 	.word	0x0800ab3c

080049fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a04:	4b0a      	ldr	r3, [pc, #40]	@ (8004a30 <RCC_Delay+0x34>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a0a      	ldr	r2, [pc, #40]	@ (8004a34 <RCC_Delay+0x38>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	0a5b      	lsrs	r3, r3, #9
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	fb02 f303 	mul.w	r3, r2, r3
 8004a16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a18:	bf00      	nop
  }
  while (Delay --);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1e5a      	subs	r2, r3, #1
 8004a1e:	60fa      	str	r2, [r7, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1f9      	bne.n	8004a18 <RCC_Delay+0x1c>
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr
 8004a30:	20000000 	.word	0x20000000
 8004a34:	10624dd3 	.word	0x10624dd3

08004a38 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d07d      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004a54:	2300      	movs	r3, #0
 8004a56:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a58:	4b4f      	ldr	r3, [pc, #316]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10d      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a64:	4b4c      	ldr	r3, [pc, #304]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	4a4b      	ldr	r2, [pc, #300]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a6e:	61d3      	str	r3, [r2, #28]
 8004a70:	4b49      	ldr	r3, [pc, #292]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a80:	4b46      	ldr	r3, [pc, #280]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d118      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a8c:	4b43      	ldr	r3, [pc, #268]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a42      	ldr	r2, [pc, #264]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a98:	f7fc ff10 	bl	80018bc <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa0:	f7fc ff0c 	bl	80018bc <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b64      	cmp	r3, #100	@ 0x64
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e06d      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab2:	4b3a      	ldr	r3, [pc, #232]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004abe:	4b36      	ldr	r3, [pc, #216]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ac6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d02e      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d027      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004adc:	4b2e      	ldr	r3, [pc, #184]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ae4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ae6:	4b2e      	ldr	r3, [pc, #184]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ae8:	2201      	movs	r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004aec:	4b2c      	ldr	r3, [pc, #176]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004af2:	4a29      	ldr	r2, [pc, #164]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d014      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b02:	f7fc fedb 	bl	80018bc <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b08:	e00a      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b0a:	f7fc fed7 	bl	80018bc <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e036      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b20:	4b1d      	ldr	r3, [pc, #116]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0ee      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	4917      	ldr	r1, [pc, #92]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d105      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b44:	4b14      	ldr	r3, [pc, #80]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	4a13      	ldr	r2, [pc, #76]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d008      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	490b      	ldr	r1, [pc, #44]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d008      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b7a:	4b07      	ldr	r3, [pc, #28]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	4904      	ldr	r1, [pc, #16]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	40007000 	.word	0x40007000
 8004ba0:	42420440 	.word	0x42420440

08004ba4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61fb      	str	r3, [r7, #28]
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b10      	cmp	r3, #16
 8004bc4:	d00a      	beq.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b10      	cmp	r3, #16
 8004bca:	f200 808a 	bhi.w	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d045      	beq.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d075      	beq.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004bda:	e082      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004bdc:	4b46      	ldr	r3, [pc, #280]	@ (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004be2:	4b45      	ldr	r3, [pc, #276]	@ (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d07b      	beq.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	0c9b      	lsrs	r3, r3, #18
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	4a41      	ldr	r2, [pc, #260]	@ (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004bf8:	5cd3      	ldrb	r3, [r2, r3]
 8004bfa:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d015      	beq.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c06:	4b3c      	ldr	r3, [pc, #240]	@ (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	0c5b      	lsrs	r3, r3, #17
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	4a3b      	ldr	r2, [pc, #236]	@ (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004c12:	5cd3      	ldrb	r3, [r2, r3]
 8004c14:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00d      	beq.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004c20:	4a38      	ldr	r2, [pc, #224]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	fb02 f303 	mul.w	r3, r2, r3
 8004c2e:	61fb      	str	r3, [r7, #28]
 8004c30:	e004      	b.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	4a34      	ldr	r2, [pc, #208]	@ (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004c36:	fb02 f303 	mul.w	r3, r2, r3
 8004c3a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c48:	d102      	bne.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	61bb      	str	r3, [r7, #24]
      break;
 8004c4e:	e04a      	b.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	4a2d      	ldr	r2, [pc, #180]	@ (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004c56:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5a:	085b      	lsrs	r3, r3, #1
 8004c5c:	61bb      	str	r3, [r7, #24]
      break;
 8004c5e:	e042      	b.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004c60:	4b25      	ldr	r3, [pc, #148]	@ (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c70:	d108      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004c7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c80:	61bb      	str	r3, [r7, #24]
 8004c82:	e01f      	b.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c8e:	d109      	bne.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004c90:	4b19      	ldr	r3, [pc, #100]	@ (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004c9c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	e00f      	b.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004caa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cae:	d11c      	bne.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004cb0:	4b11      	ldr	r3, [pc, #68]	@ (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d016      	beq.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004cbc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004cc0:	61bb      	str	r3, [r7, #24]
      break;
 8004cc2:	e012      	b.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004cc4:	e011      	b.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004cc6:	f7ff fe85 	bl	80049d4 <HAL_RCC_GetPCLK2Freq>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	0b9b      	lsrs	r3, r3, #14
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cde:	61bb      	str	r3, [r7, #24]
      break;
 8004ce0:	e004      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004ce2:	bf00      	nop
 8004ce4:	e002      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e000      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004cea:	bf00      	nop
    }
  }
  return (frequency);
 8004cec:	69bb      	ldr	r3, [r7, #24]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	0800ab58 	.word	0x0800ab58
 8004d00:	0800ab68 	.word	0x0800ab68
 8004d04:	007a1200 	.word	0x007a1200
 8004d08:	003d0900 	.word	0x003d0900
 8004d0c:	aaaaaaab 	.word	0xaaaaaaab

08004d10 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e07a      	b.n	8004e1c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	7c5b      	ldrb	r3, [r3, #17]
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d105      	bne.n	8004d3c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fc f936 	bl	8000fa8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f870 	bl	8004e28 <HAL_RTC_WaitForSynchro>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d004      	beq.n	8004d58 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2204      	movs	r2, #4
 8004d52:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e061      	b.n	8004e1c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f892 	bl	8004e82 <RTC_EnterInitMode>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d004      	beq.n	8004d6e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2204      	movs	r2, #4
 8004d68:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e056      	b.n	8004e1c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0207 	bic.w	r2, r2, #7
 8004d7c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004d86:	4b27      	ldr	r3, [pc, #156]	@ (8004e24 <HAL_RTC_Init+0x114>)
 8004d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8a:	4a26      	ldr	r2, [pc, #152]	@ (8004e24 <HAL_RTC_Init+0x114>)
 8004d8c:	f023 0301 	bic.w	r3, r3, #1
 8004d90:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004d92:	4b24      	ldr	r3, [pc, #144]	@ (8004e24 <HAL_RTC_Init+0x114>)
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	4921      	ldr	r1, [pc, #132]	@ (8004e24 <HAL_RTC_Init+0x114>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d003      	beq.n	8004db6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	e00e      	b.n	8004dd4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004db6:	2001      	movs	r0, #1
 8004db8:	f7ff fef4 	bl	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004dbc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d104      	bne.n	8004dce <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2204      	movs	r2, #4
 8004dc8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e026      	b.n	8004e1c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	0c1a      	lsrs	r2, r3, #16
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f002 020f 	and.w	r2, r2, #15
 8004de0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	b292      	uxth	r2, r2
 8004dea:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f870 	bl	8004ed2 <RTC_ExitInitMode>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d004      	beq.n	8004e02 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e00c      	b.n	8004e1c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
  }
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40006c00 	.word	0x40006c00

08004e28 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e01d      	b.n	8004e7a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0208 	bic.w	r2, r2, #8
 8004e4c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004e4e:	f7fc fd35 	bl	80018bc <HAL_GetTick>
 8004e52:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004e54:	e009      	b.n	8004e6a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004e56:	f7fc fd31 	bl	80018bc <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e64:	d901      	bls.n	8004e6a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e007      	b.n	8004e7a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0ee      	beq.n	8004e56 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004e8e:	f7fc fd15 	bl	80018bc <HAL_GetTick>
 8004e92:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004e94:	e009      	b.n	8004eaa <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004e96:	f7fc fd11 	bl	80018bc <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ea4:	d901      	bls.n	8004eaa <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e00f      	b.n	8004eca <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0ee      	beq.n	8004e96 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0210 	orr.w	r2, r2, #16
 8004ec6:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0210 	bic.w	r2, r2, #16
 8004eec:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004eee:	f7fc fce5 	bl	80018bc <HAL_GetTick>
 8004ef2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004ef4:	e009      	b.n	8004f0a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004ef6:	f7fc fce1 	bl	80018bc <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f04:	d901      	bls.n	8004f0a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e007      	b.n	8004f1a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f003 0320 	and.w	r3, r3, #32
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0ee      	beq.n	8004ef6 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b082      	sub	sp, #8
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e042      	b.n	8004fba <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d106      	bne.n	8004f4e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7fc fa67 	bl	800141c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2224      	movs	r2, #36	@ 0x24
 8004f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f64:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 ffa4 	bl	8005eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695a      	ldr	r2, [r3, #20]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08c      	sub	sp, #48	@ 0x30
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d156      	bne.n	800508c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_UART_Transmit_DMA+0x26>
 8004fe4:	88fb      	ldrh	r3, [r7, #6]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e04f      	b.n	800508e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	88fa      	ldrh	r2, [r7, #6]
 8004ff8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	88fa      	ldrh	r2, [r7, #6]
 8004ffe:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2221      	movs	r2, #33	@ 0x21
 800500a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005012:	4a21      	ldr	r2, [pc, #132]	@ (8005098 <HAL_UART_Transmit_DMA+0xd4>)
 8005014:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501a:	4a20      	ldr	r2, [pc, #128]	@ (800509c <HAL_UART_Transmit_DMA+0xd8>)
 800501c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005022:	4a1f      	ldr	r2, [pc, #124]	@ (80050a0 <HAL_UART_Transmit_DMA+0xdc>)
 8005024:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502a:	2200      	movs	r2, #0
 800502c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800502e:	f107 0308 	add.w	r3, r7, #8
 8005032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503a:	6819      	ldr	r1, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3304      	adds	r3, #4
 8005042:	461a      	mov	r2, r3
 8005044:	88fb      	ldrh	r3, [r7, #6]
 8005046:	f7fc fe1e 	bl	8001c86 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005052:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3314      	adds	r3, #20
 800505a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	617b      	str	r3, [r7, #20]
   return(result);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800506a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3314      	adds	r3, #20
 8005072:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005074:	627a      	str	r2, [r7, #36]	@ 0x24
 8005076:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	6a39      	ldr	r1, [r7, #32]
 800507a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	61fb      	str	r3, [r7, #28]
   return(result);
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e5      	bne.n	8005054 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	e000      	b.n	800508e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800508c:	2302      	movs	r3, #2
  }
}
 800508e:	4618      	mov	r0, r3
 8005090:	3730      	adds	r7, #48	@ 0x30
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	0800574b 	.word	0x0800574b
 800509c:	080057e5 	.word	0x080057e5
 80050a0:	08005969 	.word	0x08005969

080050a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	4613      	mov	r3, r2
 80050b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d112      	bne.n	80050e4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_UART_Receive_DMA+0x26>
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e00b      	b.n	80050e6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80050d4:	88fb      	ldrh	r3, [r7, #6]
 80050d6:	461a      	mov	r2, r3
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 fc8e 	bl	80059fc <UART_Start_Receive_DMA>
 80050e0:	4603      	mov	r3, r0
 80050e2:	e000      	b.n	80050e6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80050e4:	2302      	movs	r3, #2
  }
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b090      	sub	sp, #64	@ 0x40
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005104:	2b00      	cmp	r3, #0
 8005106:	bf14      	ite	ne
 8005108:	2301      	movne	r3, #1
 800510a:	2300      	moveq	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b21      	cmp	r3, #33	@ 0x21
 800511a:	d128      	bne.n	800516e <HAL_UART_DMAStop+0x80>
 800511c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d025      	beq.n	800516e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3314      	adds	r3, #20
 8005128:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	623b      	str	r3, [r7, #32]
   return(result);
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005138:	63bb      	str	r3, [r7, #56]	@ 0x38
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3314      	adds	r3, #20
 8005140:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005142:	633a      	str	r2, [r7, #48]	@ 0x30
 8005144:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e5      	bne.n	8005122 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515a:	2b00      	cmp	r3, #0
 800515c:	d004      	beq.n	8005168 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	4618      	mov	r0, r3
 8005164:	f7fc fdef 	bl	8001d46 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fce1 	bl	8005b30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	bf14      	ite	ne
 800517c:	2301      	movne	r3, #1
 800517e:	2300      	moveq	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b22      	cmp	r3, #34	@ 0x22
 800518e:	d128      	bne.n	80051e2 <HAL_UART_DMAStop+0xf4>
 8005190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005192:	2b00      	cmp	r3, #0
 8005194:	d025      	beq.n	80051e2 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3314      	adds	r3, #20
 800519c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	e853 3f00 	ldrex	r3, [r3]
 80051a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3314      	adds	r3, #20
 80051b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051b6:	61fa      	str	r2, [r7, #28]
 80051b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ba:	69b9      	ldr	r1, [r7, #24]
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	617b      	str	r3, [r7, #20]
   return(result);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1e5      	bne.n	8005196 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d004      	beq.n	80051dc <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fc fdb5 	bl	8001d46 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fcce 	bl	8005b7e <UART_EndRxTransfer>
  }

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3740      	adds	r7, #64	@ 0x40
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b0ba      	sub	sp, #232	@ 0xe8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005212:	2300      	movs	r3, #0
 8005214:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005218:	2300      	movs	r3, #0
 800521a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800521e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800522a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10f      	bne.n	8005252 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b00      	cmp	r3, #0
 800523c:	d009      	beq.n	8005252 <HAL_UART_IRQHandler+0x66>
 800523e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fd74 	bl	8005d38 <UART_Receive_IT>
      return;
 8005250:	e25b      	b.n	800570a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005252:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 80de 	beq.w	8005418 <HAL_UART_IRQHandler+0x22c>
 800525c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800526c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80d1 	beq.w	8005418 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00b      	beq.n	800529a <HAL_UART_IRQHandler+0xae>
 8005282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d005      	beq.n	800529a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005292:	f043 0201 	orr.w	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800529a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00b      	beq.n	80052be <HAL_UART_IRQHandler+0xd2>
 80052a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b6:	f043 0202 	orr.w	r2, r3, #2
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00b      	beq.n	80052e2 <HAL_UART_IRQHandler+0xf6>
 80052ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d005      	beq.n	80052e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052da:	f043 0204 	orr.w	r2, r3, #4
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d011      	beq.n	8005312 <HAL_UART_IRQHandler+0x126>
 80052ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d105      	bne.n	8005306 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d005      	beq.n	8005312 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530a:	f043 0208 	orr.w	r2, r3, #8
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 81f2 	beq.w	8005700 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800531c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d008      	beq.n	800533a <HAL_UART_IRQHandler+0x14e>
 8005328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fcff 	bl	8005d38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005344:	2b00      	cmp	r3, #0
 8005346:	bf14      	ite	ne
 8005348:	2301      	movne	r3, #1
 800534a:	2300      	moveq	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d103      	bne.n	8005366 <HAL_UART_IRQHandler+0x17a>
 800535e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005362:	2b00      	cmp	r3, #0
 8005364:	d04f      	beq.n	8005406 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fc09 	bl	8005b7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	d041      	beq.n	80053fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3314      	adds	r3, #20
 8005380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005390:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005398:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3314      	adds	r3, #20
 80053a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80053b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80053be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1d9      	bne.n	800537a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d013      	beq.n	80053f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d2:	4a7e      	ldr	r2, [pc, #504]	@ (80055cc <HAL_UART_IRQHandler+0x3e0>)
 80053d4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fc fcee 	bl	8001dbc <HAL_DMA_Abort_IT>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d016      	beq.n	8005414 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80053f0:	4610      	mov	r0, r2
 80053f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f4:	e00e      	b.n	8005414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fc f9c0 	bl	800177c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fc:	e00a      	b.n	8005414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fc f9bc 	bl	800177c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005404:	e006      	b.n	8005414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fc f9b8 	bl	800177c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005412:	e175      	b.n	8005700 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005414:	bf00      	nop
    return;
 8005416:	e173      	b.n	8005700 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541c:	2b01      	cmp	r3, #1
 800541e:	f040 814f 	bne.w	80056c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005426:	f003 0310 	and.w	r3, r3, #16
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 8148 	beq.w	80056c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005434:	f003 0310 	and.w	r3, r3, #16
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 8141 	beq.w	80056c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800543e:	2300      	movs	r3, #0
 8005440:	60bb      	str	r3, [r7, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60bb      	str	r3, [r7, #8]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 80b6 	beq.w	80055d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005470:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8145 	beq.w	8005704 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800547e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005482:	429a      	cmp	r2, r3
 8005484:	f080 813e 	bcs.w	8005704 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800548e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	2b20      	cmp	r3, #32
 8005498:	f000 8088 	beq.w	80055ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	330c      	adds	r3, #12
 80054a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054aa:	e853 3f00 	ldrex	r3, [r3]
 80054ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80054b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	330c      	adds	r3, #12
 80054c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80054c8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80054d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80054e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1d9      	bne.n	800549c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3314      	adds	r3, #20
 80054ee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80054f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054fa:	f023 0301 	bic.w	r3, r3, #1
 80054fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3314      	adds	r3, #20
 8005508:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800550c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005510:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005514:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800551e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e1      	bne.n	80054e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3314      	adds	r3, #20
 800552a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005534:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800553a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3314      	adds	r3, #20
 8005544:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005548:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800554a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800554e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005556:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e3      	bne.n	8005524 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	330c      	adds	r3, #12
 8005570:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800557a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800557c:	f023 0310 	bic.w	r3, r3, #16
 8005580:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	330c      	adds	r3, #12
 800558a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800558e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005590:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005594:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800559c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e3      	bne.n	800556a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fc fbcd 	bl	8001d46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	b29b      	uxth	r3, r3
 80055c0:	4619      	mov	r1, r3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f8b6 	bl	8005734 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055c8:	e09c      	b.n	8005704 <HAL_UART_IRQHandler+0x518>
 80055ca:	bf00      	nop
 80055cc:	08005c43 	.word	0x08005c43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055d8:	b29b      	uxth	r3, r3
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 808e 	beq.w	8005708 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80055ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 8089 	beq.w	8005708 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	330c      	adds	r3, #12
 80055fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800560c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	330c      	adds	r3, #12
 8005616:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800561a:	647a      	str	r2, [r7, #68]	@ 0x44
 800561c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005620:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e3      	bne.n	80055f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3314      	adds	r3, #20
 8005634:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	623b      	str	r3, [r7, #32]
   return(result);
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	f023 0301 	bic.w	r3, r3, #1
 8005644:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3314      	adds	r3, #20
 800564e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005652:	633a      	str	r2, [r7, #48]	@ 0x30
 8005654:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e3      	bne.n	800562e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	60fb      	str	r3, [r7, #12]
   return(result);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0310 	bic.w	r3, r3, #16
 800568a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	330c      	adds	r3, #12
 8005694:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005698:	61fa      	str	r2, [r7, #28]
 800569a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	69b9      	ldr	r1, [r7, #24]
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	617b      	str	r3, [r7, #20]
   return(result);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e3      	bne.n	8005674 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056b6:	4619      	mov	r1, r3
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f83b 	bl	8005734 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056be:	e023      	b.n	8005708 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d009      	beq.n	80056e0 <HAL_UART_IRQHandler+0x4f4>
 80056cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fac6 	bl	8005c6a <UART_Transmit_IT>
    return;
 80056de:	e014      	b.n	800570a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00e      	beq.n	800570a <HAL_UART_IRQHandler+0x51e>
 80056ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d008      	beq.n	800570a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fb05 	bl	8005d08 <UART_EndTransmit_IT>
    return;
 80056fe:	e004      	b.n	800570a <HAL_UART_IRQHandler+0x51e>
    return;
 8005700:	bf00      	nop
 8005702:	e002      	b.n	800570a <HAL_UART_IRQHandler+0x51e>
      return;
 8005704:	bf00      	nop
 8005706:	e000      	b.n	800570a <HAL_UART_IRQHandler+0x51e>
      return;
 8005708:	bf00      	nop
  }
}
 800570a:	37e8      	adds	r7, #232	@ 0xe8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	bc80      	pop	{r7}
 8005720:	4770      	bx	lr

08005722 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr

08005734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr

0800574a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b090      	sub	sp, #64	@ 0x40
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0320 	and.w	r3, r3, #32
 8005762:	2b00      	cmp	r3, #0
 8005764:	d137      	bne.n	80057d6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005768:	2200      	movs	r2, #0
 800576a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800576c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3314      	adds	r3, #20
 8005772:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	623b      	str	r3, [r7, #32]
   return(result);
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005782:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3314      	adds	r3, #20
 800578a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800578c:	633a      	str	r2, [r7, #48]	@ 0x30
 800578e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005790:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005794:	e841 2300 	strex	r3, r2, [r1]
 8005798:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800579a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e5      	bne.n	800576c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	330c      	adds	r3, #12
 80057be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057c0:	61fa      	str	r2, [r7, #28]
 80057c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	69b9      	ldr	r1, [r7, #24]
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	617b      	str	r3, [r7, #20]
   return(result);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e5      	bne.n	80057a0 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80057d4:	e002      	b.n	80057dc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80057d6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80057d8:	f7ff ff9a 	bl	8005710 <HAL_UART_TxCpltCallback>
}
 80057dc:	bf00      	nop
 80057de:	3740      	adds	r7, #64	@ 0x40
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f7ff ff95 	bl	8005722 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057f8:	bf00      	nop
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b09c      	sub	sp, #112	@ 0x70
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d172      	bne.n	8005902 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800581c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800581e:	2200      	movs	r2, #0
 8005820:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	330c      	adds	r3, #12
 8005828:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800583a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	330c      	adds	r3, #12
 8005840:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005842:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005844:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005848:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005850:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e5      	bne.n	8005822 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3314      	adds	r3, #20
 800585c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005860:	e853 3f00 	ldrex	r3, [r3]
 8005864:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005868:	f023 0301 	bic.w	r3, r3, #1
 800586c:	667b      	str	r3, [r7, #100]	@ 0x64
 800586e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3314      	adds	r3, #20
 8005874:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005876:	647a      	str	r2, [r7, #68]	@ 0x44
 8005878:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800587c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1e5      	bne.n	8005856 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800588a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	623b      	str	r3, [r7, #32]
   return(result);
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80058a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3314      	adds	r3, #20
 80058a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80058aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80058ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e5      	bne.n	800588a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d119      	bne.n	8005902 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	330c      	adds	r3, #12
 80058d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	e853 3f00 	ldrex	r3, [r3]
 80058dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f023 0310 	bic.w	r3, r3, #16
 80058e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	330c      	adds	r3, #12
 80058ec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80058ee:	61fa      	str	r2, [r7, #28]
 80058f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	69b9      	ldr	r1, [r7, #24]
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	e841 2300 	strex	r3, r2, [r1]
 80058fa:	617b      	str	r3, [r7, #20]
   return(result);
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1e5      	bne.n	80058ce <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005904:	2200      	movs	r2, #0
 8005906:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005908:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800590a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590c:	2b01      	cmp	r3, #1
 800590e:	d106      	bne.n	800591e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005910:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005912:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005914:	4619      	mov	r1, r3
 8005916:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005918:	f7ff ff0c 	bl	8005734 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800591c:	e002      	b.n	8005924 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800591e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005920:	f7fb fef4 	bl	800170c <HAL_UART_RxCpltCallback>
}
 8005924:	bf00      	nop
 8005926:	3770      	adds	r7, #112	@ 0x70
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005938:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005944:	2b01      	cmp	r3, #1
 8005946:	d108      	bne.n	800595a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800594c:	085b      	lsrs	r3, r3, #1
 800594e:	b29b      	uxth	r3, r3
 8005950:	4619      	mov	r1, r3
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7ff feee 	bl	8005734 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005958:	e002      	b.n	8005960 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f7fb fe9e 	bl	800169c <HAL_UART_RxHalfCpltCallback>
}
 8005960:	bf00      	nop
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005970:	2300      	movs	r3, #0
 8005972:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005978:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005984:	2b00      	cmp	r3, #0
 8005986:	bf14      	ite	ne
 8005988:	2301      	movne	r3, #1
 800598a:	2300      	moveq	r3, #0
 800598c:	b2db      	uxtb	r3, r3
 800598e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b21      	cmp	r3, #33	@ 0x21
 800599a:	d108      	bne.n	80059ae <UART_DMAError+0x46>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d005      	beq.n	80059ae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2200      	movs	r2, #0
 80059a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80059a8:	68b8      	ldr	r0, [r7, #8]
 80059aa:	f000 f8c1 	bl	8005b30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	bf14      	ite	ne
 80059bc:	2301      	movne	r3, #1
 80059be:	2300      	moveq	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b22      	cmp	r3, #34	@ 0x22
 80059ce:	d108      	bne.n	80059e2 <UART_DMAError+0x7a>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d005      	beq.n	80059e2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2200      	movs	r2, #0
 80059da:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80059dc:	68b8      	ldr	r0, [r7, #8]
 80059de:	f000 f8ce 	bl	8005b7e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e6:	f043 0210 	orr.w	r2, r3, #16
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059ee:	68b8      	ldr	r0, [r7, #8]
 80059f0:	f7fb fec4 	bl	800177c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059f4:	bf00      	nop
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b098      	sub	sp, #96	@ 0x60
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	4613      	mov	r3, r2
 8005a08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	88fa      	ldrh	r2, [r7, #6]
 8005a14:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2222      	movs	r2, #34	@ 0x22
 8005a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a28:	4a3e      	ldr	r2, [pc, #248]	@ (8005b24 <UART_Start_Receive_DMA+0x128>)
 8005a2a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a30:	4a3d      	ldr	r2, [pc, #244]	@ (8005b28 <UART_Start_Receive_DMA+0x12c>)
 8005a32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a38:	4a3c      	ldr	r2, [pc, #240]	@ (8005b2c <UART_Start_Receive_DMA+0x130>)
 8005a3a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a40:	2200      	movs	r2, #0
 8005a42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005a44:	f107 0308 	add.w	r3, r7, #8
 8005a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3304      	adds	r3, #4
 8005a54:	4619      	mov	r1, r3
 8005a56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	f7fc f913 	bl	8001c86 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005a60:	2300      	movs	r3, #0
 8005a62:	613b      	str	r3, [r7, #16]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d019      	beq.n	8005ab2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	330c      	adds	r3, #12
 8005a84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a88:	e853 3f00 	ldrex	r3, [r3]
 8005a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a9e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005aa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005aac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e5      	bne.n	8005a7e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3314      	adds	r3, #20
 8005ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac4:	f043 0301 	orr.w	r3, r3, #1
 8005ac8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3314      	adds	r3, #20
 8005ad0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ad2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005ad4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005ad8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e5      	bne.n	8005ab2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3314      	adds	r3, #20
 8005aec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	617b      	str	r3, [r7, #20]
   return(result);
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005afc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	3314      	adds	r3, #20
 8005b04:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005b06:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	6a39      	ldr	r1, [r7, #32]
 8005b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e5      	bne.n	8005ae6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3760      	adds	r7, #96	@ 0x60
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	08005801 	.word	0x08005801
 8005b28:	0800592d 	.word	0x0800592d
 8005b2c:	08005969 	.word	0x08005969

08005b30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b089      	sub	sp, #36	@ 0x24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	330c      	adds	r3, #12
 8005b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005b4e:	61fb      	str	r3, [r7, #28]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	330c      	adds	r3, #12
 8005b56:	69fa      	ldr	r2, [r7, #28]
 8005b58:	61ba      	str	r2, [r7, #24]
 8005b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6979      	ldr	r1, [r7, #20]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	613b      	str	r3, [r7, #16]
   return(result);
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e5      	bne.n	8005b38 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005b74:	bf00      	nop
 8005b76:	3724      	adds	r7, #36	@ 0x24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr

08005b7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b095      	sub	sp, #84	@ 0x54
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	330c      	adds	r3, #12
 8005b8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ba6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e5      	bne.n	8005b86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3314      	adds	r3, #20
 8005bc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	f023 0301 	bic.w	r3, r3, #1
 8005bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3314      	adds	r3, #20
 8005bd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005be0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e5      	bne.n	8005bba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d119      	bne.n	8005c2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	330c      	adds	r3, #12
 8005bfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f023 0310 	bic.w	r3, r3, #16
 8005c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	330c      	adds	r3, #12
 8005c14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c16:	61ba      	str	r2, [r7, #24]
 8005c18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6979      	ldr	r1, [r7, #20]
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	613b      	str	r3, [r7, #16]
   return(result);
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e5      	bne.n	8005bf6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c38:	bf00      	nop
 8005c3a:	3754      	adds	r7, #84	@ 0x54
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr

08005c42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f7fb fd8d 	bl	800177c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b085      	sub	sp, #20
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b21      	cmp	r3, #33	@ 0x21
 8005c7c:	d13e      	bne.n	8005cfc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c86:	d114      	bne.n	8005cb2 <UART_Transmit_IT+0x48>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d110      	bne.n	8005cb2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ca4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	1c9a      	adds	r2, r3, #2
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	621a      	str	r2, [r3, #32]
 8005cb0:	e008      	b.n	8005cc4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	1c59      	adds	r1, r3, #1
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6211      	str	r1, [r2, #32]
 8005cbc:	781a      	ldrb	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10f      	bne.n	8005cf8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ce6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cf6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e000      	b.n	8005cfe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cfc:	2302      	movs	r3, #2
  }
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr

08005d08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff fcf1 	bl	8005710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08c      	sub	sp, #48	@ 0x30
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b22      	cmp	r3, #34	@ 0x22
 8005d4a:	f040 80ae 	bne.w	8005eaa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d56:	d117      	bne.n	8005d88 <UART_Receive_IT+0x50>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d113      	bne.n	8005d88 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d60:	2300      	movs	r3, #0
 8005d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d68:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d80:	1c9a      	adds	r2, r3, #2
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d86:	e026      	b.n	8005dd6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d9a:	d007      	beq.n	8005dac <UART_Receive_IT+0x74>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <UART_Receive_IT+0x82>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d106      	bne.n	8005dba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	e008      	b.n	8005dcc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4619      	mov	r1, r3
 8005de4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d15d      	bne.n	8005ea6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0220 	bic.w	r2, r2, #32
 8005df8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695a      	ldr	r2, [r3, #20]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0201 	bic.w	r2, r2, #1
 8005e18:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d135      	bne.n	8005e9c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	330c      	adds	r3, #12
 8005e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	e853 3f00 	ldrex	r3, [r3]
 8005e44:	613b      	str	r3, [r7, #16]
   return(result);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f023 0310 	bic.w	r3, r3, #16
 8005e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	330c      	adds	r3, #12
 8005e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e56:	623a      	str	r2, [r7, #32]
 8005e58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5a:	69f9      	ldr	r1, [r7, #28]
 8005e5c:	6a3a      	ldr	r2, [r7, #32]
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e5      	bne.n	8005e36 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	2b10      	cmp	r3, #16
 8005e76:	d10a      	bne.n	8005e8e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff fc4d 	bl	8005734 <HAL_UARTEx_RxEventCallback>
 8005e9a:	e002      	b.n	8005ea2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7fb fc35 	bl	800170c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	e002      	b.n	8005eac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e000      	b.n	8005eac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005eaa:	2302      	movs	r3, #2
  }
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3730      	adds	r7, #48	@ 0x30
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005eee:	f023 030c 	bic.w	r3, r3, #12
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6812      	ldr	r2, [r2, #0]
 8005ef6:	68b9      	ldr	r1, [r7, #8]
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a2c      	ldr	r2, [pc, #176]	@ (8005fc8 <UART_SetConfig+0x114>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d103      	bne.n	8005f24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f1c:	f7fe fd5a 	bl	80049d4 <HAL_RCC_GetPCLK2Freq>
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	e002      	b.n	8005f2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f24:	f7fe fd42 	bl	80049ac <HAL_RCC_GetPCLK1Freq>
 8005f28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	009a      	lsls	r2, r3, #2
 8005f34:	441a      	add	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f40:	4a22      	ldr	r2, [pc, #136]	@ (8005fcc <UART_SetConfig+0x118>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	0119      	lsls	r1, r3, #4
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	009a      	lsls	r2, r3, #2
 8005f54:	441a      	add	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f60:	4b1a      	ldr	r3, [pc, #104]	@ (8005fcc <UART_SetConfig+0x118>)
 8005f62:	fba3 0302 	umull	r0, r3, r3, r2
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	2064      	movs	r0, #100	@ 0x64
 8005f6a:	fb00 f303 	mul.w	r3, r0, r3
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	3332      	adds	r3, #50	@ 0x32
 8005f74:	4a15      	ldr	r2, [pc, #84]	@ (8005fcc <UART_SetConfig+0x118>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	095b      	lsrs	r3, r3, #5
 8005f7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f80:	4419      	add	r1, r3
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	009a      	lsls	r2, r3, #2
 8005f8c:	441a      	add	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f98:	4b0c      	ldr	r3, [pc, #48]	@ (8005fcc <UART_SetConfig+0x118>)
 8005f9a:	fba3 0302 	umull	r0, r3, r3, r2
 8005f9e:	095b      	lsrs	r3, r3, #5
 8005fa0:	2064      	movs	r0, #100	@ 0x64
 8005fa2:	fb00 f303 	mul.w	r3, r0, r3
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	3332      	adds	r3, #50	@ 0x32
 8005fac:	4a07      	ldr	r2, [pc, #28]	@ (8005fcc <UART_SetConfig+0x118>)
 8005fae:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb2:	095b      	lsrs	r3, r3, #5
 8005fb4:	f003 020f 	and.w	r2, r3, #15
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005fc0:	bf00      	nop
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40013800 	.word	0x40013800
 8005fcc:	51eb851f 	.word	0x51eb851f

08005fd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	4638      	mov	r0, r7
 8005fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr

08005fea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ffa:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005ffe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	b29a      	uxth	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	bc80      	pop	{r7}
 8006014:	4770      	bx	lr

08006016 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006016:	b480      	push	{r7}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800601e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006022:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	b29b      	uxth	r3, r3
 8006030:	43db      	mvns	r3, r3
 8006032:	b29b      	uxth	r3, r3
 8006034:	4013      	ands	r3, r2
 8006036:	b29a      	uxth	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	bc80      	pop	{r7}
 8006048:	4770      	bx	lr

0800604a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	460b      	mov	r3, r1
 8006054:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr

08006062 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006062:	b480      	push	{r7}
 8006064:	b085      	sub	sp, #20
 8006066:	af00      	add	r7, sp, #0
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	4638      	mov	r0, r7
 800606c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2201      	movs	r2, #1
 8006074:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr

0800609c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800609c:	b480      	push	{r7}
 800609e:	b09d      	sub	sp, #116	@ 0x74
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80060be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060c2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	78db      	ldrb	r3, [r3, #3]
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d81f      	bhi.n	800610e <USB_ActivateEndpoint+0x72>
 80060ce:	a201      	add	r2, pc, #4	@ (adr r2, 80060d4 <USB_ActivateEndpoint+0x38>)
 80060d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d4:	080060e5 	.word	0x080060e5
 80060d8:	08006101 	.word	0x08006101
 80060dc:	08006117 	.word	0x08006117
 80060e0:	080060f3 	.word	0x080060f3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80060e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80060e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80060f0:	e012      	b.n	8006118 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80060f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80060f6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80060fa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80060fe:	e00b      	b.n	8006118 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006100:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006104:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006108:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800610c:	e004      	b.n	8006118 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006114:	e000      	b.n	8006118 <USB_ActivateEndpoint+0x7c>
      break;
 8006116:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	441a      	add	r2, r3
 8006122:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006126:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800612a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800612e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006136:	b29b      	uxth	r3, r3
 8006138:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29b      	uxth	r3, r3
 8006148:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800614c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006150:	b29b      	uxth	r3, r3
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	7812      	ldrb	r2, [r2, #0]
 8006156:	4313      	orrs	r3, r2
 8006158:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	441a      	add	r2, r3
 8006166:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800616a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800616e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800617a:	b29b      	uxth	r3, r3
 800617c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	7b1b      	ldrb	r3, [r3, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f040 8178 	bne.w	8006478 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	785b      	ldrb	r3, [r3, #1]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 8084 	beq.w	800629a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	61bb      	str	r3, [r7, #24]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800619c:	b29b      	uxth	r3, r3
 800619e:	461a      	mov	r2, r3
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	4413      	add	r3, r2
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	011a      	lsls	r2, r3, #4
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061b4:	617b      	str	r3, [r7, #20]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	88db      	ldrh	r3, [r3, #6]
 80061ba:	085b      	lsrs	r3, r3, #1
 80061bc:	b29b      	uxth	r3, r3
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	827b      	strh	r3, [r7, #18]
 80061d4:	8a7b      	ldrh	r3, [r7, #18]
 80061d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d01b      	beq.n	8006216 <USB_ActivateEndpoint+0x17a>
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061f4:	823b      	strh	r3, [r7, #16]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	441a      	add	r2, r3
 8006200:	8a3b      	ldrh	r3, [r7, #16]
 8006202:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800620a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800620e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006212:	b29b      	uxth	r3, r3
 8006214:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	78db      	ldrb	r3, [r3, #3]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d020      	beq.n	8006260 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006230:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006234:	81bb      	strh	r3, [r7, #12]
 8006236:	89bb      	ldrh	r3, [r7, #12]
 8006238:	f083 0320 	eor.w	r3, r3, #32
 800623c:	81bb      	strh	r3, [r7, #12]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	441a      	add	r2, r3
 8006248:	89bb      	ldrh	r3, [r7, #12]
 800624a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800624e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800625a:	b29b      	uxth	r3, r3
 800625c:	8013      	strh	r3, [r2, #0]
 800625e:	e2d5      	b.n	800680c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	b29b      	uxth	r3, r3
 800626e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006272:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006276:	81fb      	strh	r3, [r7, #14]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	441a      	add	r2, r3
 8006282:	89fb      	ldrh	r3, [r7, #14]
 8006284:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006288:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800628c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006294:	b29b      	uxth	r3, r3
 8006296:	8013      	strh	r3, [r2, #0]
 8006298:	e2b8      	b.n	800680c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	633b      	str	r3, [r7, #48]	@ 0x30
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	461a      	mov	r2, r3
 80062a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062aa:	4413      	add	r3, r2
 80062ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	011a      	lsls	r2, r3, #4
 80062b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80062bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	88db      	ldrh	r3, [r3, #6]
 80062c2:	085b      	lsrs	r3, r3, #1
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062cc:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062d8:	b29b      	uxth	r3, r3
 80062da:	461a      	mov	r2, r3
 80062dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062de:	4413      	add	r3, r2
 80062e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	011a      	lsls	r2, r3, #4
 80062e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ea:	4413      	add	r3, r2
 80062ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80062f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006300:	801a      	strh	r2, [r3, #0]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b3e      	cmp	r3, #62	@ 0x3e
 8006308:	d91d      	bls.n	8006346 <USB_ActivateEndpoint+0x2aa>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 031f 	and.w	r3, r3, #31
 800631a:	2b00      	cmp	r3, #0
 800631c:	d102      	bne.n	8006324 <USB_ActivateEndpoint+0x288>
 800631e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006320:	3b01      	subs	r3, #1
 8006322:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	b29a      	uxth	r2, r3
 800632a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800632c:	b29b      	uxth	r3, r3
 800632e:	029b      	lsls	r3, r3, #10
 8006330:	b29b      	uxth	r3, r3
 8006332:	4313      	orrs	r3, r2
 8006334:	b29b      	uxth	r3, r3
 8006336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800633a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800633e:	b29a      	uxth	r2, r3
 8006340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	e026      	b.n	8006394 <USB_ActivateEndpoint+0x2f8>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <USB_ActivateEndpoint+0x2c8>
 800634e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	b29b      	uxth	r3, r3
 8006354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800635c:	b29a      	uxth	r2, r3
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	e017      	b.n	8006394 <USB_ActivateEndpoint+0x2f8>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	085b      	lsrs	r3, r3, #1
 800636a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <USB_ActivateEndpoint+0x2e2>
 8006378:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800637a:	3301      	adds	r3, #1
 800637c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b29a      	uxth	r2, r3
 8006384:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006386:	b29b      	uxth	r3, r3
 8006388:	029b      	lsls	r3, r3, #10
 800638a:	b29b      	uxth	r3, r3
 800638c:	4313      	orrs	r3, r2
 800638e:	b29a      	uxth	r2, r3
 8006390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006392:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80063a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80063a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d01b      	beq.n	80063e4 <USB_ActivateEndpoint+0x348>
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063c2:	843b      	strh	r3, [r7, #32]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	441a      	add	r2, r3
 80063ce:	8c3b      	ldrh	r3, [r7, #32]
 80063d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d124      	bne.n	8006436 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006402:	83bb      	strh	r3, [r7, #28]
 8006404:	8bbb      	ldrh	r3, [r7, #28]
 8006406:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800640a:	83bb      	strh	r3, [r7, #28]
 800640c:	8bbb      	ldrh	r3, [r7, #28]
 800640e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006412:	83bb      	strh	r3, [r7, #28]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	441a      	add	r2, r3
 800641e:	8bbb      	ldrh	r3, [r7, #28]
 8006420:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006424:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006428:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800642c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006430:	b29b      	uxth	r3, r3
 8006432:	8013      	strh	r3, [r2, #0]
 8006434:	e1ea      	b.n	800680c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	b29b      	uxth	r3, r3
 8006444:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800644c:	83fb      	strh	r3, [r7, #30]
 800644e:	8bfb      	ldrh	r3, [r7, #30]
 8006450:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006454:	83fb      	strh	r3, [r7, #30]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	441a      	add	r2, r3
 8006460:	8bfb      	ldrh	r3, [r7, #30]
 8006462:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006466:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800646a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800646e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006472:	b29b      	uxth	r3, r3
 8006474:	8013      	strh	r3, [r2, #0]
 8006476:	e1c9      	b.n	800680c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	78db      	ldrb	r3, [r3, #3]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d11e      	bne.n	80064be <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	881b      	ldrh	r3, [r3, #0]
 800648c:	b29b      	uxth	r3, r3
 800648e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006496:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	441a      	add	r2, r3
 80064a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80064a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064b0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80064b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	8013      	strh	r3, [r2, #0]
 80064bc:	e01d      	b.n	80064fa <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80064d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	441a      	add	r2, r3
 80064e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80064e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006504:	b29b      	uxth	r3, r3
 8006506:	461a      	mov	r2, r3
 8006508:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800650a:	4413      	add	r3, r2
 800650c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	011a      	lsls	r2, r3, #4
 8006514:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006516:	4413      	add	r3, r2
 8006518:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800651c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	891b      	ldrh	r3, [r3, #8]
 8006522:	085b      	lsrs	r3, r3, #1
 8006524:	b29b      	uxth	r3, r3
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800652c:	801a      	strh	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	657b      	str	r3, [r7, #84]	@ 0x54
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006538:	b29b      	uxth	r3, r3
 800653a:	461a      	mov	r2, r3
 800653c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800653e:	4413      	add	r3, r2
 8006540:	657b      	str	r3, [r7, #84]	@ 0x54
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	011a      	lsls	r2, r3, #4
 8006548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800654a:	4413      	add	r3, r2
 800654c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006550:	653b      	str	r3, [r7, #80]	@ 0x50
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	895b      	ldrh	r3, [r3, #10]
 8006556:	085b      	lsrs	r3, r3, #1
 8006558:	b29b      	uxth	r3, r3
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006560:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	785b      	ldrb	r3, [r3, #1]
 8006566:	2b00      	cmp	r3, #0
 8006568:	f040 8093 	bne.w	8006692 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800657c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01b      	beq.n	80065c0 <USB_ActivateEndpoint+0x524>
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	b29b      	uxth	r3, r3
 8006596:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800659a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800659e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	441a      	add	r2, r3
 80065aa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80065ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065bc:	b29b      	uxth	r3, r3
 80065be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80065ce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80065d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01b      	beq.n	8006610 <USB_ActivateEndpoint+0x574>
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ee:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	441a      	add	r2, r3
 80065fa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80065fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006600:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006604:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006608:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800660c:	b29b      	uxth	r3, r3
 800660e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	b29b      	uxth	r3, r3
 800661e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006626:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006628:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800662a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800662e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006630:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006632:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006636:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	441a      	add	r2, r3
 8006642:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006644:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006648:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800664c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006654:	b29b      	uxth	r3, r3
 8006656:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800666a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800666e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	441a      	add	r2, r3
 800667a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800667c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006680:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006684:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800668c:	b29b      	uxth	r3, r3
 800668e:	8013      	strh	r3, [r2, #0]
 8006690:	e0bc      	b.n	800680c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80066a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80066a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d01d      	beq.n	80066ea <USB_ActivateEndpoint+0x64e>
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	441a      	add	r2, r3
 80066d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80066d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80066fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80066fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	d01d      	beq.n	8006742 <USB_ActivateEndpoint+0x6a6>
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	b29b      	uxth	r3, r3
 8006714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800671c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	441a      	add	r2, r3
 800672a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800672e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006732:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800673a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800673e:	b29b      	uxth	r3, r3
 8006740:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	78db      	ldrb	r3, [r3, #3]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d024      	beq.n	8006794 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800675c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006760:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006764:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006768:	f083 0320 	eor.w	r3, r3, #32
 800676c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	441a      	add	r2, r3
 800677a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800677e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006782:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006786:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800678a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800678e:	b29b      	uxth	r3, r3
 8006790:	8013      	strh	r3, [r2, #0]
 8006792:	e01d      	b.n	80067d0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067aa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	441a      	add	r2, r3
 80067b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80067bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067e6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	441a      	add	r2, r3
 80067f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80067f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006808:	b29b      	uxth	r3, r3
 800680a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800680c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006810:	4618      	mov	r0, r3
 8006812:	3774      	adds	r7, #116	@ 0x74
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop

0800681c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800681c:	b480      	push	{r7}
 800681e:	b08d      	sub	sp, #52	@ 0x34
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	7b1b      	ldrb	r3, [r3, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	f040 808e 	bne.w	800694c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	785b      	ldrb	r3, [r3, #1]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d044      	beq.n	80068c2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	81bb      	strh	r3, [r7, #12]
 8006846:	89bb      	ldrh	r3, [r7, #12]
 8006848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01b      	beq.n	8006888 <USB_DeactivateEndpoint+0x6c>
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	b29b      	uxth	r3, r3
 800685e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006866:	817b      	strh	r3, [r7, #10]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	441a      	add	r2, r3
 8006872:	897b      	ldrh	r3, [r7, #10]
 8006874:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006878:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800687c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006880:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006884:	b29b      	uxth	r3, r3
 8006886:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800689a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800689e:	813b      	strh	r3, [r7, #8]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	441a      	add	r2, r3
 80068aa:	893b      	ldrh	r3, [r7, #8]
 80068ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068bc:	b29b      	uxth	r3, r3
 80068be:	8013      	strh	r3, [r2, #0]
 80068c0:	e192      	b.n	8006be8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	827b      	strh	r3, [r7, #18]
 80068d0:	8a7b      	ldrh	r3, [r7, #18]
 80068d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d01b      	beq.n	8006912 <USB_DeactivateEndpoint+0xf6>
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f0:	823b      	strh	r3, [r7, #16]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	441a      	add	r2, r3
 80068fc:	8a3b      	ldrh	r3, [r7, #16]
 80068fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006902:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006906:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800690a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800690e:	b29b      	uxth	r3, r3
 8006910:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b29b      	uxth	r3, r3
 8006920:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006928:	81fb      	strh	r3, [r7, #14]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	441a      	add	r2, r3
 8006934:	89fb      	ldrh	r3, [r7, #14]
 8006936:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800693a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800693e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006946:	b29b      	uxth	r3, r3
 8006948:	8013      	strh	r3, [r2, #0]
 800694a:	e14d      	b.n	8006be8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	2b00      	cmp	r3, #0
 8006952:	f040 80a5 	bne.w	8006aa0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	843b      	strh	r3, [r7, #32]
 8006964:	8c3b      	ldrh	r3, [r7, #32]
 8006966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d01b      	beq.n	80069a6 <USB_DeactivateEndpoint+0x18a>
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b29b      	uxth	r3, r3
 800697c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006984:	83fb      	strh	r3, [r7, #30]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	441a      	add	r2, r3
 8006990:	8bfb      	ldrh	r3, [r7, #30]
 8006992:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800699a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800699e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	83bb      	strh	r3, [r7, #28]
 80069b4:	8bbb      	ldrh	r3, [r7, #28]
 80069b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d01b      	beq.n	80069f6 <USB_DeactivateEndpoint+0x1da>
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d4:	837b      	strh	r3, [r7, #26]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	441a      	add	r2, r3
 80069e0:	8b7b      	ldrh	r3, [r7, #26]
 80069e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a0c:	833b      	strh	r3, [r7, #24]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	441a      	add	r2, r3
 8006a18:	8b3b      	ldrh	r3, [r7, #24]
 8006a1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a26:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a44:	82fb      	strh	r3, [r7, #22]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	441a      	add	r2, r3
 8006a50:	8afb      	ldrh	r3, [r7, #22]
 8006a52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a7c:	82bb      	strh	r3, [r7, #20]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	441a      	add	r2, r3
 8006a88:	8abb      	ldrh	r3, [r7, #20]
 8006a8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	8013      	strh	r3, [r2, #0]
 8006a9e:	e0a3      	b.n	8006be8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006aae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006ab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d01b      	beq.n	8006af0 <USB_DeactivateEndpoint+0x2d4>
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ace:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	441a      	add	r2, r3
 8006ada:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006adc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ae0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ae4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006afe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d01b      	beq.n	8006b40 <USB_DeactivateEndpoint+0x324>
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b1e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	441a      	add	r2, r3
 8006b2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006b2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b56:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	441a      	add	r2, r3
 8006b62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b8e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	441a      	add	r2, r3
 8006b9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ba0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	441a      	add	r2, r3
 8006bd2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006bd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3734      	adds	r7, #52	@ 0x34
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bc80      	pop	{r7}
 8006bf2:	4770      	bx	lr

08006bf4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b0c2      	sub	sp, #264	@ 0x108
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c02:	6018      	str	r0, [r3, #0]
 8006c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c0c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	785b      	ldrb	r3, [r3, #1]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	f040 86b7 	bne.w	800798e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	699a      	ldr	r2, [r3, #24]
 8006c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d908      	bls.n	8006c4e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006c4c:	e007      	b.n	8006c5e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	7b1b      	ldrb	r3, [r3, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d13a      	bne.n	8006ce4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6959      	ldr	r1, [r3, #20]
 8006c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	88da      	ldrh	r2, [r3, #6]
 8006c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c90:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c94:	6800      	ldr	r0, [r0, #0]
 8006c96:	f001 fc9c 	bl	80085d2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	613b      	str	r3, [r7, #16]
 8006ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006caa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	4413      	add	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	011a      	lsls	r2, r3, #4
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006cd4:	60fb      	str	r3, [r7, #12]
 8006cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	801a      	strh	r2, [r3, #0]
 8006ce0:	f000 be1f 	b.w	8007922 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	78db      	ldrb	r3, [r3, #3]
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	f040 8462 	bne.w	80075ba <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6a1a      	ldr	r2, [r3, #32]
 8006d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	f240 83df 	bls.w	80074d2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	441a      	add	r2, r3
 8006d58:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006d5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d64:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6a1a      	ldr	r2, [r3, #32]
 8006d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d80:	1ad2      	subs	r2, r2, r3
 8006d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 81c7 	beq.w	8007144 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	785b      	ldrb	r3, [r3, #1]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d177      	bne.n	8006ec2 <USB_EPStartXfer+0x2ce>
 8006dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	461a      	mov	r2, r3
 8006df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df2:	4413      	add	r3, r2
 8006df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	011a      	lsls	r2, r3, #4
 8006e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e06:	4413      	add	r3, r2
 8006e08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1c:	801a      	strh	r2, [r3, #0]
 8006e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e22:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e24:	d921      	bls.n	8006e6a <USB_EPStartXfer+0x276>
 8006e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2a:	095b      	lsrs	r3, r3, #5
 8006e2c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e34:	f003 031f 	and.w	r3, r3, #31
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d104      	bne.n	8006e46 <USB_EPStartXfer+0x252>
 8006e3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006e40:	3b01      	subs	r3, #1
 8006e42:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	029b      	lsls	r3, r3, #10
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	4313      	orrs	r3, r2
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e66:	801a      	strh	r2, [r3, #0]
 8006e68:	e050      	b.n	8006f0c <USB_EPStartXfer+0x318>
 8006e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10a      	bne.n	8006e88 <USB_EPStartXfer+0x294>
 8006e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	801a      	strh	r2, [r3, #0]
 8006e86:	e041      	b.n	8006f0c <USB_EPStartXfer+0x318>
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d004      	beq.n	8006ea8 <USB_EPStartXfer+0x2b4>
 8006e9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	029b      	lsls	r3, r3, #10
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebe:	801a      	strh	r2, [r3, #0]
 8006ec0:	e024      	b.n	8006f0c <USB_EPStartXfer+0x318>
 8006ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	785b      	ldrb	r3, [r3, #1]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d11c      	bne.n	8006f0c <USB_EPStartXfer+0x318>
 8006ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee6:	4413      	add	r3, r2
 8006ee8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	011a      	lsls	r2, r3, #4
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efa:	4413      	add	r3, r2
 8006efc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	895b      	ldrh	r3, [r3, #10]
 8006f18:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6959      	ldr	r1, [r3, #20]
 8006f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f32:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f36:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f3a:	6800      	ldr	r0, [r0, #0]
 8006f3c:	f001 fb49 	bl	80085d2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	695a      	ldr	r2, [r3, #20]
 8006f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f50:	441a      	add	r2, r3
 8006f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6a1a      	ldr	r2, [r3, #32]
 8006f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d90f      	bls.n	8006f9a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6a1a      	ldr	r2, [r3, #32]
 8006f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f8a:	1ad2      	subs	r2, r2, r3
 8006f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	621a      	str	r2, [r3, #32]
 8006f98:	e00e      	b.n	8006fb8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	785b      	ldrb	r3, [r3, #1]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d177      	bne.n	80070b8 <USB_EPStartXfer+0x4c4>
 8006fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	61bb      	str	r3, [r7, #24]
 8006fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	4413      	add	r3, r2
 8006fea:	61bb      	str	r3, [r7, #24]
 8006fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	011a      	lsls	r2, r3, #4
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	b29b      	uxth	r3, r3
 800700a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800700e:	b29a      	uxth	r2, r3
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	801a      	strh	r2, [r3, #0]
 8007014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007018:	2b3e      	cmp	r3, #62	@ 0x3e
 800701a:	d921      	bls.n	8007060 <USB_EPStartXfer+0x46c>
 800701c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007020:	095b      	lsrs	r3, r3, #5
 8007022:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702a:	f003 031f 	and.w	r3, r3, #31
 800702e:	2b00      	cmp	r3, #0
 8007030:	d104      	bne.n	800703c <USB_EPStartXfer+0x448>
 8007032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007036:	3b01      	subs	r3, #1
 8007038:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	881b      	ldrh	r3, [r3, #0]
 8007040:	b29a      	uxth	r2, r3
 8007042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007046:	b29b      	uxth	r3, r3
 8007048:	029b      	lsls	r3, r3, #10
 800704a:	b29b      	uxth	r3, r3
 800704c:	4313      	orrs	r3, r2
 800704e:	b29b      	uxth	r3, r3
 8007050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007058:	b29a      	uxth	r2, r3
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	801a      	strh	r2, [r3, #0]
 800705e:	e056      	b.n	800710e <USB_EPStartXfer+0x51a>
 8007060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10a      	bne.n	800707e <USB_EPStartXfer+0x48a>
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	b29b      	uxth	r3, r3
 800706e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007076:	b29a      	uxth	r2, r3
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	801a      	strh	r2, [r3, #0]
 800707c:	e047      	b.n	800710e <USB_EPStartXfer+0x51a>
 800707e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007082:	085b      	lsrs	r3, r3, #1
 8007084:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	2b00      	cmp	r3, #0
 8007092:	d004      	beq.n	800709e <USB_EPStartXfer+0x4aa>
 8007094:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007098:	3301      	adds	r3, #1
 800709a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	029b      	lsls	r3, r3, #10
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	4313      	orrs	r3, r2
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	801a      	strh	r2, [r3, #0]
 80070b6:	e02a      	b.n	800710e <USB_EPStartXfer+0x51a>
 80070b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	785b      	ldrb	r3, [r3, #1]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d122      	bne.n	800710e <USB_EPStartXfer+0x51a>
 80070c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	623b      	str	r3, [r7, #32]
 80070d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	461a      	mov	r2, r3
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	4413      	add	r3, r2
 80070ea:	623b      	str	r3, [r7, #32]
 80070ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	011a      	lsls	r2, r3, #4
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	4413      	add	r3, r2
 80070fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007102:	61fb      	str	r3, [r7, #28]
 8007104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007108:	b29a      	uxth	r2, r3
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800710e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	891b      	ldrh	r3, [r3, #8]
 800711a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800711e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6959      	ldr	r1, [r3, #20]
 800712a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712e:	b29b      	uxth	r3, r3
 8007130:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007134:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007138:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800713c:	6800      	ldr	r0, [r0, #0]
 800713e:	f001 fa48 	bl	80085d2 <USB_WritePMA>
 8007142:	e3ee      	b.n	8007922 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	785b      	ldrb	r3, [r3, #1]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d177      	bne.n	8007244 <USB_EPStartXfer+0x650>
 8007154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007158:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800716e:	b29b      	uxth	r3, r3
 8007170:	461a      	mov	r2, r3
 8007172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007174:	4413      	add	r3, r2
 8007176:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	011a      	lsls	r2, r3, #4
 8007186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007188:	4413      	add	r3, r2
 800718a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800718e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	b29b      	uxth	r3, r3
 8007196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800719a:	b29a      	uxth	r2, r3
 800719c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800719e:	801a      	strh	r2, [r3, #0]
 80071a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80071a6:	d921      	bls.n	80071ec <USB_EPStartXfer+0x5f8>
 80071a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ac:	095b      	lsrs	r3, r3, #5
 80071ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80071b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b6:	f003 031f 	and.w	r3, r3, #31
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d104      	bne.n	80071c8 <USB_EPStartXfer+0x5d4>
 80071be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071c2:	3b01      	subs	r3, #1
 80071c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80071c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	029b      	lsls	r3, r3, #10
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	4313      	orrs	r3, r2
 80071da:	b29b      	uxth	r3, r3
 80071dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071e8:	801a      	strh	r2, [r3, #0]
 80071ea:	e056      	b.n	800729a <USB_EPStartXfer+0x6a6>
 80071ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <USB_EPStartXfer+0x616>
 80071f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007202:	b29a      	uxth	r2, r3
 8007204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007206:	801a      	strh	r2, [r3, #0]
 8007208:	e047      	b.n	800729a <USB_EPStartXfer+0x6a6>
 800720a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720e:	085b      	lsrs	r3, r3, #1
 8007210:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <USB_EPStartXfer+0x636>
 8007220:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007224:	3301      	adds	r3, #1
 8007226:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800722a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	b29a      	uxth	r2, r3
 8007230:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007234:	b29b      	uxth	r3, r3
 8007236:	029b      	lsls	r3, r3, #10
 8007238:	b29b      	uxth	r3, r3
 800723a:	4313      	orrs	r3, r2
 800723c:	b29a      	uxth	r2, r3
 800723e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007240:	801a      	strh	r2, [r3, #0]
 8007242:	e02a      	b.n	800729a <USB_EPStartXfer+0x6a6>
 8007244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	785b      	ldrb	r3, [r3, #1]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d122      	bne.n	800729a <USB_EPStartXfer+0x6a6>
 8007254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007258:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007264:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800726e:	b29b      	uxth	r3, r3
 8007270:	461a      	mov	r2, r3
 8007272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007274:	4413      	add	r3, r2
 8007276:	653b      	str	r3, [r7, #80]	@ 0x50
 8007278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800727c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	011a      	lsls	r2, r3, #4
 8007286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007288:	4413      	add	r3, r2
 800728a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800728e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007294:	b29a      	uxth	r2, r3
 8007296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007298:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800729a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	891b      	ldrh	r3, [r3, #8]
 80072a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6959      	ldr	r1, [r3, #20]
 80072b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80072c0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80072c4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80072c8:	6800      	ldr	r0, [r0, #0]
 80072ca:	f001 f982 	bl	80085d2 <USB_WritePMA>
            ep->xfer_buff += len;
 80072ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	695a      	ldr	r2, [r3, #20]
 80072da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072de:	441a      	add	r2, r3
 80072e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80072ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6a1a      	ldr	r2, [r3, #32]
 80072f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	429a      	cmp	r2, r3
 8007306:	d90f      	bls.n	8007328 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6a1a      	ldr	r2, [r3, #32]
 8007314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007318:	1ad2      	subs	r2, r2, r3
 800731a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	621a      	str	r2, [r3, #32]
 8007326:	e00e      	b.n	8007346 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2200      	movs	r2, #0
 8007344:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	643b      	str	r3, [r7, #64]	@ 0x40
 8007352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	785b      	ldrb	r3, [r3, #1]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d177      	bne.n	8007452 <USB_EPStartXfer+0x85e>
 8007362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800736e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800737c:	b29b      	uxth	r3, r3
 800737e:	461a      	mov	r2, r3
 8007380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007382:	4413      	add	r3, r2
 8007384:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	011a      	lsls	r2, r3, #4
 8007394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007396:	4413      	add	r3, r2
 8007398:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800739c:	637b      	str	r3, [r7, #52]	@ 0x34
 800739e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ac:	801a      	strh	r2, [r3, #0]
 80073ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80073b4:	d921      	bls.n	80073fa <USB_EPStartXfer+0x806>
 80073b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ba:	095b      	lsrs	r3, r3, #5
 80073bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80073c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c4:	f003 031f 	and.w	r3, r3, #31
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d104      	bne.n	80073d6 <USB_EPStartXfer+0x7e2>
 80073cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d0:	3b01      	subs	r3, #1
 80073d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80073d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29a      	uxth	r2, r3
 80073dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	029b      	lsls	r3, r3, #10
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	4313      	orrs	r3, r2
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f6:	801a      	strh	r2, [r3, #0]
 80073f8:	e050      	b.n	800749c <USB_EPStartXfer+0x8a8>
 80073fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10a      	bne.n	8007418 <USB_EPStartXfer+0x824>
 8007402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	b29b      	uxth	r3, r3
 8007408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800740c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007410:	b29a      	uxth	r2, r3
 8007412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007414:	801a      	strh	r2, [r3, #0]
 8007416:	e041      	b.n	800749c <USB_EPStartXfer+0x8a8>
 8007418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800741c:	085b      	lsrs	r3, r3, #1
 800741e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d004      	beq.n	8007438 <USB_EPStartXfer+0x844>
 800742e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007432:	3301      	adds	r3, #1
 8007434:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	b29a      	uxth	r2, r3
 800743e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007442:	b29b      	uxth	r3, r3
 8007444:	029b      	lsls	r3, r3, #10
 8007446:	b29b      	uxth	r3, r3
 8007448:	4313      	orrs	r3, r2
 800744a:	b29a      	uxth	r2, r3
 800744c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800744e:	801a      	strh	r2, [r3, #0]
 8007450:	e024      	b.n	800749c <USB_EPStartXfer+0x8a8>
 8007452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	785b      	ldrb	r3, [r3, #1]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d11c      	bne.n	800749c <USB_EPStartXfer+0x8a8>
 8007462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007466:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007470:	b29b      	uxth	r3, r3
 8007472:	461a      	mov	r2, r3
 8007474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007476:	4413      	add	r3, r2
 8007478:	643b      	str	r3, [r7, #64]	@ 0x40
 800747a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	011a      	lsls	r2, r3, #4
 8007488:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800748a:	4413      	add	r3, r2
 800748c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007496:	b29a      	uxth	r2, r3
 8007498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800749a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800749c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	895b      	ldrh	r3, [r3, #10]
 80074a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6959      	ldr	r1, [r3, #20]
 80074b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074bc:	b29b      	uxth	r3, r3
 80074be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074c2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074c6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074ca:	6800      	ldr	r0, [r0, #0]
 80074cc:	f001 f881 	bl	80085d2 <USB_WritePMA>
 80074d0:	e227      	b.n	8007922 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80074d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80074e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007508:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800750c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007510:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	441a      	add	r2, r3
 8007526:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800752a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800752e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800753a:	b29b      	uxth	r3, r3
 800753c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800753e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007542:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800754a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007558:	b29b      	uxth	r3, r3
 800755a:	461a      	mov	r2, r3
 800755c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800755e:	4413      	add	r3, r2
 8007560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	011a      	lsls	r2, r3, #4
 8007570:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007572:	4413      	add	r3, r2
 8007574:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007578:	65bb      	str	r3, [r7, #88]	@ 0x58
 800757a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800757e:	b29a      	uxth	r2, r3
 8007580:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007582:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	891b      	ldrh	r3, [r3, #8]
 8007590:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6959      	ldr	r1, [r3, #20]
 80075a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075aa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80075ae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80075b2:	6800      	ldr	r0, [r0, #0]
 80075b4:	f001 f80d 	bl	80085d2 <USB_WritePMA>
 80075b8:	e1b3      	b.n	8007922 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80075ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6a1a      	ldr	r2, [r3, #32]
 80075c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ca:	1ad2      	subs	r2, r2, r3
 80075cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80075d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 80c6 	beq.w	800778c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007604:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	673b      	str	r3, [r7, #112]	@ 0x70
 800760c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	785b      	ldrb	r3, [r3, #1]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d177      	bne.n	800770c <USB_EPStartXfer+0xb18>
 800761c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007620:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007636:	b29b      	uxth	r3, r3
 8007638:	461a      	mov	r2, r3
 800763a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800763c:	4413      	add	r3, r2
 800763e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	011a      	lsls	r2, r3, #4
 800764e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007650:	4413      	add	r3, r2
 8007652:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007656:	667b      	str	r3, [r7, #100]	@ 0x64
 8007658:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	b29b      	uxth	r3, r3
 800765e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007662:	b29a      	uxth	r2, r3
 8007664:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007666:	801a      	strh	r2, [r3, #0]
 8007668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800766c:	2b3e      	cmp	r3, #62	@ 0x3e
 800766e:	d921      	bls.n	80076b4 <USB_EPStartXfer+0xac0>
 8007670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007674:	095b      	lsrs	r3, r3, #5
 8007676:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800767a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767e:	f003 031f 	and.w	r3, r3, #31
 8007682:	2b00      	cmp	r3, #0
 8007684:	d104      	bne.n	8007690 <USB_EPStartXfer+0xa9c>
 8007686:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800768a:	3b01      	subs	r3, #1
 800768c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007690:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	b29a      	uxth	r2, r3
 8007696:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800769a:	b29b      	uxth	r3, r3
 800769c:	029b      	lsls	r3, r3, #10
 800769e:	b29b      	uxth	r3, r3
 80076a0:	4313      	orrs	r3, r2
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076b0:	801a      	strh	r2, [r3, #0]
 80076b2:	e050      	b.n	8007756 <USB_EPStartXfer+0xb62>
 80076b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10a      	bne.n	80076d2 <USB_EPStartXfer+0xade>
 80076bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076ce:	801a      	strh	r2, [r3, #0]
 80076d0:	e041      	b.n	8007756 <USB_EPStartXfer+0xb62>
 80076d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d6:	085b      	lsrs	r3, r3, #1
 80076d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80076dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <USB_EPStartXfer+0xafe>
 80076e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80076ec:	3301      	adds	r3, #1
 80076ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80076f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	029b      	lsls	r3, r3, #10
 8007700:	b29b      	uxth	r3, r3
 8007702:	4313      	orrs	r3, r2
 8007704:	b29a      	uxth	r2, r3
 8007706:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007708:	801a      	strh	r2, [r3, #0]
 800770a:	e024      	b.n	8007756 <USB_EPStartXfer+0xb62>
 800770c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	785b      	ldrb	r3, [r3, #1]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d11c      	bne.n	8007756 <USB_EPStartXfer+0xb62>
 800771c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007720:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800772a:	b29b      	uxth	r3, r3
 800772c:	461a      	mov	r2, r3
 800772e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007730:	4413      	add	r3, r2
 8007732:	673b      	str	r3, [r7, #112]	@ 0x70
 8007734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	011a      	lsls	r2, r3, #4
 8007742:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007744:	4413      	add	r3, r2
 8007746:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800774a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800774c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007750:	b29a      	uxth	r2, r3
 8007752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007754:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800775a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	895b      	ldrh	r3, [r3, #10]
 8007762:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800776a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6959      	ldr	r1, [r3, #20]
 8007772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007776:	b29b      	uxth	r3, r3
 8007778:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800777c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007780:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007784:	6800      	ldr	r0, [r0, #0]
 8007786:	f000 ff24 	bl	80085d2 <USB_WritePMA>
 800778a:	e0ca      	b.n	8007922 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800778c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	785b      	ldrb	r3, [r3, #1]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d177      	bne.n	800788c <USB_EPStartXfer+0xc98>
 800779c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	461a      	mov	r2, r3
 80077ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077bc:	4413      	add	r3, r2
 80077be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	011a      	lsls	r2, r3, #4
 80077ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077d0:	4413      	add	r3, r2
 80077d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80077d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077e6:	801a      	strh	r2, [r3, #0]
 80077e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80077ee:	d921      	bls.n	8007834 <USB_EPStartXfer+0xc40>
 80077f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f4:	095b      	lsrs	r3, r3, #5
 80077f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80077fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077fe:	f003 031f 	and.w	r3, r3, #31
 8007802:	2b00      	cmp	r3, #0
 8007804:	d104      	bne.n	8007810 <USB_EPStartXfer+0xc1c>
 8007806:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800780a:	3b01      	subs	r3, #1
 800780c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007810:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	b29a      	uxth	r2, r3
 8007816:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800781a:	b29b      	uxth	r3, r3
 800781c:	029b      	lsls	r3, r3, #10
 800781e:	b29b      	uxth	r3, r3
 8007820:	4313      	orrs	r3, r2
 8007822:	b29b      	uxth	r3, r3
 8007824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800782c:	b29a      	uxth	r2, r3
 800782e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007830:	801a      	strh	r2, [r3, #0]
 8007832:	e05c      	b.n	80078ee <USB_EPStartXfer+0xcfa>
 8007834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10a      	bne.n	8007852 <USB_EPStartXfer+0xc5e>
 800783c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800783e:	881b      	ldrh	r3, [r3, #0]
 8007840:	b29b      	uxth	r3, r3
 8007842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800784a:	b29a      	uxth	r2, r3
 800784c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800784e:	801a      	strh	r2, [r3, #0]
 8007850:	e04d      	b.n	80078ee <USB_EPStartXfer+0xcfa>
 8007852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007856:	085b      	lsrs	r3, r3, #1
 8007858:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800785c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b00      	cmp	r3, #0
 8007866:	d004      	beq.n	8007872 <USB_EPStartXfer+0xc7e>
 8007868:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800786c:	3301      	adds	r3, #1
 800786e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007872:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	b29a      	uxth	r2, r3
 8007878:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800787c:	b29b      	uxth	r3, r3
 800787e:	029b      	lsls	r3, r3, #10
 8007880:	b29b      	uxth	r3, r3
 8007882:	4313      	orrs	r3, r2
 8007884:	b29a      	uxth	r2, r3
 8007886:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007888:	801a      	strh	r2, [r3, #0]
 800788a:	e030      	b.n	80078ee <USB_EPStartXfer+0xcfa>
 800788c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	785b      	ldrb	r3, [r3, #1]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d128      	bne.n	80078ee <USB_EPStartXfer+0xcfa>
 800789c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	461a      	mov	r2, r3
 80078bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078c0:	4413      	add	r3, r2
 80078c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	011a      	lsls	r2, r3, #4
 80078d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078d8:	4413      	add	r3, r2
 80078da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80078de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80078e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80078ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80078ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	891b      	ldrh	r3, [r3, #8]
 80078fa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6959      	ldr	r1, [r3, #20]
 800790a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790e:	b29b      	uxth	r3, r3
 8007910:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007914:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007918:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800791c:	6800      	ldr	r0, [r0, #0]
 800791e:	f000 fe58 	bl	80085d2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007926:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	b29b      	uxth	r3, r3
 8007940:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007944:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007948:	817b      	strh	r3, [r7, #10]
 800794a:	897b      	ldrh	r3, [r7, #10]
 800794c:	f083 0310 	eor.w	r3, r3, #16
 8007950:	817b      	strh	r3, [r7, #10]
 8007952:	897b      	ldrh	r3, [r7, #10]
 8007954:	f083 0320 	eor.w	r3, r3, #32
 8007958:	817b      	strh	r3, [r7, #10]
 800795a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800795e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	441a      	add	r2, r3
 8007974:	897b      	ldrh	r3, [r7, #10]
 8007976:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800797a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800797e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007986:	b29b      	uxth	r3, r3
 8007988:	8013      	strh	r3, [r2, #0]
 800798a:	f000 bcde 	b.w	800834a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800798e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	7b1b      	ldrb	r3, [r3, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	f040 80bb 	bne.w	8007b16 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80079a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	699a      	ldr	r2, [r3, #24]
 80079ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d917      	bls.n	80079ec <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80079bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80079cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	699a      	ldr	r2, [r3, #24]
 80079d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079dc:	1ad2      	subs	r2, r2, r3
 80079de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	619a      	str	r2, [r3, #24]
 80079ea:	e00e      	b.n	8007a0a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80079ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80079fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2200      	movs	r2, #0
 8007a08:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a2e:	4413      	add	r3, r2
 8007a30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	011a      	lsls	r2, r3, #4
 8007a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a46:	4413      	add	r3, r2
 8007a48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a62:	801a      	strh	r2, [r3, #0]
 8007a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a68:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a6a:	d924      	bls.n	8007ab6 <USB_EPStartXfer+0xec2>
 8007a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a70:	095b      	lsrs	r3, r3, #5
 8007a72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a7a:	f003 031f 	and.w	r3, r3, #31
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d104      	bne.n	8007a8c <USB_EPStartXfer+0xe98>
 8007a82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007a86:	3b01      	subs	r3, #1
 8007a88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	029b      	lsls	r3, r3, #10
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ab0:	801a      	strh	r2, [r3, #0]
 8007ab2:	f000 bc10 	b.w	80082d6 <USB_EPStartXfer+0x16e2>
 8007ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10c      	bne.n	8007ad8 <USB_EPStartXfer+0xee4>
 8007abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ac2:	881b      	ldrh	r3, [r3, #0]
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ad4:	801a      	strh	r2, [r3, #0]
 8007ad6:	e3fe      	b.n	80082d6 <USB_EPStartXfer+0x16e2>
 8007ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007adc:	085b      	lsrs	r3, r3, #1
 8007ade:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d004      	beq.n	8007af8 <USB_EPStartXfer+0xf04>
 8007aee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007af2:	3301      	adds	r3, #1
 8007af4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007af8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	029b      	lsls	r3, r3, #10
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b12:	801a      	strh	r2, [r3, #0]
 8007b14:	e3df      	b.n	80082d6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	78db      	ldrb	r3, [r3, #3]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	f040 8218 	bne.w	8007f58 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	785b      	ldrb	r3, [r3, #1]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f040 809d 	bne.w	8007c74 <USB_EPStartXfer+0x1080>
 8007b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	461a      	mov	r2, r3
 8007b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b5e:	4413      	add	r3, r2
 8007b60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	011a      	lsls	r2, r3, #4
 8007b72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b76:	4413      	add	r3, r2
 8007b78:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b92:	801a      	strh	r2, [r3, #0]
 8007b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ba2:	d92b      	bls.n	8007bfc <USB_EPStartXfer+0x1008>
 8007ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	095b      	lsrs	r3, r3, #5
 8007bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f003 031f 	and.w	r3, r3, #31
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d104      	bne.n	8007bd4 <USB_EPStartXfer+0xfe0>
 8007bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	029b      	lsls	r3, r3, #10
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	4313      	orrs	r3, r2
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007bf8:	801a      	strh	r2, [r3, #0]
 8007bfa:	e070      	b.n	8007cde <USB_EPStartXfer+0x10ea>
 8007bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10c      	bne.n	8007c26 <USB_EPStartXfer+0x1032>
 8007c0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c22:	801a      	strh	r2, [r3, #0]
 8007c24:	e05b      	b.n	8007cde <USB_EPStartXfer+0x10ea>
 8007c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	085b      	lsrs	r3, r3, #1
 8007c34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d004      	beq.n	8007c56 <USB_EPStartXfer+0x1062>
 8007c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c50:	3301      	adds	r3, #1
 8007c52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	029b      	lsls	r3, r3, #10
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c70:	801a      	strh	r2, [r3, #0]
 8007c72:	e034      	b.n	8007cde <USB_EPStartXfer+0x10ea>
 8007c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	785b      	ldrb	r3, [r3, #1]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d12c      	bne.n	8007cde <USB_EPStartXfer+0x10ea>
 8007c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ca8:	4413      	add	r3, r2
 8007caa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	011a      	lsls	r2, r3, #4
 8007cbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007cdc:	801a      	strh	r2, [r3, #0]
 8007cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	785b      	ldrb	r3, [r3, #1]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f040 809d 	bne.w	8007e38 <USB_EPStartXfer+0x1244>
 8007cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d22:	4413      	add	r3, r2
 8007d24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	011a      	lsls	r2, r3, #4
 8007d36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d56:	801a      	strh	r2, [r3, #0]
 8007d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d66:	d92b      	bls.n	8007dc0 <USB_EPStartXfer+0x11cc>
 8007d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	095b      	lsrs	r3, r3, #5
 8007d76:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	f003 031f 	and.w	r3, r3, #31
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d104      	bne.n	8007d98 <USB_EPStartXfer+0x11a4>
 8007d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d92:	3b01      	subs	r3, #1
 8007d94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	029b      	lsls	r3, r3, #10
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	4313      	orrs	r3, r2
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dbc:	801a      	strh	r2, [r3, #0]
 8007dbe:	e069      	b.n	8007e94 <USB_EPStartXfer+0x12a0>
 8007dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10c      	bne.n	8007dea <USB_EPStartXfer+0x11f6>
 8007dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007de6:	801a      	strh	r2, [r3, #0]
 8007de8:	e054      	b.n	8007e94 <USB_EPStartXfer+0x12a0>
 8007dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	085b      	lsrs	r3, r3, #1
 8007df8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d004      	beq.n	8007e1a <USB_EPStartXfer+0x1226>
 8007e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e14:	3301      	adds	r3, #1
 8007e16:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	029b      	lsls	r3, r3, #10
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e34:	801a      	strh	r2, [r3, #0]
 8007e36:	e02d      	b.n	8007e94 <USB_EPStartXfer+0x12a0>
 8007e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	785b      	ldrb	r3, [r3, #1]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d125      	bne.n	8007e94 <USB_EPStartXfer+0x12a0>
 8007e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	461a      	mov	r2, r3
 8007e5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007e5e:	4413      	add	r3, r2
 8007e60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	011a      	lsls	r2, r3, #4
 8007e72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007e76:	4413      	add	r3, r2
 8007e78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e92:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	69db      	ldr	r3, [r3, #28]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 8218 	beq.w	80082d6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ec6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d005      	beq.n	8007ede <USB_EPStartXfer+0x12ea>
 8007ed2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10d      	bne.n	8007efa <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007ede:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f040 81f5 	bne.w	80082d6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007eec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f040 81ee 	bne.w	80082d6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f20:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	441a      	add	r2, r3
 8007f3e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007f42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	8013      	strh	r3, [r2, #0]
 8007f56:	e1be      	b.n	80082d6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	78db      	ldrb	r3, [r3, #3]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	f040 81b4 	bne.w	80082d2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	699a      	ldr	r2, [r3, #24]
 8007f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d917      	bls.n	8007fb6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	699a      	ldr	r2, [r3, #24]
 8007fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa6:	1ad2      	subs	r2, r2, r3
 8007fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	619a      	str	r2, [r3, #24]
 8007fb4:	e00e      	b.n	8007fd4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	785b      	ldrb	r3, [r3, #1]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f040 8085 	bne.w	80080f0 <USB_EPStartXfer+0x14fc>
 8007fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008002:	b29b      	uxth	r3, r3
 8008004:	461a      	mov	r2, r3
 8008006:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800800a:	4413      	add	r3, r2
 800800c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	011a      	lsls	r2, r3, #4
 800801e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008022:	4413      	add	r3, r2
 8008024:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008028:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800802c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008038:	b29a      	uxth	r2, r3
 800803a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800803e:	801a      	strh	r2, [r3, #0]
 8008040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008044:	2b3e      	cmp	r3, #62	@ 0x3e
 8008046:	d923      	bls.n	8008090 <USB_EPStartXfer+0x149c>
 8008048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800804c:	095b      	lsrs	r3, r3, #5
 800804e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008056:	f003 031f 	and.w	r3, r3, #31
 800805a:	2b00      	cmp	r3, #0
 800805c:	d104      	bne.n	8008068 <USB_EPStartXfer+0x1474>
 800805e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008062:	3b01      	subs	r3, #1
 8008064:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008068:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29a      	uxth	r2, r3
 8008070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008074:	b29b      	uxth	r3, r3
 8008076:	029b      	lsls	r3, r3, #10
 8008078:	b29b      	uxth	r3, r3
 800807a:	4313      	orrs	r3, r2
 800807c:	b29b      	uxth	r3, r3
 800807e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008086:	b29a      	uxth	r2, r3
 8008088:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800808c:	801a      	strh	r2, [r3, #0]
 800808e:	e060      	b.n	8008152 <USB_EPStartXfer+0x155e>
 8008090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10c      	bne.n	80080b2 <USB_EPStartXfer+0x14be>
 8008098:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	b29b      	uxth	r3, r3
 80080a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80080ae:	801a      	strh	r2, [r3, #0]
 80080b0:	e04f      	b.n	8008152 <USB_EPStartXfer+0x155e>
 80080b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b6:	085b      	lsrs	r3, r3, #1
 80080b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80080bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d004      	beq.n	80080d2 <USB_EPStartXfer+0x14de>
 80080c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080cc:	3301      	adds	r3, #1
 80080ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80080d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80080d6:	881b      	ldrh	r3, [r3, #0]
 80080d8:	b29a      	uxth	r2, r3
 80080da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080de:	b29b      	uxth	r3, r3
 80080e0:	029b      	lsls	r3, r3, #10
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	4313      	orrs	r3, r2
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80080ec:	801a      	strh	r2, [r3, #0]
 80080ee:	e030      	b.n	8008152 <USB_EPStartXfer+0x155e>
 80080f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	785b      	ldrb	r3, [r3, #1]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d128      	bne.n	8008152 <USB_EPStartXfer+0x155e>
 8008100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008104:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800810e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800811c:	b29b      	uxth	r3, r3
 800811e:	461a      	mov	r2, r3
 8008120:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008124:	4413      	add	r3, r2
 8008126:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800812a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800812e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	011a      	lsls	r2, r3, #4
 8008138:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800813c:	4413      	add	r3, r2
 800813e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008142:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814a:	b29a      	uxth	r2, r3
 800814c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008150:	801a      	strh	r2, [r3, #0]
 8008152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008156:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	785b      	ldrb	r3, [r3, #1]
 800816c:	2b00      	cmp	r3, #0
 800816e:	f040 8085 	bne.w	800827c <USB_EPStartXfer+0x1688>
 8008172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008176:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008184:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800818e:	b29b      	uxth	r3, r3
 8008190:	461a      	mov	r2, r3
 8008192:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008196:	4413      	add	r3, r2
 8008198:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800819c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	011a      	lsls	r2, r3, #4
 80081aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80081ae:	4413      	add	r3, r2
 80081b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80081b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081ca:	801a      	strh	r2, [r3, #0]
 80081cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80081d2:	d923      	bls.n	800821c <USB_EPStartXfer+0x1628>
 80081d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d8:	095b      	lsrs	r3, r3, #5
 80081da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80081de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e2:	f003 031f 	and.w	r3, r3, #31
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d104      	bne.n	80081f4 <USB_EPStartXfer+0x1600>
 80081ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081ee:	3b01      	subs	r3, #1
 80081f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80081f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008200:	b29b      	uxth	r3, r3
 8008202:	029b      	lsls	r3, r3, #10
 8008204:	b29b      	uxth	r3, r3
 8008206:	4313      	orrs	r3, r2
 8008208:	b29b      	uxth	r3, r3
 800820a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800820e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008212:	b29a      	uxth	r2, r3
 8008214:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008218:	801a      	strh	r2, [r3, #0]
 800821a:	e05c      	b.n	80082d6 <USB_EPStartXfer+0x16e2>
 800821c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10c      	bne.n	800823e <USB_EPStartXfer+0x164a>
 8008224:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	b29b      	uxth	r3, r3
 800822c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008234:	b29a      	uxth	r2, r3
 8008236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800823a:	801a      	strh	r2, [r3, #0]
 800823c:	e04b      	b.n	80082d6 <USB_EPStartXfer+0x16e2>
 800823e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008242:	085b      	lsrs	r3, r3, #1
 8008244:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	2b00      	cmp	r3, #0
 8008252:	d004      	beq.n	800825e <USB_EPStartXfer+0x166a>
 8008254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008258:	3301      	adds	r3, #1
 800825a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800825e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	b29a      	uxth	r2, r3
 8008266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800826a:	b29b      	uxth	r3, r3
 800826c:	029b      	lsls	r3, r3, #10
 800826e:	b29b      	uxth	r3, r3
 8008270:	4313      	orrs	r3, r2
 8008272:	b29a      	uxth	r2, r3
 8008274:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008278:	801a      	strh	r2, [r3, #0]
 800827a:	e02c      	b.n	80082d6 <USB_EPStartXfer+0x16e2>
 800827c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	785b      	ldrb	r3, [r3, #1]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d124      	bne.n	80082d6 <USB_EPStartXfer+0x16e2>
 800828c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008290:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800829a:	b29b      	uxth	r3, r3
 800829c:	461a      	mov	r2, r3
 800829e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082a2:	4413      	add	r3, r2
 80082a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	011a      	lsls	r2, r3, #4
 80082b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082ba:	4413      	add	r3, r2
 80082bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80082c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80082ce:	801a      	strh	r2, [r3, #0]
 80082d0:	e001      	b.n	80082d6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e03a      	b.n	800834c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082fc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008300:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008304:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008308:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800830c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008310:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008314:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800831c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	441a      	add	r2, r3
 8008332:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008336:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800833a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800833e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008346:	b29b      	uxth	r3, r3
 8008348:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008356:	b480      	push	{r7}
 8008358:	b085      	sub	sp, #20
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	785b      	ldrb	r3, [r3, #1]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d020      	beq.n	80083aa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800837a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800837e:	81bb      	strh	r3, [r7, #12]
 8008380:	89bb      	ldrh	r3, [r7, #12]
 8008382:	f083 0310 	eor.w	r3, r3, #16
 8008386:	81bb      	strh	r3, [r7, #12]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	441a      	add	r2, r3
 8008392:	89bb      	ldrh	r3, [r7, #12]
 8008394:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008398:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800839c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	8013      	strh	r3, [r2, #0]
 80083a8:	e01f      	b.n	80083ea <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083c0:	81fb      	strh	r3, [r7, #14]
 80083c2:	89fb      	ldrh	r3, [r7, #14]
 80083c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80083c8:	81fb      	strh	r3, [r7, #14]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	441a      	add	r2, r3
 80083d4:	89fb      	ldrh	r3, [r7, #14]
 80083d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bc80      	pop	{r7}
 80083f4:	4770      	bx	lr

080083f6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b087      	sub	sp, #28
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	7b1b      	ldrb	r3, [r3, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	f040 809d 	bne.w	8008544 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	785b      	ldrb	r3, [r3, #1]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d04c      	beq.n	80084ac <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	881b      	ldrh	r3, [r3, #0]
 800841e:	823b      	strh	r3, [r7, #16]
 8008420:	8a3b      	ldrh	r3, [r7, #16]
 8008422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008426:	2b00      	cmp	r3, #0
 8008428:	d01b      	beq.n	8008462 <USB_EPClearStall+0x6c>
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4413      	add	r3, r2
 8008434:	881b      	ldrh	r3, [r3, #0]
 8008436:	b29b      	uxth	r3, r3
 8008438:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800843c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008440:	81fb      	strh	r3, [r7, #14]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	441a      	add	r2, r3
 800844c:	89fb      	ldrh	r3, [r7, #14]
 800844e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800845a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800845e:	b29b      	uxth	r3, r3
 8008460:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	78db      	ldrb	r3, [r3, #3]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d06c      	beq.n	8008544 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	b29b      	uxth	r3, r3
 8008478:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800847c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008480:	81bb      	strh	r3, [r7, #12]
 8008482:	89bb      	ldrh	r3, [r7, #12]
 8008484:	f083 0320 	eor.w	r3, r3, #32
 8008488:	81bb      	strh	r3, [r7, #12]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	441a      	add	r2, r3
 8008494:	89bb      	ldrh	r3, [r7, #12]
 8008496:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800849a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800849e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	8013      	strh	r3, [r2, #0]
 80084aa:	e04b      	b.n	8008544 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	82fb      	strh	r3, [r7, #22]
 80084ba:	8afb      	ldrh	r3, [r7, #22]
 80084bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d01b      	beq.n	80084fc <USB_EPClearStall+0x106>
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084da:	82bb      	strh	r3, [r7, #20]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	441a      	add	r2, r3
 80084e6:	8abb      	ldrh	r3, [r7, #20]
 80084e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80084f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	881b      	ldrh	r3, [r3, #0]
 8008508:	b29b      	uxth	r3, r3
 800850a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800850e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008512:	827b      	strh	r3, [r7, #18]
 8008514:	8a7b      	ldrh	r3, [r7, #18]
 8008516:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800851a:	827b      	strh	r3, [r7, #18]
 800851c:	8a7b      	ldrh	r3, [r7, #18]
 800851e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008522:	827b      	strh	r3, [r7, #18]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	441a      	add	r2, r3
 800852e:	8a7b      	ldrh	r3, [r7, #18]
 8008530:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008534:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008538:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800853c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008540:	b29b      	uxth	r3, r3
 8008542:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	371c      	adds	r7, #28
 800854a:	46bd      	mov	sp, r7
 800854c:	bc80      	pop	{r7}
 800854e:	4770      	bx	lr

08008550 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800855c:	78fb      	ldrb	r3, [r7, #3]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d103      	bne.n	800856a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2280      	movs	r2, #128	@ 0x80
 8008566:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	bc80      	pop	{r7}
 8008574:	4770      	bx	lr

08008576 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	bc80      	pop	{r7}
 8008588:	4770      	bx	lr

0800858a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	bc80      	pop	{r7}
 800859c:	4770      	bx	lr

0800859e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800859e:	b480      	push	{r7}
 80085a0:	b085      	sub	sp, #20
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80085b0:	68fb      	ldr	r3, [r7, #12]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc80      	pop	{r7}
 80085ba:	4770      	bx	lr

080085bc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bc80      	pop	{r7}
 80085d0:	4770      	bx	lr

080085d2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b08b      	sub	sp, #44	@ 0x2c
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	60f8      	str	r0, [r7, #12]
 80085da:	60b9      	str	r1, [r7, #8]
 80085dc:	4611      	mov	r1, r2
 80085de:	461a      	mov	r2, r3
 80085e0:	460b      	mov	r3, r1
 80085e2:	80fb      	strh	r3, [r7, #6]
 80085e4:	4613      	mov	r3, r2
 80085e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80085e8:	88bb      	ldrh	r3, [r7, #4]
 80085ea:	3301      	adds	r3, #1
 80085ec:	085b      	lsrs	r3, r3, #1
 80085ee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085f8:	88fb      	ldrh	r3, [r7, #6]
 80085fa:	005a      	lsls	r2, r3, #1
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008604:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	627b      	str	r3, [r7, #36]	@ 0x24
 800860a:	e01f      	b.n	800864c <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	3301      	adds	r3, #1
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	b21b      	sxth	r3, r3
 800861a:	021b      	lsls	r3, r3, #8
 800861c:	b21a      	sxth	r2, r3
 800861e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008622:	4313      	orrs	r3, r2
 8008624:	b21b      	sxth	r3, r3
 8008626:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	8a7a      	ldrh	r2, [r7, #18]
 800862c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800862e:	6a3b      	ldr	r3, [r7, #32]
 8008630:	3302      	adds	r3, #2
 8008632:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	3302      	adds	r3, #2
 8008638:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	3301      	adds	r3, #1
 800863e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	3301      	adds	r3, #1
 8008644:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008648:	3b01      	subs	r3, #1
 800864a:	627b      	str	r3, [r7, #36]	@ 0x24
 800864c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1dc      	bne.n	800860c <USB_WritePMA+0x3a>
  }
}
 8008652:	bf00      	nop
 8008654:	bf00      	nop
 8008656:	372c      	adds	r7, #44	@ 0x2c
 8008658:	46bd      	mov	sp, r7
 800865a:	bc80      	pop	{r7}
 800865c:	4770      	bx	lr

0800865e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800865e:	b480      	push	{r7}
 8008660:	b08b      	sub	sp, #44	@ 0x2c
 8008662:	af00      	add	r7, sp, #0
 8008664:	60f8      	str	r0, [r7, #12]
 8008666:	60b9      	str	r1, [r7, #8]
 8008668:	4611      	mov	r1, r2
 800866a:	461a      	mov	r2, r3
 800866c:	460b      	mov	r3, r1
 800866e:	80fb      	strh	r3, [r7, #6]
 8008670:	4613      	mov	r3, r2
 8008672:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008674:	88bb      	ldrh	r3, [r7, #4]
 8008676:	085b      	lsrs	r3, r3, #1
 8008678:	b29b      	uxth	r3, r3
 800867a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008684:	88fb      	ldrh	r3, [r7, #6]
 8008686:	005a      	lsls	r2, r3, #1
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	4413      	add	r3, r2
 800868c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008690:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	627b      	str	r3, [r7, #36]	@ 0x24
 8008696:	e01b      	b.n	80086d0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	b29b      	uxth	r3, r3
 800869e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	3302      	adds	r3, #2
 80086a4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	b2da      	uxtb	r2, r3
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	3301      	adds	r3, #1
 80086b2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	0a1b      	lsrs	r3, r3, #8
 80086b8:	b2da      	uxtb	r2, r3
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	3301      	adds	r3, #1
 80086c2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	3302      	adds	r3, #2
 80086c8:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80086ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086cc:	3b01      	subs	r3, #1
 80086ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80086d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e0      	bne.n	8008698 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80086d6:	88bb      	ldrh	r3, [r7, #4]
 80086d8:	f003 0301 	and.w	r3, r3, #1
 80086dc:	b29b      	uxth	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d007      	beq.n	80086f2 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	701a      	strb	r2, [r3, #0]
  }
}
 80086f2:	bf00      	nop
 80086f4:	372c      	adds	r7, #44	@ 0x2c
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bc80      	pop	{r7}
 80086fa:	4770      	bx	lr

080086fc <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	7c1b      	ldrb	r3, [r3, #16]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d11c      	bne.n	800874e <USBD_CDC_Init+0x52>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8008714:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008718:	2202      	movs	r2, #2
 800871a:	2181      	movs	r1, #129	@ 0x81
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f001 ff47 	bl	800a5b0 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8008722:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008726:	2202      	movs	r2, #2
 8008728:	2101      	movs	r1, #1
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f001 ff40 	bl	800a5b0 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_OUT_PACKET_SIZE);
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8008730:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008734:	2202      	movs	r2, #2
 8008736:	2183      	movs	r1, #131	@ 0x83
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f001 ff39 	bl	800a5b0 <USBD_LL_OpenEP>
                   CDC_IN_EP+2,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800873e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008742:	2202      	movs	r2, #2
 8008744:	2103      	movs	r1, #3
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f001 ff32 	bl	800a5b0 <USBD_LL_OpenEP>
 800874c:	e017      	b.n	800877e <USBD_CDC_Init+0x82>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800874e:	2340      	movs	r3, #64	@ 0x40
 8008750:	2202      	movs	r2, #2
 8008752:	2181      	movs	r1, #129	@ 0x81
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f001 ff2b 	bl	800a5b0 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800875a:	2340      	movs	r3, #64	@ 0x40
 800875c:	2202      	movs	r2, #2
 800875e:	2101      	movs	r1, #1
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f001 ff25 	bl	800a5b0 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8008766:	2340      	movs	r3, #64	@ 0x40
 8008768:	2202      	movs	r2, #2
 800876a:	2183      	movs	r1, #131	@ 0x83
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f001 ff1f 	bl	800a5b0 <USBD_LL_OpenEP>
                   CDC_IN_EP+2,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8008772:	2340      	movs	r3, #64	@ 0x40
 8008774:	2202      	movs	r2, #2
 8008776:	2103      	movs	r1, #3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f001 ff19 	bl	800a5b0 <USBD_LL_OpenEP>
                   CDC_OUT_EP+2,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800877e:	2308      	movs	r3, #8
 8008780:	2203      	movs	r2, #3
 8008782:	2182      	movs	r1, #130	@ 0x82
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f001 ff13 	bl	800a5b0 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);

  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800878a:	2308      	movs	r3, #8
 800878c:	2203      	movs	r2, #3
 800878e:	2184      	movs	r1, #132	@ 0x84
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f001 ff0d 	bl	800a5b0 <USBD_LL_OpenEP>
                 CDC_CMD_EP+2,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8008796:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800879a:	f002 f8d3 	bl	800a944 <USBD_static_malloc>
 800879e:	4602      	mov	r2, r0
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  
  if(pdev->pClassData == NULL)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d102      	bne.n	80087b6 <USBD_CDC_Init+0xba>
  {
    ret = 1; 
 80087b0:	2301      	movs	r3, #1
 80087b2:	73fb      	strb	r3, [r7, #15]
 80087b4:	e037      	b.n	8008826 <USBD_CDC_Init+0x12a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087bc:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState =0;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	7c1b      	ldrb	r3, [r3, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d112      	bne.n	8008806 <USBD_CDC_Init+0x10a>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087ea:	2101      	movs	r1, #1
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f002 f85b 	bl	800a8a8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_HS_OUT_PACKET_SIZE);
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087fc:	2103      	movs	r1, #3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f002 f852 	bl	800a8a8 <USBD_LL_PrepareReceive>
 8008804:	e00f      	b.n	8008826 <USBD_CDC_Init+0x12a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800880c:	2340      	movs	r3, #64	@ 0x40
 800880e:	2101      	movs	r1, #1
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f002 f849 	bl	800a8a8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800881c:	2340      	movs	r3, #64	@ 0x40
 800881e:	2103      	movs	r1, #3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f002 f841 	bl	800a8a8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8008826:	7bfb      	ldrb	r3, [r7, #15]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800883c:	2300      	movs	r3, #0
 800883e:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8008840:	2181      	movs	r1, #129	@ 0x81
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f001 fef2 	bl	800a62c <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8008848:	2101      	movs	r1, #1
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f001 feee 	bl	800a62c <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8008850:	2182      	movs	r1, #130	@ 0x82
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f001 feea 	bl	800a62c <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8008858:	2183      	movs	r1, #131	@ 0x83
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 fee6 	bl	800a62c <USBD_LL_CloseEP>
              CDC_IN_EP+2);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8008860:	2103      	movs	r1, #3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 fee2 	bl	800a62c <USBD_LL_CloseEP>
              CDC_OUT_EP+2);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8008868:	2184      	movs	r1, #132	@ 0x84
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f001 fede 	bl	800a62c <USBD_LL_CloseEP>
              CDC_CMD_EP+2);
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00e      	beq.n	8008898 <USBD_CDC_DeInit+0x68>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800888a:	4618      	mov	r0, r3
 800888c:	f002 f866 	bl	800a95c <USBD_static_free>
    pdev->pClassData = NULL;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }
  
  return ret;
 8008898:	7bfb      	ldrb	r3, [r7, #15]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80088a4:	b590      	push	{r4, r7, lr}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088b4:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d03d      	beq.n	800893e <USBD_CDC_Setup+0x9a>
 80088c2:	2b20      	cmp	r3, #32
 80088c4:	d147      	bne.n	8008956 <USBD_CDC_Setup+0xb2>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	88db      	ldrh	r3, [r3, #6]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d02b      	beq.n	8008926 <USBD_CDC_Setup+0x82>
    {
      if (req->bmRequest & 0x80)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	b25b      	sxtb	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	da13      	bge.n	8008900 <USBD_CDC_Setup+0x5c>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088de:	689c      	ldr	r4, [r3, #8]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	7858      	ldrb	r0, [r3, #1]
                                                          (uint8_t *)hcdc->data,
 80088e4:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	88da      	ldrh	r2, [r3, #6]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	889b      	ldrh	r3, [r3, #4]
 80088ee:	47a0      	blx	r4
                                                          req->wLength, 
                                                          req->wIndex);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hcdc->data,
 80088f0:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	88db      	ldrh	r3, [r3, #6]
 80088f6:	461a      	mov	r2, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f001 f9a7 	bl	8009c4c <USBD_CtlSendData>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0,
                                                        req->wIndex);
    }
    break;
 80088fe:	e02b      	b.n	8008958 <USBD_CDC_Setup+0xb4>
        hcdc->CmdOpCode = req->bRequest;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	785a      	ldrb	r2, [r3, #1]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = req->wLength;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	88db      	ldrh	r3, [r3, #6]
 800890e:	b2da      	uxtb	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
                           (uint8_t *)hcdc->data,
 8008916:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	88db      	ldrh	r3, [r3, #6]
 800891c:	461a      	mov	r2, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f001 f9c2 	bl	8009ca8 <USBD_CtlPrepareRx>
    break;
 8008924:	e018      	b.n	8008958 <USBD_CDC_Setup+0xb4>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800892c:	689c      	ldr	r4, [r3, #8]
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	7858      	ldrb	r0, [r3, #1]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	889b      	ldrh	r3, [r3, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	47a0      	blx	r4
    break;
 800893c:	e00c      	b.n	8008958 <USBD_CDC_Setup+0xb4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	785b      	ldrb	r3, [r3, #1]
 8008942:	2b0a      	cmp	r3, #10
 8008944:	d001      	beq.n	800894a <USBD_CDC_Setup+0xa6>
 8008946:	2b0b      	cmp	r3, #11
                        &ifalt,
                        1);
      break;
      
    case USB_REQ_SET_INTERFACE :
      break;
 8008948:	e005      	b.n	8008956 <USBD_CDC_Setup+0xb2>
      USBD_CtlSendData (pdev,
 800894a:	2201      	movs	r2, #1
 800894c:	4905      	ldr	r1, [pc, #20]	@ (8008964 <USBD_CDC_Setup+0xc0>)
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f001 f97c 	bl	8009c4c <USBD_CtlSendData>
      break;
 8008954:	bf00      	nop
    }
 
  default: 
    break;
 8008956:	bf00      	nop
  }
  return USBD_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	bd90      	pop	{r4, r7, pc}
 8008962:	bf00      	nop
 8008964:	20002768 	.word	0x20002768

08008968 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	460b      	mov	r3, r1
 8008972:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800897a:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008982:	2b00      	cmp	r3, #0
 8008984:	d005      	beq.n	8008992 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    return USBD_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	e000      	b.n	8008994 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8008992:	2302      	movs	r3, #2
  }
}
 8008994:	4618      	mov	r0, r3
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	bc80      	pop	{r7}
 800899c:	4770      	bx	lr

0800899e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800899e:	b580      	push	{r7, lr}
 80089a0:	b084      	sub	sp, #16
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
 80089a6:	460b      	mov	r3, r1
 80089a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089b0:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80089b2:	78fb      	ldrb	r3, [r7, #3]
 80089b4:	4619      	mov	r1, r3
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f001 ffb0 	bl	800a91c <USBD_LL_GetRxDataSize>
 80089bc:	4602      	mov	r2, r0
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d012      	beq.n	80089f4 <USBD_CDC_DataOut+0x56>
  {    
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength, (epnum == CDC_OUT_EP) ? 0 : 2);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	f502 7103 	add.w	r1, r2, #524	@ 0x20c
 80089e2:	78fa      	ldrb	r2, [r7, #3]
 80089e4:	2a01      	cmp	r2, #1
 80089e6:	d101      	bne.n	80089ec <USBD_CDC_DataOut+0x4e>
 80089e8:	2200      	movs	r2, #0
 80089ea:	e000      	b.n	80089ee <USBD_CDC_DataOut+0x50>
 80089ec:	2202      	movs	r2, #2
 80089ee:	4798      	blx	r3

    return USBD_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	e000      	b.n	80089f6 <USBD_CDC_DataOut+0x58>
  }
  else
  {
    return USBD_FAIL;
 80089f4:	2302      	movs	r3, #2
  }
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80089fe:	b590      	push	{r4, r7, lr}
 8008a00:	b085      	sub	sp, #20
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a0c:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d018      	beq.n	8008a4a <USBD_CDC_EP0_RxReady+0x4c>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008a1e:	2bff      	cmp	r3, #255	@ 0xff
 8008a20:	d013      	beq.n	8008a4a <USBD_CDC_EP0_RxReady+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a28:	689c      	ldr	r4, [r3, #8]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f893 0200 	ldrb.w	r0, [r3, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8008a30:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength, 
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a38:	461a      	mov	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	@ 0x2ac
 8008a40:	47a0      	blx	r4
                                                      pdev->request.wIndex);
      hcdc->CmdOpCode = 0xFF; 
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	22ff      	movs	r2, #255	@ 0xff
 8008a46:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
      
  }
  return USBD_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd90      	pop	{r4, r7, pc}

08008a54 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	228d      	movs	r2, #141	@ 0x8d
 8008a60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008a62:	4b03      	ldr	r3, [pc, #12]	@ (8008a70 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bc80      	pop	{r7}
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	200000e0 	.word	0x200000e0

08008a74 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	228d      	movs	r2, #141	@ 0x8d
 8008a80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008a82:	4b03      	ldr	r3, [pc, #12]	@ (8008a90 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bc80      	pop	{r7}
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	20000050 	.word	0x20000050

08008a94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	228d      	movs	r2, #141	@ 0x8d
 8008aa0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008aa2:	4b03      	ldr	r3, [pc, #12]	@ (8008ab0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bc80      	pop	{r7}
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	20000170 	.word	0x20000170

08008ab4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	220a      	movs	r2, #10
 8008ac0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008ac2:	4b03      	ldr	r3, [pc, #12]	@ (8008ad0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bc80      	pop	{r7}
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	2000000c 	.word	0x2000000c

08008ad4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008ade:	2302      	movs	r3, #2
 8008ae0:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d005      	beq.n	8008af4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;    
 8008af0:	2300      	movs	r3, #0
 8008af2:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bc80      	pop	{r7}
 8008afe:	4770      	bx	lr

08008b00 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b14:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;  
 8008b1e:	88fa      	ldrh	r2, [r7, #6]
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  
  return USBD_OK;  
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	371c      	adds	r7, #28
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bc80      	pop	{r7}
 8008b30:	4770      	bx	lr

08008b32 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b085      	sub	sp, #20
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b42:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  
  return USBD_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bc80      	pop	{r7}
 8008b56:	4770      	bx	lr

08008b58 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint16_t index)
{      
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	807b      	strh	r3, [r7, #2]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b6a:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d01c      	beq.n	8008bb0 <USBD_CDC_TransmitPacket+0x58>
  {
    if(hcdc->TxState == 0)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d115      	bne.n	8008bac <USBD_CDC_TransmitPacket+0x54>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
      /* Transmit next packet */      
      USBD_LL_Transmit(pdev,
 8008b88:	887b      	ldrh	r3, [r7, #2]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d801      	bhi.n	8008b92 <USBD_CDC_TransmitPacket+0x3a>
 8008b8e:	2181      	movs	r1, #129	@ 0x81
 8008b90:	e000      	b.n	8008b94 <USBD_CDC_TransmitPacket+0x3c>
 8008b92:	2183      	movs	r1, #131	@ 0x83
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (index < 2) ? CDC_IN_EP : (CDC_IN_EP+2),
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev,
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f001 fe46 	bl	800a834 <USBD_LL_Transmit>
      
      return USBD_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	e002      	b.n	8008bb2 <USBD_CDC_TransmitPacket+0x5a>
    }
    else
    {
      return USBD_BUSY;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e000      	b.n	8008bb2 <USBD_CDC_TransmitPacket+0x5a>
    }
  }
  else
  {
    return USBD_FAIL;
 8008bb0:	2302      	movs	r3, #2
  }
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev, uint16_t index)
{      
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	807b      	strh	r3, [r7, #2]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bcc:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d021      	beq.n	8008c1c <USBD_CDC_ReceivePacket+0x62>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	7c1b      	ldrb	r3, [r3, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10e      	bne.n	8008bfe <USBD_CDC_ReceivePacket+0x44>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008be0:	887b      	ldrh	r3, [r7, #2]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d801      	bhi.n	8008bea <USBD_CDC_ReceivePacket+0x30>
 8008be6:	2101      	movs	r1, #1
 8008be8:	e000      	b.n	8008bec <USBD_CDC_ReceivePacket+0x32>
 8008bea:	2103      	movs	r1, #3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008bf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f001 fe56 	bl	800a8a8 <USBD_LL_PrepareReceive>
 8008bfc:	e00c      	b.n	8008c18 <USBD_CDC_ReceivePacket+0x5e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008bfe:	887b      	ldrh	r3, [r7, #2]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d801      	bhi.n	8008c08 <USBD_CDC_ReceivePacket+0x4e>
 8008c04:	2101      	movs	r1, #1
 8008c06:	e000      	b.n	8008c0a <USBD_CDC_ReceivePacket+0x50>
 8008c08:	2103      	movs	r1, #3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c10:	2340      	movs	r3, #64	@ 0x40
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f001 fe48 	bl	800a8a8 <USBD_LL_PrepareReceive>
                             (index < 2) ? CDC_OUT_EP : (CDC_OUT_EP+2),
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	e000      	b.n	8008c1e <USBD_CDC_ReceivePacket+0x64>
  }
  else
  {
    return USBD_FAIL;
 8008c1c:	2302      	movs	r3, #2
  }
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b084      	sub	sp, #16
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	60f8      	str	r0, [r7, #12]
 8008c2e:	60b9      	str	r1, [r7, #8]
 8008c30:	4613      	mov	r3, r2
 8008c32:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	e01a      	b.n	8008c74 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d003      	beq.n	8008c50 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	79fa      	ldrb	r2, [r7, #7]
 8008c6a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f001 fbf1 	bl	800a454 <USBD_LL_Init>

  return USBD_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d006      	beq.n	8008c9e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73fb      	strb	r3, [r7, #15]
 8008c9c:	e001      	b.n	8008ca2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bc80      	pop	{r7}
 8008cac:	4770      	bx	lr

08008cae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f001 fc48 	bl	800a54c <USBD_LL_Start>

  return USBD_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b083      	sub	sp, #12
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bc80      	pop	{r7}
 8008cd8:	4770      	bx	lr

08008cda <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00c      	beq.n	8008d0e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	78fa      	ldrb	r2, [r7, #3]
 8008cfe:	4611      	mov	r1, r2
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	4798      	blx	r3
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	78fa      	ldrb	r2, [r7, #3]
 8008d2e:	4611      	mov	r1, r2
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	4798      	blx	r3

  return USBD_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b082      	sub	sp, #8
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f000 fed8 	bl	8009b06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008d64:	461a      	mov	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008d72:	f003 031f 	and.w	r3, r3, #31
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d016      	beq.n	8008da8 <USBD_LL_SetupStage+0x6a>
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d81c      	bhi.n	8008db8 <USBD_LL_SetupStage+0x7a>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <USBD_LL_SetupStage+0x4a>
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d008      	beq.n	8008d98 <USBD_LL_SetupStage+0x5a>
 8008d86:	e017      	b.n	8008db8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f9cb 	bl	800912c <USBD_StdDevReq>
      break;
 8008d96:	e01a      	b.n	8008dce <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fa2d 	bl	8009200 <USBD_StdItfReq>
      break;
 8008da6:	e012      	b.n	8008dce <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fa6d 	bl	8009290 <USBD_StdEPReq>
      break;
 8008db6:	e00a      	b.n	8008dce <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008dbe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f001 fc66 	bl	800a698 <USBD_LL_StallEP>
      break;
 8008dcc:	bf00      	nop
  }

  return USBD_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	460b      	mov	r3, r1
 8008de2:	607a      	str	r2, [r7, #4]
 8008de4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008de6:	7afb      	ldrb	r3, [r7, #11]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d14b      	bne.n	8008e84 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008df2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008dfa:	2b03      	cmp	r3, #3
 8008dfc:	d134      	bne.n	8008e68 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	68da      	ldr	r2, [r3, #12]
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d919      	bls.n	8008e3e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	68da      	ldr	r2, [r3, #12]
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	1ad2      	subs	r2, r2, r3
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	68da      	ldr	r2, [r3, #12]
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d203      	bcs.n	8008e2c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	e002      	b.n	8008e32 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	461a      	mov	r2, r3
 8008e34:	6879      	ldr	r1, [r7, #4]
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f000 ff54 	bl	8009ce4 <USBD_CtlContinueRx>
 8008e3c:	e038      	b.n	8008eb0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00a      	beq.n	8008e60 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	d105      	bne.n	8008e60 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f000 ff51 	bl	8009d08 <USBD_CtlSendStatus>
 8008e66:	e023      	b.n	8008eb0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e6e:	2b05      	cmp	r3, #5
 8008e70:	d11e      	bne.n	8008eb0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f001 fc0b 	bl	800a698 <USBD_LL_StallEP>
 8008e82:	e015      	b.n	8008eb0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00d      	beq.n	8008eac <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d108      	bne.n	8008eac <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	7afa      	ldrb	r2, [r7, #11]
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	4798      	blx	r3
 8008eaa:	e001      	b.n	8008eb0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008eac:	2302      	movs	r3, #2
 8008eae:	e000      	b.n	8008eb2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b086      	sub	sp, #24
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	60f8      	str	r0, [r7, #12]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	607a      	str	r2, [r7, #4]
 8008ec6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008ec8:	7afb      	ldrb	r3, [r7, #11]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d17f      	bne.n	8008fce <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3314      	adds	r3, #20
 8008ed2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d15c      	bne.n	8008f98 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	68da      	ldr	r2, [r3, #12]
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d915      	bls.n	8008f16 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	68da      	ldr	r2, [r3, #12]
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	1ad2      	subs	r2, r2, r3
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	461a      	mov	r2, r3
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f000 febe 	bl	8009c84 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f08:	2300      	movs	r3, #0
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f001 fcca 	bl	800a8a8 <USBD_LL_PrepareReceive>
 8008f14:	e04e      	b.n	8008fb4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	6912      	ldr	r2, [r2, #16]
 8008f1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f22:	fb01 f202 	mul.w	r2, r1, r2
 8008f26:	1a9b      	subs	r3, r3, r2
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d11c      	bne.n	8008f66 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	689a      	ldr	r2, [r3, #8]
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d316      	bcc.n	8008f66 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d20f      	bcs.n	8008f66 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f46:	2200      	movs	r2, #0
 8008f48:	2100      	movs	r1, #0
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f000 fe9a 	bl	8009c84 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f58:	2300      	movs	r3, #0
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f001 fca2 	bl	800a8a8 <USBD_LL_PrepareReceive>
 8008f64:	e026      	b.n	8008fb4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00a      	beq.n	8008f88 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d105      	bne.n	8008f88 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008f88:	2180      	movs	r1, #128	@ 0x80
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f001 fb84 	bl	800a698 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 fecc 	bl	8009d2e <USBD_CtlReceiveStatus>
 8008f96:	e00d      	b.n	8008fb4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d004      	beq.n	8008fac <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d103      	bne.n	8008fb4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008fac:	2180      	movs	r1, #128	@ 0x80
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f001 fb72 	bl	800a698 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d11d      	bne.n	8008ffa <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f7ff fe81 	bl	8008cc6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008fcc:	e015      	b.n	8008ffa <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00d      	beq.n	8008ff6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d108      	bne.n	8008ff6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	7afa      	ldrb	r2, [r7, #11]
 8008fee:	4611      	mov	r1, r2
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	4798      	blx	r3
 8008ff4:	e001      	b.n	8008ffa <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	e000      	b.n	8008ffc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800900c:	2340      	movs	r3, #64	@ 0x40
 800900e:	2200      	movs	r2, #0
 8009010:	2100      	movs	r1, #0
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 facc 	bl	800a5b0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2240      	movs	r2, #64	@ 0x40
 8009024:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009028:	2340      	movs	r3, #64	@ 0x40
 800902a:	2200      	movs	r2, #0
 800902c:	2180      	movs	r1, #128	@ 0x80
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f001 fabe 	bl	800a5b0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2240      	movs	r2, #64	@ 0x40
 800903e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009064:	2b00      	cmp	r3, #0
 8009066:	d009      	beq.n	800907c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	6852      	ldr	r2, [r2, #4]
 8009074:	b2d2      	uxtb	r2, r2
 8009076:	4611      	mov	r1, r2
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	4798      	blx	r3
  }

  return USBD_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009086:	b480      	push	{r7}
 8009088:	b083      	sub	sp, #12
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	460b      	mov	r3, r1
 8009090:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	78fa      	ldrb	r2, [r7, #3]
 8009096:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	bc80      	pop	{r7}
 80090a2:	4770      	bx	lr

080090a4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2204      	movs	r2, #4
 80090bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bc80      	pop	{r7}
 80090ca:	4770      	bx	lr

080090cc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090da:	2b04      	cmp	r3, #4
 80090dc:	d105      	bne.n	80090ea <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bc80      	pop	{r7}
 80090f4:	4770      	bx	lr

080090f6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b082      	sub	sp, #8
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009104:	2b03      	cmp	r3, #3
 8009106:	d10b      	bne.n	8009120 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d005      	beq.n	8009120 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800911a:	69db      	ldr	r3, [r3, #28]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
	...

0800912c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009136:	2300      	movs	r3, #0
 8009138:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009142:	2b40      	cmp	r3, #64	@ 0x40
 8009144:	d005      	beq.n	8009152 <USBD_StdDevReq+0x26>
 8009146:	2b40      	cmp	r3, #64	@ 0x40
 8009148:	d84f      	bhi.n	80091ea <USBD_StdDevReq+0xbe>
 800914a:	2b00      	cmp	r3, #0
 800914c:	d009      	beq.n	8009162 <USBD_StdDevReq+0x36>
 800914e:	2b20      	cmp	r3, #32
 8009150:	d14b      	bne.n	80091ea <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	4798      	blx	r3
      break;
 8009160:	e048      	b.n	80091f4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	785b      	ldrb	r3, [r3, #1]
 8009166:	2b09      	cmp	r3, #9
 8009168:	d839      	bhi.n	80091de <USBD_StdDevReq+0xb2>
 800916a:	a201      	add	r2, pc, #4	@ (adr r2, 8009170 <USBD_StdDevReq+0x44>)
 800916c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009170:	080091c1 	.word	0x080091c1
 8009174:	080091d5 	.word	0x080091d5
 8009178:	080091df 	.word	0x080091df
 800917c:	080091cb 	.word	0x080091cb
 8009180:	080091df 	.word	0x080091df
 8009184:	080091a3 	.word	0x080091a3
 8009188:	08009199 	.word	0x08009199
 800918c:	080091df 	.word	0x080091df
 8009190:	080091b7 	.word	0x080091b7
 8009194:	080091ad 	.word	0x080091ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f9dc 	bl	8009558 <USBD_GetDescriptor>
          break;
 80091a0:	e022      	b.n	80091e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fb3f 	bl	8009828 <USBD_SetAddress>
          break;
 80091aa:	e01d      	b.n	80091e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fb7e 	bl	80098b0 <USBD_SetConfig>
          break;
 80091b4:	e018      	b.n	80091e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fc07 	bl	80099cc <USBD_GetConfig>
          break;
 80091be:	e013      	b.n	80091e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fc37 	bl	8009a36 <USBD_GetStatus>
          break;
 80091c8:	e00e      	b.n	80091e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fc65 	bl	8009a9c <USBD_SetFeature>
          break;
 80091d2:	e009      	b.n	80091e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fc74 	bl	8009ac4 <USBD_ClrFeature>
          break;
 80091dc:	e004      	b.n	80091e8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fcc9 	bl	8009b78 <USBD_CtlError>
          break;
 80091e6:	bf00      	nop
      }
      break;
 80091e8:	e004      	b.n	80091f4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fcc3 	bl	8009b78 <USBD_CtlError>
      break;
 80091f2:	bf00      	nop
  }

  return ret;
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop

08009200 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009216:	2b40      	cmp	r3, #64	@ 0x40
 8009218:	d005      	beq.n	8009226 <USBD_StdItfReq+0x26>
 800921a:	2b40      	cmp	r3, #64	@ 0x40
 800921c:	d82e      	bhi.n	800927c <USBD_StdItfReq+0x7c>
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <USBD_StdItfReq+0x26>
 8009222:	2b20      	cmp	r3, #32
 8009224:	d12a      	bne.n	800927c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800922c:	3b01      	subs	r3, #1
 800922e:	2b02      	cmp	r3, #2
 8009230:	d81d      	bhi.n	800926e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	889b      	ldrh	r3, [r3, #4]
 8009236:	b2db      	uxtb	r3, r3
 8009238:	2b03      	cmp	r3, #3
 800923a:	d813      	bhi.n	8009264 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	4798      	blx	r3
 800924a:	4603      	mov	r3, r0
 800924c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	88db      	ldrh	r3, [r3, #6]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d110      	bne.n	8009278 <USBD_StdItfReq+0x78>
 8009256:	7bfb      	ldrb	r3, [r7, #15]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10d      	bne.n	8009278 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fd53 	bl	8009d08 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009262:	e009      	b.n	8009278 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fc86 	bl	8009b78 <USBD_CtlError>
          break;
 800926c:	e004      	b.n	8009278 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fc81 	bl	8009b78 <USBD_CtlError>
          break;
 8009276:	e000      	b.n	800927a <USBD_StdItfReq+0x7a>
          break;
 8009278:	bf00      	nop
      }
      break;
 800927a:	e004      	b.n	8009286 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fc7a 	bl	8009b78 <USBD_CtlError>
      break;
 8009284:	bf00      	nop
  }

  return USBD_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800929a:	2300      	movs	r3, #0
 800929c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	889b      	ldrh	r3, [r3, #4]
 80092a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092ac:	2b40      	cmp	r3, #64	@ 0x40
 80092ae:	d007      	beq.n	80092c0 <USBD_StdEPReq+0x30>
 80092b0:	2b40      	cmp	r3, #64	@ 0x40
 80092b2:	f200 8146 	bhi.w	8009542 <USBD_StdEPReq+0x2b2>
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00a      	beq.n	80092d0 <USBD_StdEPReq+0x40>
 80092ba:	2b20      	cmp	r3, #32
 80092bc:	f040 8141 	bne.w	8009542 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	4798      	blx	r3
      break;
 80092ce:	e13d      	b.n	800954c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092d8:	2b20      	cmp	r3, #32
 80092da:	d10a      	bne.n	80092f2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	4798      	blx	r3
 80092ea:	4603      	mov	r3, r0
 80092ec:	73fb      	strb	r3, [r7, #15]

        return ret;
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
 80092f0:	e12d      	b.n	800954e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	785b      	ldrb	r3, [r3, #1]
 80092f6:	2b03      	cmp	r3, #3
 80092f8:	d007      	beq.n	800930a <USBD_StdEPReq+0x7a>
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	f300 811b 	bgt.w	8009536 <USBD_StdEPReq+0x2a6>
 8009300:	2b00      	cmp	r3, #0
 8009302:	d072      	beq.n	80093ea <USBD_StdEPReq+0x15a>
 8009304:	2b01      	cmp	r3, #1
 8009306:	d03a      	beq.n	800937e <USBD_StdEPReq+0xee>
 8009308:	e115      	b.n	8009536 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009310:	2b02      	cmp	r3, #2
 8009312:	d002      	beq.n	800931a <USBD_StdEPReq+0x8a>
 8009314:	2b03      	cmp	r3, #3
 8009316:	d015      	beq.n	8009344 <USBD_StdEPReq+0xb4>
 8009318:	e02b      	b.n	8009372 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800931a:	7bbb      	ldrb	r3, [r7, #14]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00c      	beq.n	800933a <USBD_StdEPReq+0xaa>
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	2b80      	cmp	r3, #128	@ 0x80
 8009324:	d009      	beq.n	800933a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009326:	7bbb      	ldrb	r3, [r7, #14]
 8009328:	4619      	mov	r1, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f001 f9b4 	bl	800a698 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009330:	2180      	movs	r1, #128	@ 0x80
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f001 f9b0 	bl	800a698 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009338:	e020      	b.n	800937c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fc1b 	bl	8009b78 <USBD_CtlError>
              break;
 8009342:	e01b      	b.n	800937c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	885b      	ldrh	r3, [r3, #2]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10e      	bne.n	800936a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800934c:	7bbb      	ldrb	r3, [r7, #14]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00b      	beq.n	800936a <USBD_StdEPReq+0xda>
 8009352:	7bbb      	ldrb	r3, [r7, #14]
 8009354:	2b80      	cmp	r3, #128	@ 0x80
 8009356:	d008      	beq.n	800936a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	88db      	ldrh	r3, [r3, #6]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d104      	bne.n	800936a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f001 f997 	bl	800a698 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fccc 	bl	8009d08 <USBD_CtlSendStatus>

              break;
 8009370:	e004      	b.n	800937c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fbff 	bl	8009b78 <USBD_CtlError>
              break;
 800937a:	bf00      	nop
          }
          break;
 800937c:	e0e0      	b.n	8009540 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009384:	2b02      	cmp	r3, #2
 8009386:	d002      	beq.n	800938e <USBD_StdEPReq+0xfe>
 8009388:	2b03      	cmp	r3, #3
 800938a:	d015      	beq.n	80093b8 <USBD_StdEPReq+0x128>
 800938c:	e026      	b.n	80093dc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00c      	beq.n	80093ae <USBD_StdEPReq+0x11e>
 8009394:	7bbb      	ldrb	r3, [r7, #14]
 8009396:	2b80      	cmp	r3, #128	@ 0x80
 8009398:	d009      	beq.n	80093ae <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800939a:	7bbb      	ldrb	r3, [r7, #14]
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f001 f97a 	bl	800a698 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80093a4:	2180      	movs	r1, #128	@ 0x80
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f001 f976 	bl	800a698 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093ac:	e01c      	b.n	80093e8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80093ae:	6839      	ldr	r1, [r7, #0]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fbe1 	bl	8009b78 <USBD_CtlError>
              break;
 80093b6:	e017      	b.n	80093e8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	885b      	ldrh	r3, [r3, #2]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d112      	bne.n	80093e6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d004      	beq.n	80093d4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f001 f998 	bl	800a704 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fc97 	bl	8009d08 <USBD_CtlSendStatus>
              }
              break;
 80093da:	e004      	b.n	80093e6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fbca 	bl	8009b78 <USBD_CtlError>
              break;
 80093e4:	e000      	b.n	80093e8 <USBD_StdEPReq+0x158>
              break;
 80093e6:	bf00      	nop
          }
          break;
 80093e8:	e0aa      	b.n	8009540 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d002      	beq.n	80093fa <USBD_StdEPReq+0x16a>
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d032      	beq.n	800945e <USBD_StdEPReq+0x1ce>
 80093f8:	e097      	b.n	800952a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d007      	beq.n	8009410 <USBD_StdEPReq+0x180>
 8009400:	7bbb      	ldrb	r3, [r7, #14]
 8009402:	2b80      	cmp	r3, #128	@ 0x80
 8009404:	d004      	beq.n	8009410 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fbb5 	bl	8009b78 <USBD_CtlError>
                break;
 800940e:	e091      	b.n	8009534 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009414:	2b00      	cmp	r3, #0
 8009416:	da0b      	bge.n	8009430 <USBD_StdEPReq+0x1a0>
 8009418:	7bbb      	ldrb	r3, [r7, #14]
 800941a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	3310      	adds	r3, #16
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	4413      	add	r3, r2
 800942c:	3304      	adds	r3, #4
 800942e:	e00b      	b.n	8009448 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009430:	7bbb      	ldrb	r3, [r7, #14]
 8009432:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009436:	4613      	mov	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	4413      	add	r3, r2
 8009446:	3304      	adds	r3, #4
 8009448:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	2200      	movs	r2, #0
 800944e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	2202      	movs	r2, #2
 8009454:	4619      	mov	r1, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fbf8 	bl	8009c4c <USBD_CtlSendData>
              break;
 800945c:	e06a      	b.n	8009534 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800945e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009462:	2b00      	cmp	r3, #0
 8009464:	da11      	bge.n	800948a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009466:	7bbb      	ldrb	r3, [r7, #14]
 8009468:	f003 020f 	and.w	r2, r3, #15
 800946c:	6879      	ldr	r1, [r7, #4]
 800946e:	4613      	mov	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4413      	add	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	440b      	add	r3, r1
 8009478:	3318      	adds	r3, #24
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d117      	bne.n	80094b0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fb78 	bl	8009b78 <USBD_CtlError>
                  break;
 8009488:	e054      	b.n	8009534 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800948a:	7bbb      	ldrb	r3, [r7, #14]
 800948c:	f003 020f 	and.w	r2, r3, #15
 8009490:	6879      	ldr	r1, [r7, #4]
 8009492:	4613      	mov	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	440b      	add	r3, r1
 800949c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d104      	bne.n	80094b0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fb65 	bl	8009b78 <USBD_CtlError>
                  break;
 80094ae:	e041      	b.n	8009534 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	da0b      	bge.n	80094d0 <USBD_StdEPReq+0x240>
 80094b8:	7bbb      	ldrb	r3, [r7, #14]
 80094ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094be:	4613      	mov	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4413      	add	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	3310      	adds	r3, #16
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	4413      	add	r3, r2
 80094cc:	3304      	adds	r3, #4
 80094ce:	e00b      	b.n	80094e8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094d0:	7bbb      	ldrb	r3, [r7, #14]
 80094d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094d6:	4613      	mov	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	4413      	add	r3, r2
 80094e6:	3304      	adds	r3, #4
 80094e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094ea:	7bbb      	ldrb	r3, [r7, #14]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <USBD_StdEPReq+0x266>
 80094f0:	7bbb      	ldrb	r3, [r7, #14]
 80094f2:	2b80      	cmp	r3, #128	@ 0x80
 80094f4:	d103      	bne.n	80094fe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	2200      	movs	r2, #0
 80094fa:	601a      	str	r2, [r3, #0]
 80094fc:	e00e      	b.n	800951c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f001 f934 	bl	800a770 <USBD_LL_IsStallEP>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	2201      	movs	r2, #1
 8009512:	601a      	str	r2, [r3, #0]
 8009514:	e002      	b.n	800951c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	2200      	movs	r2, #0
 800951a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	2202      	movs	r2, #2
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fb92 	bl	8009c4c <USBD_CtlSendData>
              break;
 8009528:	e004      	b.n	8009534 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800952a:	6839      	ldr	r1, [r7, #0]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fb23 	bl	8009b78 <USBD_CtlError>
              break;
 8009532:	bf00      	nop
          }
          break;
 8009534:	e004      	b.n	8009540 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fb1d 	bl	8009b78 <USBD_CtlError>
          break;
 800953e:	bf00      	nop
      }
      break;
 8009540:	e004      	b.n	800954c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fb17 	bl	8009b78 <USBD_CtlError>
      break;
 800954a:	bf00      	nop
  }

  return ret;
 800954c:	7bfb      	ldrb	r3, [r7, #15]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
	...

08009558 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009566:	2300      	movs	r3, #0
 8009568:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800956a:	2300      	movs	r3, #0
 800956c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	885b      	ldrh	r3, [r3, #2]
 8009572:	0a1b      	lsrs	r3, r3, #8
 8009574:	b29b      	uxth	r3, r3
 8009576:	3b01      	subs	r3, #1
 8009578:	2b06      	cmp	r3, #6
 800957a:	f200 8128 	bhi.w	80097ce <USBD_GetDescriptor+0x276>
 800957e:	a201      	add	r2, pc, #4	@ (adr r2, 8009584 <USBD_GetDescriptor+0x2c>)
 8009580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009584:	080095a1 	.word	0x080095a1
 8009588:	080095b9 	.word	0x080095b9
 800958c:	080095f9 	.word	0x080095f9
 8009590:	080097cf 	.word	0x080097cf
 8009594:	080097cf 	.word	0x080097cf
 8009598:	0800976f 	.word	0x0800976f
 800959c:	0800979b 	.word	0x0800979b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	7c12      	ldrb	r2, [r2, #16]
 80095ac:	f107 0108 	add.w	r1, r7, #8
 80095b0:	4610      	mov	r0, r2
 80095b2:	4798      	blx	r3
 80095b4:	60f8      	str	r0, [r7, #12]
      break;
 80095b6:	e112      	b.n	80097de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	7c1b      	ldrb	r3, [r3, #16]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10d      	bne.n	80095dc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c8:	f107 0208 	add.w	r2, r7, #8
 80095cc:	4610      	mov	r0, r2
 80095ce:	4798      	blx	r3
 80095d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3301      	adds	r3, #1
 80095d6:	2202      	movs	r2, #2
 80095d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095da:	e100      	b.n	80097de <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e4:	f107 0208 	add.w	r2, r7, #8
 80095e8:	4610      	mov	r0, r2
 80095ea:	4798      	blx	r3
 80095ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3301      	adds	r3, #1
 80095f2:	2202      	movs	r2, #2
 80095f4:	701a      	strb	r2, [r3, #0]
      break;
 80095f6:	e0f2      	b.n	80097de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	885b      	ldrh	r3, [r3, #2]
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b05      	cmp	r3, #5
 8009600:	f200 80ac 	bhi.w	800975c <USBD_GetDescriptor+0x204>
 8009604:	a201      	add	r2, pc, #4	@ (adr r2, 800960c <USBD_GetDescriptor+0xb4>)
 8009606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960a:	bf00      	nop
 800960c:	08009625 	.word	0x08009625
 8009610:	08009659 	.word	0x08009659
 8009614:	0800968d 	.word	0x0800968d
 8009618:	080096c1 	.word	0x080096c1
 800961c:	080096f5 	.word	0x080096f5
 8009620:	08009729 	.word	0x08009729
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00b      	beq.n	8009648 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	7c12      	ldrb	r2, [r2, #16]
 800963c:	f107 0108 	add.w	r1, r7, #8
 8009640:	4610      	mov	r0, r2
 8009642:	4798      	blx	r3
 8009644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009646:	e091      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fa94 	bl	8009b78 <USBD_CtlError>
            err++;
 8009650:	7afb      	ldrb	r3, [r7, #11]
 8009652:	3301      	adds	r3, #1
 8009654:	72fb      	strb	r3, [r7, #11]
          break;
 8009656:	e089      	b.n	800976c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00b      	beq.n	800967c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	7c12      	ldrb	r2, [r2, #16]
 8009670:	f107 0108 	add.w	r1, r7, #8
 8009674:	4610      	mov	r0, r2
 8009676:	4798      	blx	r3
 8009678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800967a:	e077      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fa7a 	bl	8009b78 <USBD_CtlError>
            err++;
 8009684:	7afb      	ldrb	r3, [r7, #11]
 8009686:	3301      	adds	r3, #1
 8009688:	72fb      	strb	r3, [r7, #11]
          break;
 800968a:	e06f      	b.n	800976c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00b      	beq.n	80096b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	7c12      	ldrb	r2, [r2, #16]
 80096a4:	f107 0108 	add.w	r1, r7, #8
 80096a8:	4610      	mov	r0, r2
 80096aa:	4798      	blx	r3
 80096ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ae:	e05d      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fa60 	bl	8009b78 <USBD_CtlError>
            err++;
 80096b8:	7afb      	ldrb	r3, [r7, #11]
 80096ba:	3301      	adds	r3, #1
 80096bc:	72fb      	strb	r3, [r7, #11]
          break;
 80096be:	e055      	b.n	800976c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00b      	beq.n	80096e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	7c12      	ldrb	r2, [r2, #16]
 80096d8:	f107 0108 	add.w	r1, r7, #8
 80096dc:	4610      	mov	r0, r2
 80096de:	4798      	blx	r3
 80096e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096e2:	e043      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fa46 	bl	8009b78 <USBD_CtlError>
            err++;
 80096ec:	7afb      	ldrb	r3, [r7, #11]
 80096ee:	3301      	adds	r3, #1
 80096f0:	72fb      	strb	r3, [r7, #11]
          break;
 80096f2:	e03b      	b.n	800976c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096fa:	695b      	ldr	r3, [r3, #20]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00b      	beq.n	8009718 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009706:	695b      	ldr	r3, [r3, #20]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	7c12      	ldrb	r2, [r2, #16]
 800970c:	f107 0108 	add.w	r1, r7, #8
 8009710:	4610      	mov	r0, r2
 8009712:	4798      	blx	r3
 8009714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009716:	e029      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fa2c 	bl	8009b78 <USBD_CtlError>
            err++;
 8009720:	7afb      	ldrb	r3, [r7, #11]
 8009722:	3301      	adds	r3, #1
 8009724:	72fb      	strb	r3, [r7, #11]
          break;
 8009726:	e021      	b.n	800976c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00b      	beq.n	800974c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	7c12      	ldrb	r2, [r2, #16]
 8009740:	f107 0108 	add.w	r1, r7, #8
 8009744:	4610      	mov	r0, r2
 8009746:	4798      	blx	r3
 8009748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800974a:	e00f      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800974c:	6839      	ldr	r1, [r7, #0]
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fa12 	bl	8009b78 <USBD_CtlError>
            err++;
 8009754:	7afb      	ldrb	r3, [r7, #11]
 8009756:	3301      	adds	r3, #1
 8009758:	72fb      	strb	r3, [r7, #11]
          break;
 800975a:	e007      	b.n	800976c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fa0a 	bl	8009b78 <USBD_CtlError>
          err++;
 8009764:	7afb      	ldrb	r3, [r7, #11]
 8009766:	3301      	adds	r3, #1
 8009768:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800976a:	e038      	b.n	80097de <USBD_GetDescriptor+0x286>
 800976c:	e037      	b.n	80097de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	7c1b      	ldrb	r3, [r3, #16]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d109      	bne.n	800978a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800977c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800977e:	f107 0208 	add.w	r2, r7, #8
 8009782:	4610      	mov	r0, r2
 8009784:	4798      	blx	r3
 8009786:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009788:	e029      	b.n	80097de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f9f3 	bl	8009b78 <USBD_CtlError>
        err++;
 8009792:	7afb      	ldrb	r3, [r7, #11]
 8009794:	3301      	adds	r3, #1
 8009796:	72fb      	strb	r3, [r7, #11]
      break;
 8009798:	e021      	b.n	80097de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	7c1b      	ldrb	r3, [r3, #16]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10d      	bne.n	80097be <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097aa:	f107 0208 	add.w	r2, r7, #8
 80097ae:	4610      	mov	r0, r2
 80097b0:	4798      	blx	r3
 80097b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3301      	adds	r3, #1
 80097b8:	2207      	movs	r2, #7
 80097ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097bc:	e00f      	b.n	80097de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f9d9 	bl	8009b78 <USBD_CtlError>
        err++;
 80097c6:	7afb      	ldrb	r3, [r7, #11]
 80097c8:	3301      	adds	r3, #1
 80097ca:	72fb      	strb	r3, [r7, #11]
      break;
 80097cc:	e007      	b.n	80097de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f9d1 	bl	8009b78 <USBD_CtlError>
      err++;
 80097d6:	7afb      	ldrb	r3, [r7, #11]
 80097d8:	3301      	adds	r3, #1
 80097da:	72fb      	strb	r3, [r7, #11]
      break;
 80097dc:	bf00      	nop
  }

  if (err != 0U)
 80097de:	7afb      	ldrb	r3, [r7, #11]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d11c      	bne.n	800981e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80097e4:	893b      	ldrh	r3, [r7, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d011      	beq.n	800980e <USBD_GetDescriptor+0x2b6>
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	88db      	ldrh	r3, [r3, #6]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00d      	beq.n	800980e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	88da      	ldrh	r2, [r3, #6]
 80097f6:	893b      	ldrh	r3, [r7, #8]
 80097f8:	4293      	cmp	r3, r2
 80097fa:	bf28      	it	cs
 80097fc:	4613      	movcs	r3, r2
 80097fe:	b29b      	uxth	r3, r3
 8009800:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009802:	893b      	ldrh	r3, [r7, #8]
 8009804:	461a      	mov	r2, r3
 8009806:	68f9      	ldr	r1, [r7, #12]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 fa1f 	bl	8009c4c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	88db      	ldrh	r3, [r3, #6]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d104      	bne.n	8009820 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fa76 	bl	8009d08 <USBD_CtlSendStatus>
 800981c:	e000      	b.n	8009820 <USBD_GetDescriptor+0x2c8>
    return;
 800981e:	bf00      	nop
    }
  }
}
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop

08009828 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	889b      	ldrh	r3, [r3, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d130      	bne.n	800989c <USBD_SetAddress+0x74>
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	88db      	ldrh	r3, [r3, #6]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d12c      	bne.n	800989c <USBD_SetAddress+0x74>
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	885b      	ldrh	r3, [r3, #2]
 8009846:	2b7f      	cmp	r3, #127	@ 0x7f
 8009848:	d828      	bhi.n	800989c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	885b      	ldrh	r3, [r3, #2]
 800984e:	b2db      	uxtb	r3, r3
 8009850:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009854:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800985c:	2b03      	cmp	r3, #3
 800985e:	d104      	bne.n	800986a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f988 	bl	8009b78 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009868:	e01d      	b.n	80098a6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	7bfa      	ldrb	r2, [r7, #15]
 800986e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009872:	7bfb      	ldrb	r3, [r7, #15]
 8009874:	4619      	mov	r1, r3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 ffa6 	bl	800a7c8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fa43 	bl	8009d08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d004      	beq.n	8009892 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2202      	movs	r2, #2
 800988c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009890:	e009      	b.n	80098a6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800989a:	e004      	b.n	80098a6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f96a 	bl	8009b78 <USBD_CtlError>
  }
}
 80098a4:	bf00      	nop
 80098a6:	bf00      	nop
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
	...

080098b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	885b      	ldrh	r3, [r3, #2]
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	4b41      	ldr	r3, [pc, #260]	@ (80099c8 <USBD_SetConfig+0x118>)
 80098c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80098c4:	4b40      	ldr	r3, [pc, #256]	@ (80099c8 <USBD_SetConfig+0x118>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d904      	bls.n	80098d6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f952 	bl	8009b78 <USBD_CtlError>
 80098d4:	e075      	b.n	80099c2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d002      	beq.n	80098e6 <USBD_SetConfig+0x36>
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d023      	beq.n	800992c <USBD_SetConfig+0x7c>
 80098e4:	e062      	b.n	80099ac <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80098e6:	4b38      	ldr	r3, [pc, #224]	@ (80099c8 <USBD_SetConfig+0x118>)
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d01a      	beq.n	8009924 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80098ee:	4b36      	ldr	r3, [pc, #216]	@ (80099c8 <USBD_SetConfig+0x118>)
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	461a      	mov	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2203      	movs	r2, #3
 80098fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009900:	4b31      	ldr	r3, [pc, #196]	@ (80099c8 <USBD_SetConfig+0x118>)
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	4619      	mov	r1, r3
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7ff f9e7 	bl	8008cda <USBD_SetClassConfig>
 800990c:	4603      	mov	r3, r0
 800990e:	2b02      	cmp	r3, #2
 8009910:	d104      	bne.n	800991c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f92f 	bl	8009b78 <USBD_CtlError>
            return;
 800991a:	e052      	b.n	80099c2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f9f3 	bl	8009d08 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009922:	e04e      	b.n	80099c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f9ef 	bl	8009d08 <USBD_CtlSendStatus>
        break;
 800992a:	e04a      	b.n	80099c2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800992c:	4b26      	ldr	r3, [pc, #152]	@ (80099c8 <USBD_SetConfig+0x118>)
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d112      	bne.n	800995a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2202      	movs	r2, #2
 8009938:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800993c:	4b22      	ldr	r3, [pc, #136]	@ (80099c8 <USBD_SetConfig+0x118>)
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	461a      	mov	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009946:	4b20      	ldr	r3, [pc, #128]	@ (80099c8 <USBD_SetConfig+0x118>)
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	4619      	mov	r1, r3
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff f9e3 	bl	8008d18 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f9d8 	bl	8009d08 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009958:	e033      	b.n	80099c2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800995a:	4b1b      	ldr	r3, [pc, #108]	@ (80099c8 <USBD_SetConfig+0x118>)
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	429a      	cmp	r2, r3
 8009966:	d01d      	beq.n	80099a4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	b2db      	uxtb	r3, r3
 800996e:	4619      	mov	r1, r3
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f7ff f9d1 	bl	8008d18 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009976:	4b14      	ldr	r3, [pc, #80]	@ (80099c8 <USBD_SetConfig+0x118>)
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	461a      	mov	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009980:	4b11      	ldr	r3, [pc, #68]	@ (80099c8 <USBD_SetConfig+0x118>)
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7ff f9a7 	bl	8008cda <USBD_SetClassConfig>
 800998c:	4603      	mov	r3, r0
 800998e:	2b02      	cmp	r3, #2
 8009990:	d104      	bne.n	800999c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 f8ef 	bl	8009b78 <USBD_CtlError>
            return;
 800999a:	e012      	b.n	80099c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f9b3 	bl	8009d08 <USBD_CtlSendStatus>
        break;
 80099a2:	e00e      	b.n	80099c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f9af 	bl	8009d08 <USBD_CtlSendStatus>
        break;
 80099aa:	e00a      	b.n	80099c2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f8e2 	bl	8009b78 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80099b4:	4b04      	ldr	r3, [pc, #16]	@ (80099c8 <USBD_SetConfig+0x118>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	4619      	mov	r1, r3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7ff f9ac 	bl	8008d18 <USBD_ClrClassConfig>
        break;
 80099c0:	bf00      	nop
    }
  }
}
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	20002769 	.word	0x20002769

080099cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	88db      	ldrh	r3, [r3, #6]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d004      	beq.n	80099e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099de:	6839      	ldr	r1, [r7, #0]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f8c9 	bl	8009b78 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099e6:	e022      	b.n	8009a2e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	dc02      	bgt.n	80099f8 <USBD_GetConfig+0x2c>
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	dc03      	bgt.n	80099fe <USBD_GetConfig+0x32>
 80099f6:	e015      	b.n	8009a24 <USBD_GetConfig+0x58>
 80099f8:	2b03      	cmp	r3, #3
 80099fa:	d00b      	beq.n	8009a14 <USBD_GetConfig+0x48>
 80099fc:	e012      	b.n	8009a24 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	3308      	adds	r3, #8
 8009a08:	2201      	movs	r2, #1
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f91d 	bl	8009c4c <USBD_CtlSendData>
        break;
 8009a12:	e00c      	b.n	8009a2e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	3304      	adds	r3, #4
 8009a18:	2201      	movs	r2, #1
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f915 	bl	8009c4c <USBD_CtlSendData>
        break;
 8009a22:	e004      	b.n	8009a2e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f8a6 	bl	8009b78 <USBD_CtlError>
        break;
 8009a2c:	bf00      	nop
}
 8009a2e:	bf00      	nop
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b082      	sub	sp, #8
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a46:	3b01      	subs	r3, #1
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d81e      	bhi.n	8009a8a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	88db      	ldrh	r3, [r3, #6]
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d004      	beq.n	8009a5e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f88e 	bl	8009b78 <USBD_CtlError>
        break;
 8009a5c:	e01a      	b.n	8009a94 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d005      	beq.n	8009a7a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	f043 0202 	orr.w	r2, r3, #2
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	330c      	adds	r3, #12
 8009a7e:	2202      	movs	r2, #2
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f8e2 	bl	8009c4c <USBD_CtlSendData>
      break;
 8009a88:	e004      	b.n	8009a94 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f873 	bl	8009b78 <USBD_CtlError>
      break;
 8009a92:	bf00      	nop
  }
}
 8009a94:	bf00      	nop
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	885b      	ldrh	r3, [r3, #2]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d106      	bne.n	8009abc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f926 	bl	8009d08 <USBD_CtlSendStatus>
  }
}
 8009abc:	bf00      	nop
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d80b      	bhi.n	8009af2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	885b      	ldrh	r3, [r3, #2]
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d10c      	bne.n	8009afc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f90c 	bl	8009d08 <USBD_CtlSendStatus>
      }
      break;
 8009af0:	e004      	b.n	8009afc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f83f 	bl	8009b78 <USBD_CtlError>
      break;
 8009afa:	e000      	b.n	8009afe <USBD_ClrFeature+0x3a>
      break;
 8009afc:	bf00      	nop
  }
}
 8009afe:	bf00      	nop
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b06:	b480      	push	{r7}
 8009b08:	b083      	sub	sp, #12
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	781a      	ldrb	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	785a      	ldrb	r2, [r3, #1]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	3302      	adds	r3, #2
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	3303      	adds	r3, #3
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	021b      	lsls	r3, r3, #8
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	4413      	add	r3, r2
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	461a      	mov	r2, r3
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	3305      	adds	r3, #5
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	021b      	lsls	r3, r3, #8
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	4413      	add	r3, r2
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	3306      	adds	r3, #6
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	3307      	adds	r3, #7
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	021b      	lsls	r3, r3, #8
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	4413      	add	r3, r2
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	80da      	strh	r2, [r3, #6]

}
 8009b6e:	bf00      	nop
 8009b70:	370c      	adds	r7, #12
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bc80      	pop	{r7}
 8009b76:	4770      	bx	lr

08009b78 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009b82:	2180      	movs	r1, #128	@ 0x80
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fd87 	bl	800a698 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fd83 	bl	800a698 <USBD_LL_StallEP>
}
 8009b92:	bf00      	nop
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b086      	sub	sp, #24
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	60f8      	str	r0, [r7, #12]
 8009ba2:	60b9      	str	r1, [r7, #8]
 8009ba4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d032      	beq.n	8009c16 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f000 f834 	bl	8009c1e <USBD_GetLen>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	3301      	adds	r3, #1
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	005b      	lsls	r3, r3, #1
 8009bbe:	b29a      	uxth	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009bc4:	7dfb      	ldrb	r3, [r7, #23]
 8009bc6:	1c5a      	adds	r2, r3, #1
 8009bc8:	75fa      	strb	r2, [r7, #23]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	4413      	add	r3, r2
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	7812      	ldrb	r2, [r2, #0]
 8009bd4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	1c5a      	adds	r2, r3, #1
 8009bda:	75fa      	strb	r2, [r7, #23]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	4413      	add	r3, r2
 8009be2:	2203      	movs	r2, #3
 8009be4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009be6:	e012      	b.n	8009c0e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	1c5a      	adds	r2, r3, #1
 8009bec:	60fa      	str	r2, [r7, #12]
 8009bee:	7dfa      	ldrb	r2, [r7, #23]
 8009bf0:	1c51      	adds	r1, r2, #1
 8009bf2:	75f9      	strb	r1, [r7, #23]
 8009bf4:	4611      	mov	r1, r2
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	440a      	add	r2, r1
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009bfe:	7dfb      	ldrb	r3, [r7, #23]
 8009c00:	1c5a      	adds	r2, r3, #1
 8009c02:	75fa      	strb	r2, [r7, #23]
 8009c04:	461a      	mov	r2, r3
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	4413      	add	r3, r2
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1e8      	bne.n	8009be8 <USBD_GetString+0x4e>
    }
  }
}
 8009c16:	bf00      	nop
 8009c18:	3718      	adds	r7, #24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b085      	sub	sp, #20
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009c2a:	e005      	b.n	8009c38 <USBD_GetLen+0x1a>
  {
    len++;
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	3301      	adds	r3, #1
 8009c36:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1f5      	bne.n	8009c2c <USBD_GetLen+0xe>
  }

  return len;
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bc80      	pop	{r7}
 8009c4a:	4770      	bx	lr

08009c4c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	4613      	mov	r3, r2
 8009c58:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2202      	movs	r2, #2
 8009c5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009c62:	88fa      	ldrh	r2, [r7, #6]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009c68:	88fa      	ldrh	r2, [r7, #6]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c6e:	88fb      	ldrh	r3, [r7, #6]
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	2100      	movs	r1, #0
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f000 fddd 	bl	800a834 <USBD_LL_Transmit>

  return USBD_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c92:	88fb      	ldrh	r3, [r7, #6]
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	2100      	movs	r1, #0
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 fdcb 	bl	800a834 <USBD_LL_Transmit>

  return USBD_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2203      	movs	r2, #3
 8009cba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009cbe:	88fa      	ldrh	r2, [r7, #6]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009cc6:	88fa      	ldrh	r2, [r7, #6]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cce:	88fb      	ldrh	r3, [r7, #6]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f000 fde7 	bl	800a8a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cf2:	88fb      	ldrh	r3, [r7, #6]
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f000 fdd5 	bl	800a8a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2204      	movs	r2, #4
 8009d14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d18:	2300      	movs	r3, #0
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fd88 	bl	800a834 <USBD_LL_Transmit>

  return USBD_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b082      	sub	sp, #8
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2205      	movs	r2, #5
 8009d3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d3e:	2300      	movs	r3, #0
 8009d40:	2200      	movs	r2, #0
 8009d42:	2100      	movs	r1, #0
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fdaf 	bl	800a8a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	4912      	ldr	r1, [pc, #72]	@ (8009da4 <MX_USB_DEVICE_Init+0x50>)
 8009d5c:	4812      	ldr	r0, [pc, #72]	@ (8009da8 <MX_USB_DEVICE_Init+0x54>)
 8009d5e:	f7fe ff62 	bl	8008c26 <USBD_Init>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d001      	beq.n	8009d6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d68:	f7f7 f8fc 	bl	8000f64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d6c:	490f      	ldr	r1, [pc, #60]	@ (8009dac <MX_USB_DEVICE_Init+0x58>)
 8009d6e:	480e      	ldr	r0, [pc, #56]	@ (8009da8 <MX_USB_DEVICE_Init+0x54>)
 8009d70:	f7fe ff84 	bl	8008c7c <USBD_RegisterClass>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d7a:	f7f7 f8f3 	bl	8000f64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d7e:	490c      	ldr	r1, [pc, #48]	@ (8009db0 <MX_USB_DEVICE_Init+0x5c>)
 8009d80:	4809      	ldr	r0, [pc, #36]	@ (8009da8 <MX_USB_DEVICE_Init+0x54>)
 8009d82:	f7fe fea7 	bl	8008ad4 <USBD_CDC_RegisterInterface>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d8c:	f7f7 f8ea 	bl	8000f64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d90:	4805      	ldr	r0, [pc, #20]	@ (8009da8 <MX_USB_DEVICE_Init+0x54>)
 8009d92:	f7fe ff8c 	bl	8008cae <USBD_Start>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009d9c:	f7f7 f8e2 	bl	8000f64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009da0:	bf00      	nop
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	20000210 	.word	0x20000210
 8009da8:	2000276c 	.word	0x2000276c
 8009dac:	20000018 	.word	0x20000018
 8009db0:	20000200 	.word	0x20000200

08009db4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	4603      	mov	r3, r0
 8009dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	db0c      	blt.n	8009de0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009dc6:	79fb      	ldrb	r3, [r7, #7]
 8009dc8:	f003 021f 	and.w	r2, r3, #31
 8009dcc:	4907      	ldr	r1, [pc, #28]	@ (8009dec <__NVIC_ClearPendingIRQ+0x38>)
 8009dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dd2:	095b      	lsrs	r3, r3, #5
 8009dd4:	2001      	movs	r0, #1
 8009dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8009dda:	3360      	adds	r3, #96	@ 0x60
 8009ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bc80      	pop	{r7}
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	e000e100 	.word	0xe000e100

08009df0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009df4:	2200      	movs	r2, #0
 8009df6:	4905      	ldr	r1, [pc, #20]	@ (8009e0c <CDC_Init_FS+0x1c>)
 8009df8:	4805      	ldr	r0, [pc, #20]	@ (8009e10 <CDC_Init_FS+0x20>)
 8009dfa:	f7fe fe81 	bl	8008b00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009dfe:	4905      	ldr	r1, [pc, #20]	@ (8009e14 <CDC_Init_FS+0x24>)
 8009e00:	4803      	ldr	r0, [pc, #12]	@ (8009e10 <CDC_Init_FS+0x20>)
 8009e02:	f7fe fe96 	bl	8008b32 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009e06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	20002c30 	.word	0x20002c30
 8009e10:	2000276c 	.word	0x2000276c
 8009e14:	20002a30 	.word	0x20002a30

08009e18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009e1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bc80      	pop	{r7}
 8009e24:	4770      	bx	lr
	...

08009e28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length, uint16_t index)
{
 8009e28:	b590      	push	{r4, r7, lr}
 8009e2a:	b08b      	sub	sp, #44	@ 0x2c
 8009e2c:	af04      	add	r7, sp, #16
 8009e2e:	60b9      	str	r1, [r7, #8]
 8009e30:	4611      	mov	r1, r2
 8009e32:	461a      	mov	r2, r3
 8009e34:	4603      	mov	r3, r0
 8009e36:	73fb      	strb	r3, [r7, #15]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	81bb      	strh	r3, [r7, #12]
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
 8009e42:	2b23      	cmp	r3, #35	@ 0x23
 8009e44:	f200 80ec 	bhi.w	800a020 <CDC_Control_FS+0x1f8>
 8009e48:	a201      	add	r2, pc, #4	@ (adr r2, 8009e50 <CDC_Control_FS+0x28>)
 8009e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e4e:	bf00      	nop
 8009e50:	0800a021 	.word	0x0800a021
 8009e54:	0800a021 	.word	0x0800a021
 8009e58:	0800a021 	.word	0x0800a021
 8009e5c:	0800a021 	.word	0x0800a021
 8009e60:	0800a021 	.word	0x0800a021
 8009e64:	0800a021 	.word	0x0800a021
 8009e68:	0800a021 	.word	0x0800a021
 8009e6c:	0800a021 	.word	0x0800a021
 8009e70:	0800a021 	.word	0x0800a021
 8009e74:	0800a021 	.word	0x0800a021
 8009e78:	0800a021 	.word	0x0800a021
 8009e7c:	0800a021 	.word	0x0800a021
 8009e80:	0800a021 	.word	0x0800a021
 8009e84:	0800a021 	.word	0x0800a021
 8009e88:	0800a021 	.word	0x0800a021
 8009e8c:	0800a021 	.word	0x0800a021
 8009e90:	0800a021 	.word	0x0800a021
 8009e94:	0800a021 	.word	0x0800a021
 8009e98:	0800a021 	.word	0x0800a021
 8009e9c:	0800a021 	.word	0x0800a021
 8009ea0:	0800a021 	.word	0x0800a021
 8009ea4:	0800a021 	.word	0x0800a021
 8009ea8:	0800a021 	.word	0x0800a021
 8009eac:	0800a021 	.word	0x0800a021
 8009eb0:	0800a021 	.word	0x0800a021
 8009eb4:	0800a021 	.word	0x0800a021
 8009eb8:	0800a021 	.word	0x0800a021
 8009ebc:	0800a021 	.word	0x0800a021
 8009ec0:	0800a021 	.word	0x0800a021
 8009ec4:	0800a021 	.word	0x0800a021
 8009ec8:	0800a021 	.word	0x0800a021
 8009ecc:	0800a021 	.word	0x0800a021
 8009ed0:	08009ee1 	.word	0x08009ee1
 8009ed4:	0800a021 	.word	0x0800a021
 8009ed8:	0800a021 	.word	0x0800a021
 8009edc:	0800a021 	.word	0x0800a021
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    {
      uart_ctx_t * const uart_ctx = (index < 2) ? &ctx.uart1 : &ctx.uart2;
 8009ee0:	88fb      	ldrh	r3, [r7, #6]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d801      	bhi.n	8009eea <CDC_Control_FS+0xc2>
 8009ee6:	4b51      	ldr	r3, [pc, #324]	@ (800a02c <CDC_Control_FS+0x204>)
 8009ee8:	e000      	b.n	8009eec <CDC_Control_FS+0xc4>
 8009eea:	4b51      	ldr	r3, [pc, #324]	@ (800a030 <CDC_Control_FS+0x208>)
 8009eec:	617b      	str	r3, [r7, #20]

      USBD_CDC_LineCodingTypeDef *line_coding = (USBD_CDC_LineCodingTypeDef *)pbuf;
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	613b      	str	r3, [r7, #16]
      if (line_coding->bitrate == 0 || line_coding->datatype == 0) {
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	f000 8093 	beq.w	800a022 <CDC_Control_FS+0x1fa>
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	799b      	ldrb	r3, [r3, #6]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f000 808e 	beq.w	800a022 <CDC_Control_FS+0x1fa>
       *    dwDTERate   -> line_coding->bitrate
       *    bCharFormat -> line_coding->format
       *    bParityType -> line_coding->paritytype
       *    bDataBits   -> line_coding->datatype
       */      
      uart_ctx->huart->Init.BaudRate = line_coding->bitrate;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	6812      	ldr	r2, [r2, #0]
 8009f0e:	605a      	str	r2, [r3, #4]
      uart_ctx->huart->Init.WordLength = (line_coding->datatype == 8) ? UART_WORDLENGTH_8B : UART_WORDLENGTH_9B;
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	799b      	ldrb	r3, [r3, #6]
 8009f14:	2b08      	cmp	r3, #8
 8009f16:	d101      	bne.n	8009f1c <CDC_Control_FS+0xf4>
 8009f18:	2200      	movs	r2, #0
 8009f1a:	e001      	b.n	8009f20 <CDC_Control_FS+0xf8>
 8009f1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	609a      	str	r2, [r3, #8]
      uart_ctx->huart->Init.StopBits = (line_coding->format == 0) ? UART_STOPBITS_1 : UART_STOPBITS_2;
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	791b      	ldrb	r3, [r3, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d101      	bne.n	8009f32 <CDC_Control_FS+0x10a>
 8009f2e:	2200      	movs	r2, #0
 8009f30:	e001      	b.n	8009f36 <CDC_Control_FS+0x10e>
 8009f32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	60da      	str	r2, [r3, #12]
      uart_ctx->huart->Init.Parity = (line_coding->paritytype == 0) ? UART_PARITY_NONE : (line_coding->paritytype == 1) ? UART_PARITY_ODD : UART_PARITY_EVEN;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	795b      	ldrb	r3, [r3, #5]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d009      	beq.n	8009f58 <CDC_Control_FS+0x130>
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	795b      	ldrb	r3, [r3, #5]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d102      	bne.n	8009f52 <CDC_Control_FS+0x12a>
 8009f4c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009f50:	e003      	b.n	8009f5a <CDC_Control_FS+0x132>
 8009f52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f56:	e000      	b.n	8009f5a <CDC_Control_FS+0x132>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	6852      	ldr	r2, [r2, #4]
 8009f5e:	6113      	str	r3, [r2, #16]
      uart_ctx->huart->Init.Mode = UART_MODE_TX_RX;
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	220c      	movs	r2, #12
 8009f66:	615a      	str	r2, [r3, #20]
      uart_ctx->huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	619a      	str	r2, [r3, #24]
      uart_ctx->huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	61da      	str	r2, [r3, #28]
        
      __HAL_UART_DISABLE(uart_ctx->huart);
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68da      	ldr	r2, [r3, #12]
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009f8a:	60da      	str	r2, [r3, #12]
      if (HAL_UART_Init(uart_ctx->huart) != HAL_OK) {
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7fa ffc6 	bl	8004f22 <HAL_UART_Init>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d004      	beq.n	8009fa6 <CDC_Control_FS+0x17e>
        _Error_Handler(__FILE__, __LINE__);
 8009f9c:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8009fa0:	4824      	ldr	r0, [pc, #144]	@ (800a034 <CDC_Control_FS+0x20c>)
 8009fa2:	f7f6 ffcb 	bl	8000f3c <_Error_Handler>
      }

      __HAL_UART_ENABLE_IT(uart_ctx->huart, UART_IT_IDLE);
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68da      	ldr	r2, [r3, #12]
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f042 0210 	orr.w	r2, r2, #16
 8009fb8:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE(uart_ctx->huart);
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68da      	ldr	r2, [r3, #12]
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009fcc:	60da      	str	r2, [r3, #12]
      NVIC_ClearPendingIRQ(uart_ctx->irq_num);
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7ff feed 	bl	8009db4 <__NVIC_ClearPendingIRQ>

      HAL_UART_DMAStop(uart_ctx->huart);
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fb f885 	bl	80050ee <HAL_UART_DMAStop>
      HAL_UART_Receive_DMA(uart_ctx->huart, (uint8_t *)uart_ctx->buf.data[0], DBL_BUF_TOTAL_LEN);
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	6858      	ldr	r0, [r3, #4]
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	3314      	adds	r3, #20
 8009fec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	f7fb f857 	bl	80050a4 <HAL_UART_Receive_DMA>

      SEGGER_RTT_printf(0, "LINE_CODING: UART=%s, bitrate=%d, format=%d, parity=%d, datatype=%d\n",
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	6819      	ldr	r1, [r3, #0]
        uart_ctx->name, line_coding->bitrate, line_coding->format, line_coding->paritytype, line_coding->datatype);
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	791b      	ldrb	r3, [r3, #4]
      SEGGER_RTT_printf(0, "LINE_CODING: UART=%s, bitrate=%d, format=%d, parity=%d, datatype=%d\n",
 800a002:	4618      	mov	r0, r3
        uart_ctx->name, line_coding->bitrate, line_coding->format, line_coding->paritytype, line_coding->datatype);
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	795b      	ldrb	r3, [r3, #5]
      SEGGER_RTT_printf(0, "LINE_CODING: UART=%s, bitrate=%d, format=%d, parity=%d, datatype=%d\n",
 800a008:	461c      	mov	r4, r3
        uart_ctx->name, line_coding->bitrate, line_coding->format, line_coding->paritytype, line_coding->datatype);
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	799b      	ldrb	r3, [r3, #6]
      SEGGER_RTT_printf(0, "LINE_CODING: UART=%s, bitrate=%d, format=%d, parity=%d, datatype=%d\n",
 800a00e:	9302      	str	r3, [sp, #8]
 800a010:	9401      	str	r4, [sp, #4]
 800a012:	9000      	str	r0, [sp, #0]
 800a014:	460b      	mov	r3, r1
 800a016:	4908      	ldr	r1, [pc, #32]	@ (800a038 <CDC_Control_FS+0x210>)
 800a018:	2000      	movs	r0, #0
 800a01a:	f7f6 fd7f 	bl	8000b1c <SEGGER_RTT_printf>
    }
    break;
 800a01e:	e000      	b.n	800a022 <CDC_Control_FS+0x1fa>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a020:	bf00      	nop
  }

  return (USBD_OK);
 800a022:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a024:	4618      	mov	r0, r3
 800a026:	371c      	adds	r7, #28
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd90      	pop	{r4, r7, pc}
 800a02c:	2000055c 	.word	0x2000055c
 800a030:	20001584 	.word	0x20001584
 800a034:	0800aa50 	.word	0x0800aa50
 800a038:	0800aa70 	.word	0x0800aa70

0800a03c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len, uint16_t index)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	4613      	mov	r3, r2
 800a048:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a04a:	68f9      	ldr	r1, [r7, #12]
 800a04c:	480e      	ldr	r0, [pc, #56]	@ (800a088 <CDC_Receive_FS+0x4c>)
 800a04e:	f7fe fd70 	bl	8008b32 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS, index);
 800a052:	88fb      	ldrh	r3, [r7, #6]
 800a054:	4619      	mov	r1, r3
 800a056:	480c      	ldr	r0, [pc, #48]	@ (800a088 <CDC_Receive_FS+0x4c>)
 800a058:	f7fe fdaf 	bl	8008bba <USBD_CDC_ReceivePacket>
#if defined(LOOPBACK_TEST)
  CDC_Transmit_FS(Buf, *Len, index);
#else
  // SEGGER_RTT_printf(0, "[%s] Tx: %c\n", (index < 2) ? "uart1" : "uart2", Buf[0]);
  HAL_UART_Transmit_DMA((index < 2) ? ctx.uart1.huart : ctx.uart2.huart, Buf, *Len);
 800a05c:	88fb      	ldrh	r3, [r7, #6]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d802      	bhi.n	800a068 <CDC_Receive_FS+0x2c>
 800a062:	4b0a      	ldr	r3, [pc, #40]	@ (800a08c <CDC_Receive_FS+0x50>)
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	e003      	b.n	800a070 <CDC_Receive_FS+0x34>
 800a068:	4b08      	ldr	r3, [pc, #32]	@ (800a08c <CDC_Receive_FS+0x50>)
 800a06a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	6812      	ldr	r2, [r2, #0]
 800a074:	b292      	uxth	r2, r2
 800a076:	68f9      	ldr	r1, [r7, #12]
 800a078:	4618      	mov	r0, r3
 800a07a:	f7fa ffa3 	bl	8004fc4 <HAL_UART_Transmit_DMA>
#endif
  return (USBD_OK);
 800a07e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a080:	4618      	mov	r0, r3
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	2000276c 	.word	0x2000276c
 800a08c:	2000055c 	.word	0x2000055c

0800a090 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len, uint16_t index)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	807b      	strh	r3, [r7, #2]
 800a09c:	4613      	mov	r3, r2
 800a09e:	803b      	strh	r3, [r7, #0]
  uint8_t result = USBD_OK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 7 */
  int i;
  int rest_len;
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a0a4:	4b2f      	ldr	r3, [pc, #188]	@ (800a164 <CDC_Transmit_FS+0xd4>)
 800a0a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <CDC_Transmit_FS+0x2a>
    return USBD_BUSY;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e050      	b.n	800a15c <CDC_Transmit_FS+0xcc>
  }

  rest_len = Len;
 800a0ba:	887b      	ldrh	r3, [r7, #2]
 800a0bc:	60fb      	str	r3, [r7, #12]
  for (i = 0; result == USBD_OK && i <= Len; rest_len = Len - i) {
 800a0be:	2300      	movs	r3, #0
 800a0c0:	613b      	str	r3, [r7, #16]
 800a0c2:	e043      	b.n	800a14c <CDC_Transmit_FS+0xbc>
    
    if (rest_len >= USB_FS_MAX_PACKET_SIZE) {
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2b3f      	cmp	r3, #63	@ 0x3f
 800a0c8:	d915      	bls.n	800a0f6 <CDC_Transmit_FS+0x66>
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &Buf[i], USB_FS_MAX_PACKET_SIZE);
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	2240      	movs	r2, #64	@ 0x40
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	4823      	ldr	r0, [pc, #140]	@ (800a164 <CDC_Transmit_FS+0xd4>)
 800a0d6:	f7fe fd13 	bl	8008b00 <USBD_CDC_SetTxBuffer>
      i += USB_FS_MAX_PACKET_SIZE;
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	3340      	adds	r3, #64	@ 0x40
 800a0de:	613b      	str	r3, [r7, #16]
      do {
        result = USBD_CDC_TransmitPacket(&hUsbDeviceFS, index);
 800a0e0:	883b      	ldrh	r3, [r7, #0]
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	481f      	ldr	r0, [pc, #124]	@ (800a164 <CDC_Transmit_FS+0xd4>)
 800a0e6:	f7fe fd37 	bl	8008b58 <USBD_CDC_TransmitPacket>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	75fb      	strb	r3, [r7, #23]
      } while (result == USBD_BUSY);
 800a0ee:	7dfb      	ldrb	r3, [r7, #23]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d0f5      	beq.n	800a0e0 <CDC_Transmit_FS+0x50>
 800a0f4:	e026      	b.n	800a144 <CDC_Transmit_FS+0xb4>

    } else if (rest_len == 0) {
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10f      	bne.n	800a11c <CDC_Transmit_FS+0x8c>
      // It's necessary to send zero-length packet to compliance USB protocol.
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &Buf[0], 0);
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	6879      	ldr	r1, [r7, #4]
 800a100:	4818      	ldr	r0, [pc, #96]	@ (800a164 <CDC_Transmit_FS+0xd4>)
 800a102:	f7fe fcfd 	bl	8008b00 <USBD_CDC_SetTxBuffer>
      do {
        result = USBD_CDC_TransmitPacket(&hUsbDeviceFS, index);
 800a106:	883b      	ldrh	r3, [r7, #0]
 800a108:	4619      	mov	r1, r3
 800a10a:	4816      	ldr	r0, [pc, #88]	@ (800a164 <CDC_Transmit_FS+0xd4>)
 800a10c:	f7fe fd24 	bl	8008b58 <USBD_CDC_TransmitPacket>
 800a110:	4603      	mov	r3, r0
 800a112:	75fb      	strb	r3, [r7, #23]
      } while (result == USBD_BUSY);
 800a114:	7dfb      	ldrb	r3, [r7, #23]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d0f5      	beq.n	800a106 <CDC_Transmit_FS+0x76>
      break;
 800a11a:	e01e      	b.n	800a15a <CDC_Transmit_FS+0xca>

    } else {
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &Buf[i], rest_len);
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	4413      	add	r3, r2
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	b292      	uxth	r2, r2
 800a126:	4619      	mov	r1, r3
 800a128:	480e      	ldr	r0, [pc, #56]	@ (800a164 <CDC_Transmit_FS+0xd4>)
 800a12a:	f7fe fce9 	bl	8008b00 <USBD_CDC_SetTxBuffer>
      do {
        result = USBD_CDC_TransmitPacket(&hUsbDeviceFS, index);
 800a12e:	883b      	ldrh	r3, [r7, #0]
 800a130:	4619      	mov	r1, r3
 800a132:	480c      	ldr	r0, [pc, #48]	@ (800a164 <CDC_Transmit_FS+0xd4>)
 800a134:	f7fe fd10 	bl	8008b58 <USBD_CDC_TransmitPacket>
 800a138:	4603      	mov	r3, r0
 800a13a:	75fb      	strb	r3, [r7, #23]
      } while (result == USBD_BUSY);
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d0f5      	beq.n	800a12e <CDC_Transmit_FS+0x9e>
      break;
 800a142:	e00a      	b.n	800a15a <CDC_Transmit_FS+0xca>
  for (i = 0; result == USBD_OK && i <= Len; rest_len = Len - i) {
 800a144:	887a      	ldrh	r2, [r7, #2]
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	60fb      	str	r3, [r7, #12]
 800a14c:	7dfb      	ldrb	r3, [r7, #23]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d103      	bne.n	800a15a <CDC_Transmit_FS+0xca>
 800a152:	887b      	ldrh	r3, [r7, #2]
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	429a      	cmp	r2, r3
 800a158:	ddb4      	ble.n	800a0c4 <CDC_Transmit_FS+0x34>

    }
  }

  /* USER CODE END 7 */
  return result;
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3718      	adds	r7, #24
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	2000276c 	.word	0x2000276c

0800a168 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	4603      	mov	r3, r0
 800a170:	6039      	str	r1, [r7, #0]
 800a172:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	2212      	movs	r2, #18
 800a178:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a17a:	4b03      	ldr	r3, [pc, #12]	@ (800a188 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	bc80      	pop	{r7}
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop
 800a188:	2000022c 	.word	0x2000022c

0800a18c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	4603      	mov	r3, r0
 800a194:	6039      	str	r1, [r7, #0]
 800a196:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	2204      	movs	r2, #4
 800a19c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a19e:	4b03      	ldr	r3, [pc, #12]	@ (800a1ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bc80      	pop	{r7}
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	20000240 	.word	0x20000240

0800a1b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	6039      	str	r1, [r7, #0]
 800a1ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1bc:	79fb      	ldrb	r3, [r7, #7]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d105      	bne.n	800a1ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	4907      	ldr	r1, [pc, #28]	@ (800a1e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1c6:	4808      	ldr	r0, [pc, #32]	@ (800a1e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a1c8:	f7ff fce7 	bl	8009b9a <USBD_GetString>
 800a1cc:	e004      	b.n	800a1d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1ce:	683a      	ldr	r2, [r7, #0]
 800a1d0:	4904      	ldr	r1, [pc, #16]	@ (800a1e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1d2:	4805      	ldr	r0, [pc, #20]	@ (800a1e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a1d4:	f7ff fce1 	bl	8009b9a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1d8:	4b02      	ldr	r3, [pc, #8]	@ (800a1e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	20002e30 	.word	0x20002e30
 800a1e8:	0800aab8 	.word	0x0800aab8

0800a1ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	6039      	str	r1, [r7, #0]
 800a1f6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	4904      	ldr	r1, [pc, #16]	@ (800a20c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a1fc:	4804      	ldr	r0, [pc, #16]	@ (800a210 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a1fe:	f7ff fccc 	bl	8009b9a <USBD_GetString>
  return USBD_StrDesc;
 800a202:	4b02      	ldr	r3, [pc, #8]	@ (800a20c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a204:	4618      	mov	r0, r3
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	20002e30 	.word	0x20002e30
 800a210:	0800aac4 	.word	0x0800aac4

0800a214 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	4603      	mov	r3, r0
 800a21c:	6039      	str	r1, [r7, #0]
 800a21e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a220:	79fb      	ldrb	r3, [r7, #7]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d105      	bne.n	800a232 <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800a226:	683a      	ldr	r2, [r7, #0]
 800a228:	4907      	ldr	r1, [pc, #28]	@ (800a248 <USBD_FS_SerialStrDescriptor+0x34>)
 800a22a:	4808      	ldr	r0, [pc, #32]	@ (800a24c <USBD_FS_SerialStrDescriptor+0x38>)
 800a22c:	f7ff fcb5 	bl	8009b9a <USBD_GetString>
 800a230:	e004      	b.n	800a23c <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	4904      	ldr	r1, [pc, #16]	@ (800a248 <USBD_FS_SerialStrDescriptor+0x34>)
 800a236:	4805      	ldr	r0, [pc, #20]	@ (800a24c <USBD_FS_SerialStrDescriptor+0x38>)
 800a238:	f7ff fcaf 	bl	8009b9a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a23c:	4b02      	ldr	r3, [pc, #8]	@ (800a248 <USBD_FS_SerialStrDescriptor+0x34>)
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	20002e30 	.word	0x20002e30
 800a24c:	0800aacc 	.word	0x0800aacc

0800a250 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	4603      	mov	r3, r0
 800a258:	6039      	str	r1, [r7, #0]
 800a25a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a25c:	79fb      	ldrb	r3, [r7, #7]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d105      	bne.n	800a26e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a262:	683a      	ldr	r2, [r7, #0]
 800a264:	4907      	ldr	r1, [pc, #28]	@ (800a284 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a266:	4808      	ldr	r0, [pc, #32]	@ (800a288 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a268:	f7ff fc97 	bl	8009b9a <USBD_GetString>
 800a26c:	e004      	b.n	800a278 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	4904      	ldr	r1, [pc, #16]	@ (800a284 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a272:	4805      	ldr	r0, [pc, #20]	@ (800a288 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a274:	f7ff fc91 	bl	8009b9a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a278:	4b02      	ldr	r3, [pc, #8]	@ (800a284 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3708      	adds	r7, #8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	20002e30 	.word	0x20002e30
 800a288:	0800aadc 	.word	0x0800aadc

0800a28c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	4603      	mov	r3, r0
 800a294:	6039      	str	r1, [r7, #0]
 800a296:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a298:	79fb      	ldrb	r3, [r7, #7]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d105      	bne.n	800a2aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	4907      	ldr	r1, [pc, #28]	@ (800a2c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a2a2:	4808      	ldr	r0, [pc, #32]	@ (800a2c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a2a4:	f7ff fc79 	bl	8009b9a <USBD_GetString>
 800a2a8:	e004      	b.n	800a2b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	4904      	ldr	r1, [pc, #16]	@ (800a2c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a2ae:	4805      	ldr	r0, [pc, #20]	@ (800a2c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a2b0:	f7ff fc73 	bl	8009b9a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2b4:	4b02      	ldr	r3, [pc, #8]	@ (800a2c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	20002e30 	.word	0x20002e30
 800a2c4:	0800aae8 	.word	0x0800aae8

0800a2c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a0d      	ldr	r2, [pc, #52]	@ (800a30c <HAL_PCD_MspInit+0x44>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d113      	bne.n	800a302 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a2da:	4b0d      	ldr	r3, [pc, #52]	@ (800a310 <HAL_PCD_MspInit+0x48>)
 800a2dc:	69db      	ldr	r3, [r3, #28]
 800a2de:	4a0c      	ldr	r2, [pc, #48]	@ (800a310 <HAL_PCD_MspInit+0x48>)
 800a2e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a2e4:	61d3      	str	r3, [r2, #28]
 800a2e6:	4b0a      	ldr	r3, [pc, #40]	@ (800a310 <HAL_PCD_MspInit+0x48>)
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2ee:	60fb      	str	r3, [r7, #12]
 800a2f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	2014      	movs	r0, #20
 800a2f8:	f7f7 fbe5 	bl	8001ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a2fc:	2014      	movs	r0, #20
 800a2fe:	f7f7 fbfe 	bl	8001afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a302:	bf00      	nop
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	40005c00 	.word	0x40005c00
 800a310:	40021000 	.word	0x40021000

0800a314 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a328:	4619      	mov	r1, r3
 800a32a:	4610      	mov	r0, r2
 800a32c:	f7fe fd07 	bl	8008d3e <USBD_LL_SetupStage>
}
 800a330:	bf00      	nop
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	460b      	mov	r3, r1
 800a342:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a34a:	78fa      	ldrb	r2, [r7, #3]
 800a34c:	6879      	ldr	r1, [r7, #4]
 800a34e:	4613      	mov	r3, r2
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4413      	add	r3, r2
 800a354:	00db      	lsls	r3, r3, #3
 800a356:	440b      	add	r3, r1
 800a358:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	78fb      	ldrb	r3, [r7, #3]
 800a360:	4619      	mov	r1, r3
 800a362:	f7fe fd39 	bl	8008dd8 <USBD_LL_DataOutStage>
}
 800a366:	bf00      	nop
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b082      	sub	sp, #8
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	460b      	mov	r3, r1
 800a378:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a380:	78fa      	ldrb	r2, [r7, #3]
 800a382:	6879      	ldr	r1, [r7, #4]
 800a384:	4613      	mov	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	00db      	lsls	r3, r3, #3
 800a38c:	440b      	add	r3, r1
 800a38e:	3324      	adds	r3, #36	@ 0x24
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	78fb      	ldrb	r3, [r7, #3]
 800a394:	4619      	mov	r1, r3
 800a396:	f7fe fd90 	bl	8008eba <USBD_LL_DataInStage>
}
 800a39a:	bf00      	nop
 800a39c:	3708      	adds	r7, #8
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b082      	sub	sp, #8
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7fe fea0 	bl	80090f6 <USBD_LL_SOF>
}
 800a3b6:	bf00      	nop
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b084      	sub	sp, #16
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	799b      	ldrb	r3, [r3, #6]
 800a3ce:	2b02      	cmp	r3, #2
 800a3d0:	d102      	bne.n	800a3d8 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d6:	e002      	b.n	800a3de <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	73fb      	strb	r3, [r7, #15]
    break;    
 800a3dc:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3e4:	7bfa      	ldrb	r2, [r7, #15]
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7fe fe4c 	bl	8009086 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7fe fe05 	bl	8009004 <USBD_LL_Reset>
}
 800a3fa:	bf00      	nop
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
	...

0800a404 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a412:	4618      	mov	r0, r3
 800a414:	f7fe fe46 	bl	80090a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	7a9b      	ldrb	r3, [r3, #10]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d005      	beq.n	800a42c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a420:	4b04      	ldr	r3, [pc, #16]	@ (800a434 <HAL_PCD_SuspendCallback+0x30>)
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	4a03      	ldr	r2, [pc, #12]	@ (800a434 <HAL_PCD_SuspendCallback+0x30>)
 800a426:	f043 0306 	orr.w	r3, r3, #6
 800a42a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a42c:	bf00      	nop
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	e000ed00 	.word	0xe000ed00

0800a438 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a446:	4618      	mov	r0, r3
 800a448:	f7fe fe40 	bl	80090cc <USBD_LL_Resume>
}
 800a44c:	bf00      	nop
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a45c:	4a38      	ldr	r2, [pc, #224]	@ (800a540 <USBD_LL_Init+0xec>)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a36      	ldr	r2, [pc, #216]	@ (800a540 <USBD_LL_Init+0xec>)
 800a468:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a46c:	4b34      	ldr	r3, [pc, #208]	@ (800a540 <USBD_LL_Init+0xec>)
 800a46e:	4a35      	ldr	r2, [pc, #212]	@ (800a544 <USBD_LL_Init+0xf0>)
 800a470:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a472:	4b33      	ldr	r3, [pc, #204]	@ (800a540 <USBD_LL_Init+0xec>)
 800a474:	2208      	movs	r2, #8
 800a476:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a478:	4b31      	ldr	r3, [pc, #196]	@ (800a540 <USBD_LL_Init+0xec>)
 800a47a:	2202      	movs	r2, #2
 800a47c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.ep0_mps = PCD_EP0MPS_08;
 800a47e:	4b30      	ldr	r3, [pc, #192]	@ (800a540 <USBD_LL_Init+0xec>)
 800a480:	2203      	movs	r2, #3
 800a482:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a484:	4b2e      	ldr	r3, [pc, #184]	@ (800a540 <USBD_LL_Init+0xec>)
 800a486:	2200      	movs	r2, #0
 800a488:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a48a:	4b2d      	ldr	r3, [pc, #180]	@ (800a540 <USBD_LL_Init+0xec>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a490:	4b2b      	ldr	r3, [pc, #172]	@ (800a540 <USBD_LL_Init+0xec>)
 800a492:	2200      	movs	r2, #0
 800a494:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a496:	482a      	ldr	r0, [pc, #168]	@ (800a540 <USBD_LL_Init+0xec>)
 800a498:	f7f8 f952 	bl	8002740 <HAL_PCD_Init>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d004      	beq.n	800a4ac <USBD_LL_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a4a2:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 800a4a6:	4828      	ldr	r0, [pc, #160]	@ (800a548 <USBD_LL_Init+0xf4>)
 800a4a8:	f7f6 fd48 	bl	8000f3c <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x28);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4b2:	2328      	movs	r3, #40	@ 0x28
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	f7f9 fe60 	bl	800417c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x60);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4c2:	2360      	movs	r3, #96	@ 0x60
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	2180      	movs	r1, #128	@ 0x80
 800a4c8:	f7f9 fe58 	bl	800417c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4d2:	23c0      	movs	r3, #192	@ 0xc0
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	2181      	movs	r1, #129	@ 0x81
 800a4d8:	f7f9 fe50 	bl	800417c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4e2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	2101      	movs	r1, #1
 800a4ea:	f7f9 fe47 	bl	800417c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a4f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	2182      	movs	r1, #130	@ 0x82
 800a4fc:	f7f9 fe3e 	bl	800417c <HAL_PCDEx_PMAConfig>

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81+2 , PCD_SNG_BUF, 0x180);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a506:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800a50a:	2200      	movs	r2, #0
 800a50c:	2183      	movs	r1, #131	@ 0x83
 800a50e:	f7f9 fe35 	bl	800417c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01+2 , PCD_SNG_BUF, 0x1C0);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a518:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800a51c:	2200      	movs	r2, #0
 800a51e:	2103      	movs	r1, #3
 800a520:	f7f9 fe2c 	bl	800417c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82+2 , PCD_SNG_BUF, 0x1D0);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a52a:	f44f 73e8 	mov.w	r3, #464	@ 0x1d0
 800a52e:	2200      	movs	r2, #0
 800a530:	2184      	movs	r1, #132	@ 0x84
 800a532:	f7f9 fe23 	bl	800417c <HAL_PCDEx_PMAConfig>

  return USBD_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	20003030 	.word	0x20003030
 800a544:	40005c00 	.word	0x40005c00
 800a548:	0800aaf8 	.word	0x0800aaf8

0800a54c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a554:	2300      	movs	r3, #0
 800a556:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a558:	2300      	movs	r3, #0
 800a55a:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a562:	4618      	mov	r0, r3
 800a564:	f7f8 f9e2 	bl	800292c <HAL_PCD_Start>
 800a568:	4603      	mov	r3, r0
 800a56a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
 800a56e:	2b03      	cmp	r3, #3
 800a570:	d816      	bhi.n	800a5a0 <USBD_LL_Start+0x54>
 800a572:	a201      	add	r2, pc, #4	@ (adr r2, 800a578 <USBD_LL_Start+0x2c>)
 800a574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a578:	0800a589 	.word	0x0800a589
 800a57c:	0800a58f 	.word	0x0800a58f
 800a580:	0800a595 	.word	0x0800a595
 800a584:	0800a59b 	.word	0x0800a59b
    case HAL_OK :
      usb_status = USBD_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	73fb      	strb	r3, [r7, #15]
    break;
 800a58c:	e00b      	b.n	800a5a6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a58e:	2302      	movs	r3, #2
 800a590:	73fb      	strb	r3, [r7, #15]
    break;
 800a592:	e008      	b.n	800a5a6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a594:	2301      	movs	r3, #1
 800a596:	73fb      	strb	r3, [r7, #15]
    break;
 800a598:	e005      	b.n	800a5a6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a59a:	2302      	movs	r3, #2
 800a59c:	73fb      	strb	r3, [r7, #15]
    break;
 800a59e:	e002      	b.n	800a5a6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a4:	bf00      	nop
  }
  return usb_status;
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	4608      	mov	r0, r1
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	461a      	mov	r2, r3
 800a5be:	4603      	mov	r3, r0
 800a5c0:	70fb      	strb	r3, [r7, #3]
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	70bb      	strb	r3, [r7, #2]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a5d8:	78bb      	ldrb	r3, [r7, #2]
 800a5da:	883a      	ldrh	r2, [r7, #0]
 800a5dc:	78f9      	ldrb	r1, [r7, #3]
 800a5de:	f7f8 fb1f 	bl	8002c20 <HAL_PCD_EP_Open>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a5e6:	7bbb      	ldrb	r3, [r7, #14]
 800a5e8:	2b03      	cmp	r3, #3
 800a5ea:	d817      	bhi.n	800a61c <USBD_LL_OpenEP+0x6c>
 800a5ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a5f4 <USBD_LL_OpenEP+0x44>)
 800a5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f2:	bf00      	nop
 800a5f4:	0800a605 	.word	0x0800a605
 800a5f8:	0800a60b 	.word	0x0800a60b
 800a5fc:	0800a611 	.word	0x0800a611
 800a600:	0800a617 	.word	0x0800a617
    case HAL_OK :
      usb_status = USBD_OK;
 800a604:	2300      	movs	r3, #0
 800a606:	73fb      	strb	r3, [r7, #15]
    break;
 800a608:	e00b      	b.n	800a622 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a60a:	2302      	movs	r3, #2
 800a60c:	73fb      	strb	r3, [r7, #15]
    break;
 800a60e:	e008      	b.n	800a622 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a610:	2301      	movs	r3, #1
 800a612:	73fb      	strb	r3, [r7, #15]
    break;
 800a614:	e005      	b.n	800a622 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a616:	2302      	movs	r3, #2
 800a618:	73fb      	strb	r3, [r7, #15]
    break;
 800a61a:	e002      	b.n	800a622 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a61c:	2302      	movs	r3, #2
 800a61e:	73fb      	strb	r3, [r7, #15]
    break;
 800a620:	bf00      	nop
  }
  return usb_status;
 800a622:	7bfb      	ldrb	r3, [r7, #15]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	460b      	mov	r3, r1
 800a636:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a638:	2300      	movs	r3, #0
 800a63a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a63c:	2300      	movs	r3, #0
 800a63e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a646:	78fa      	ldrb	r2, [r7, #3]
 800a648:	4611      	mov	r1, r2
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7f8 fb45 	bl	8002cda <HAL_PCD_EP_Close>
 800a650:	4603      	mov	r3, r0
 800a652:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800a654:	7bbb      	ldrb	r3, [r7, #14]
 800a656:	2b03      	cmp	r3, #3
 800a658:	d816      	bhi.n	800a688 <USBD_LL_CloseEP+0x5c>
 800a65a:	a201      	add	r2, pc, #4	@ (adr r2, 800a660 <USBD_LL_CloseEP+0x34>)
 800a65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a660:	0800a671 	.word	0x0800a671
 800a664:	0800a677 	.word	0x0800a677
 800a668:	0800a67d 	.word	0x0800a67d
 800a66c:	0800a683 	.word	0x0800a683
    case HAL_OK :
      usb_status = USBD_OK;
 800a670:	2300      	movs	r3, #0
 800a672:	73fb      	strb	r3, [r7, #15]
    break;
 800a674:	e00b      	b.n	800a68e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a676:	2302      	movs	r3, #2
 800a678:	73fb      	strb	r3, [r7, #15]
    break;
 800a67a:	e008      	b.n	800a68e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a67c:	2301      	movs	r3, #1
 800a67e:	73fb      	strb	r3, [r7, #15]
    break;
 800a680:	e005      	b.n	800a68e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a682:	2302      	movs	r3, #2
 800a684:	73fb      	strb	r3, [r7, #15]
    break;
 800a686:	e002      	b.n	800a68e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a688:	2302      	movs	r3, #2
 800a68a:	73fb      	strb	r3, [r7, #15]
    break;
 800a68c:	bf00      	nop
  }
  return usb_status;  
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a6b2:	78fa      	ldrb	r2, [r7, #3]
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7f8 fbd6 	bl	8002e68 <HAL_PCD_EP_SetStall>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a6c0:	7bbb      	ldrb	r3, [r7, #14]
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	d816      	bhi.n	800a6f4 <USBD_LL_StallEP+0x5c>
 800a6c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a6cc <USBD_LL_StallEP+0x34>)
 800a6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6cc:	0800a6dd 	.word	0x0800a6dd
 800a6d0:	0800a6e3 	.word	0x0800a6e3
 800a6d4:	0800a6e9 	.word	0x0800a6e9
 800a6d8:	0800a6ef 	.word	0x0800a6ef
    case HAL_OK :
      usb_status = USBD_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	73fb      	strb	r3, [r7, #15]
    break;
 800a6e0:	e00b      	b.n	800a6fa <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a6e2:	2302      	movs	r3, #2
 800a6e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a6e6:	e008      	b.n	800a6fa <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a6ec:	e005      	b.n	800a6fa <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a6f2:	e002      	b.n	800a6fa <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a6f8:	bf00      	nop
  }
  return usb_status;  
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	460b      	mov	r3, r1
 800a70e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a710:	2300      	movs	r3, #0
 800a712:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a714:	2300      	movs	r3, #0
 800a716:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a71e:	78fa      	ldrb	r2, [r7, #3]
 800a720:	4611      	mov	r1, r2
 800a722:	4618      	mov	r0, r3
 800a724:	f7f8 fc00 	bl	8002f28 <HAL_PCD_EP_ClrStall>
 800a728:	4603      	mov	r3, r0
 800a72a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a72c:	7bbb      	ldrb	r3, [r7, #14]
 800a72e:	2b03      	cmp	r3, #3
 800a730:	d816      	bhi.n	800a760 <USBD_LL_ClearStallEP+0x5c>
 800a732:	a201      	add	r2, pc, #4	@ (adr r2, 800a738 <USBD_LL_ClearStallEP+0x34>)
 800a734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a738:	0800a749 	.word	0x0800a749
 800a73c:	0800a74f 	.word	0x0800a74f
 800a740:	0800a755 	.word	0x0800a755
 800a744:	0800a75b 	.word	0x0800a75b
    case HAL_OK :
      usb_status = USBD_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	73fb      	strb	r3, [r7, #15]
    break;
 800a74c:	e00b      	b.n	800a766 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a74e:	2302      	movs	r3, #2
 800a750:	73fb      	strb	r3, [r7, #15]
    break;
 800a752:	e008      	b.n	800a766 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a754:	2301      	movs	r3, #1
 800a756:	73fb      	strb	r3, [r7, #15]
    break;
 800a758:	e005      	b.n	800a766 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a75a:	2302      	movs	r3, #2
 800a75c:	73fb      	strb	r3, [r7, #15]
    break;
 800a75e:	e002      	b.n	800a766 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a760:	2302      	movs	r3, #2
 800a762:	73fb      	strb	r3, [r7, #15]
    break;
 800a764:	bf00      	nop
  }
  return usb_status; 
 800a766:	7bfb      	ldrb	r3, [r7, #15]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	460b      	mov	r3, r1
 800a77a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a782:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800a784:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	da0b      	bge.n	800a7a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800a78c:	78fb      	ldrb	r3, [r7, #3]
 800a78e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a792:	68f9      	ldr	r1, [r7, #12]
 800a794:	4613      	mov	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	4413      	add	r3, r2
 800a79a:	00db      	lsls	r3, r3, #3
 800a79c:	440b      	add	r3, r1
 800a79e:	3312      	adds	r3, #18
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	e00b      	b.n	800a7bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800a7a4:	78fb      	ldrb	r3, [r7, #3]
 800a7a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7aa:	68f9      	ldr	r1, [r7, #12]
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	4413      	add	r3, r2
 800a7b2:	00db      	lsls	r3, r3, #3
 800a7b4:	440b      	add	r3, r1
 800a7b6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a7ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bc80      	pop	{r7}
 800a7c4:	4770      	bx	lr
	...

0800a7c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a7e2:	78fa      	ldrb	r2, [r7, #3]
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7f8 f9f6 	bl	8002bd8 <HAL_PCD_SetAddress>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a7f0:	7bbb      	ldrb	r3, [r7, #14]
 800a7f2:	2b03      	cmp	r3, #3
 800a7f4:	d816      	bhi.n	800a824 <USBD_LL_SetUSBAddress+0x5c>
 800a7f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a7fc <USBD_LL_SetUSBAddress+0x34>)
 800a7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fc:	0800a80d 	.word	0x0800a80d
 800a800:	0800a813 	.word	0x0800a813
 800a804:	0800a819 	.word	0x0800a819
 800a808:	0800a81f 	.word	0x0800a81f
    case HAL_OK :
      usb_status = USBD_OK;
 800a80c:	2300      	movs	r3, #0
 800a80e:	73fb      	strb	r3, [r7, #15]
    break;
 800a810:	e00b      	b.n	800a82a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a812:	2302      	movs	r3, #2
 800a814:	73fb      	strb	r3, [r7, #15]
    break;
 800a816:	e008      	b.n	800a82a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a818:	2301      	movs	r3, #1
 800a81a:	73fb      	strb	r3, [r7, #15]
    break;
 800a81c:	e005      	b.n	800a82a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a81e:	2302      	movs	r3, #2
 800a820:	73fb      	strb	r3, [r7, #15]
    break;
 800a822:	e002      	b.n	800a82a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a824:	2302      	movs	r3, #2
 800a826:	73fb      	strb	r3, [r7, #15]
    break;
 800a828:	bf00      	nop
  }
  return usb_status;  
 800a82a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	607a      	str	r2, [r7, #4]
 800a83e:	461a      	mov	r2, r3
 800a840:	460b      	mov	r3, r1
 800a842:	72fb      	strb	r3, [r7, #11]
 800a844:	4613      	mov	r3, r2
 800a846:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a84c:	2300      	movs	r3, #0
 800a84e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a856:	893b      	ldrh	r3, [r7, #8]
 800a858:	7af9      	ldrb	r1, [r7, #11]
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	f7f8 facd 	bl	8002dfa <HAL_PCD_EP_Transmit>
 800a860:	4603      	mov	r3, r0
 800a862:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800a864:	7dbb      	ldrb	r3, [r7, #22]
 800a866:	2b03      	cmp	r3, #3
 800a868:	d816      	bhi.n	800a898 <USBD_LL_Transmit+0x64>
 800a86a:	a201      	add	r2, pc, #4	@ (adr r2, 800a870 <USBD_LL_Transmit+0x3c>)
 800a86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a870:	0800a881 	.word	0x0800a881
 800a874:	0800a887 	.word	0x0800a887
 800a878:	0800a88d 	.word	0x0800a88d
 800a87c:	0800a893 	.word	0x0800a893
    case HAL_OK :
      usb_status = USBD_OK;
 800a880:	2300      	movs	r3, #0
 800a882:	75fb      	strb	r3, [r7, #23]
    break;
 800a884:	e00b      	b.n	800a89e <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a886:	2302      	movs	r3, #2
 800a888:	75fb      	strb	r3, [r7, #23]
    break;
 800a88a:	e008      	b.n	800a89e <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a88c:	2301      	movs	r3, #1
 800a88e:	75fb      	strb	r3, [r7, #23]
    break;
 800a890:	e005      	b.n	800a89e <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a892:	2302      	movs	r3, #2
 800a894:	75fb      	strb	r3, [r7, #23]
    break;
 800a896:	e002      	b.n	800a89e <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800a898:	2302      	movs	r3, #2
 800a89a:	75fb      	strb	r3, [r7, #23]
    break;
 800a89c:	bf00      	nop
  }
  return usb_status;    
 800a89e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3718      	adds	r7, #24
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	607a      	str	r2, [r7, #4]
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	72fb      	strb	r3, [r7, #11]
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a8ca:	893b      	ldrh	r3, [r7, #8]
 800a8cc:	7af9      	ldrb	r1, [r7, #11]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	f7f8 fa4b 	bl	8002d6a <HAL_PCD_EP_Receive>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800a8d8:	7dbb      	ldrb	r3, [r7, #22]
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	d816      	bhi.n	800a90c <USBD_LL_PrepareReceive+0x64>
 800a8de:	a201      	add	r2, pc, #4	@ (adr r2, 800a8e4 <USBD_LL_PrepareReceive+0x3c>)
 800a8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e4:	0800a8f5 	.word	0x0800a8f5
 800a8e8:	0800a8fb 	.word	0x0800a8fb
 800a8ec:	0800a901 	.word	0x0800a901
 800a8f0:	0800a907 	.word	0x0800a907
    case HAL_OK :
      usb_status = USBD_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	75fb      	strb	r3, [r7, #23]
    break;
 800a8f8:	e00b      	b.n	800a912 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8fa:	2302      	movs	r3, #2
 800a8fc:	75fb      	strb	r3, [r7, #23]
    break;
 800a8fe:	e008      	b.n	800a912 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a900:	2301      	movs	r3, #1
 800a902:	75fb      	strb	r3, [r7, #23]
    break;
 800a904:	e005      	b.n	800a912 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a906:	2302      	movs	r3, #2
 800a908:	75fb      	strb	r3, [r7, #23]
    break;
 800a90a:	e002      	b.n	800a912 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800a90c:	2302      	movs	r3, #2
 800a90e:	75fb      	strb	r3, [r7, #23]
    break;
 800a910:	bf00      	nop
  }
  return usb_status; 
 800a912:	7dfb      	ldrb	r3, [r7, #23]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3718      	adds	r7, #24
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	460b      	mov	r3, r1
 800a926:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a92e:	78fa      	ldrb	r2, [r7, #3]
 800a930:	4611      	mov	r1, r2
 800a932:	4618      	mov	r0, r3
 800a934:	f7f8 fa4a 	bl	8002dcc <HAL_PCD_EP_GetRxCount>
 800a938:	4603      	mov	r3, r0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3708      	adds	r7, #8
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
	...

0800a944 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a94c:	4b02      	ldr	r3, [pc, #8]	@ (800a958 <USBD_static_malloc+0x14>)
}
 800a94e:	4618      	mov	r0, r3
 800a950:	370c      	adds	r7, #12
 800a952:	46bd      	mov	sp, r7
 800a954:	bc80      	pop	{r7}
 800a956:	4770      	bx	lr
 800a958:	20003308 	.word	0x20003308

0800a95c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]

}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	bc80      	pop	{r7}
 800a96c:	4770      	bx	lr

0800a96e <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 800a96e:	b480      	push	{r7}
 800a970:	b083      	sub	sp, #12
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	460b      	mov	r3, r1
 800a978:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a97a:	bf00      	nop
 800a97c:	370c      	adds	r7, #12
 800a97e:	46bd      	mov	sp, r7
 800a980:	bc80      	pop	{r7}
 800a982:	4770      	bx	lr

0800a984 <memset>:
 800a984:	4603      	mov	r3, r0
 800a986:	4402      	add	r2, r0
 800a988:	4293      	cmp	r3, r2
 800a98a:	d100      	bne.n	800a98e <memset+0xa>
 800a98c:	4770      	bx	lr
 800a98e:	f803 1b01 	strb.w	r1, [r3], #1
 800a992:	e7f9      	b.n	800a988 <memset+0x4>

0800a994 <__libc_init_array>:
 800a994:	b570      	push	{r4, r5, r6, lr}
 800a996:	2600      	movs	r6, #0
 800a998:	4d0c      	ldr	r5, [pc, #48]	@ (800a9cc <__libc_init_array+0x38>)
 800a99a:	4c0d      	ldr	r4, [pc, #52]	@ (800a9d0 <__libc_init_array+0x3c>)
 800a99c:	1b64      	subs	r4, r4, r5
 800a99e:	10a4      	asrs	r4, r4, #2
 800a9a0:	42a6      	cmp	r6, r4
 800a9a2:	d109      	bne.n	800a9b8 <__libc_init_array+0x24>
 800a9a4:	f000 f828 	bl	800a9f8 <_init>
 800a9a8:	2600      	movs	r6, #0
 800a9aa:	4d0a      	ldr	r5, [pc, #40]	@ (800a9d4 <__libc_init_array+0x40>)
 800a9ac:	4c0a      	ldr	r4, [pc, #40]	@ (800a9d8 <__libc_init_array+0x44>)
 800a9ae:	1b64      	subs	r4, r4, r5
 800a9b0:	10a4      	asrs	r4, r4, #2
 800a9b2:	42a6      	cmp	r6, r4
 800a9b4:	d105      	bne.n	800a9c2 <__libc_init_array+0x2e>
 800a9b6:	bd70      	pop	{r4, r5, r6, pc}
 800a9b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9bc:	4798      	blx	r3
 800a9be:	3601      	adds	r6, #1
 800a9c0:	e7ee      	b.n	800a9a0 <__libc_init_array+0xc>
 800a9c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9c6:	4798      	blx	r3
 800a9c8:	3601      	adds	r6, #1
 800a9ca:	e7f2      	b.n	800a9b2 <__libc_init_array+0x1e>
 800a9cc:	0800ab6c 	.word	0x0800ab6c
 800a9d0:	0800ab6c 	.word	0x0800ab6c
 800a9d4:	0800ab6c 	.word	0x0800ab6c
 800a9d8:	0800ab70 	.word	0x0800ab70

0800a9dc <memcpy>:
 800a9dc:	440a      	add	r2, r1
 800a9de:	4291      	cmp	r1, r2
 800a9e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9e4:	d100      	bne.n	800a9e8 <memcpy+0xc>
 800a9e6:	4770      	bx	lr
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ee:	4291      	cmp	r1, r2
 800a9f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9f4:	d1f9      	bne.n	800a9ea <memcpy+0xe>
 800a9f6:	bd10      	pop	{r4, pc}

0800a9f8 <_init>:
 800a9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fa:	bf00      	nop
 800a9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9fe:	bc08      	pop	{r3}
 800aa00:	469e      	mov	lr, r3
 800aa02:	4770      	bx	lr

0800aa04 <_fini>:
 800aa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa06:	bf00      	nop
 800aa08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa0a:	bc08      	pop	{r3}
 800aa0c:	469e      	mov	lr, r3
 800aa0e:	4770      	bx	lr
