
stm32f103_dual_vcp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800a6cc  0800a6cc  0000b6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a838  0800a838  0000c244  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a838  0800a838  0000c244  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a838  0800a838  0000c244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a838  0800a838  0000b838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a83c  0800a83c  0000b83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  0800a840  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003244  20000244  0800aa84  0000c244  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20003488  0800aa84  0000c488  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c244  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145b8  00000000  00000000  0000c26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e82  00000000  00000000  00020825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  000246a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca7  00000000  00000000  00025780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af98  00000000  00000000  00026427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001732c  00000000  00000000  000413bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a3c1  00000000  00000000  000586eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2aac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e0  00000000  00000000  000e2af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000e6cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000244 	.word	0x20000244
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a6b4 	.word	0x0800a6b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000248 	.word	0x20000248
 8000148:	0800a6b4 	.word	0x0800a6b4

0800014c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8000152:	4b21      	ldr	r3, [pc, #132]	@ (80001d8 <_DoInit+0x8c>)
 8000154:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2203      	movs	r2, #3
 800015a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2203      	movs	r2, #3
 8000160:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4a1d      	ldr	r2, [pc, #116]	@ (80001dc <_DoInit+0x90>)
 8000166:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	4a1d      	ldr	r2, [pc, #116]	@ (80001e0 <_DoInit+0x94>)
 800016c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000174:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	2200      	movs	r2, #0
 800017a:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2200      	movs	r2, #0
 8000180:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2200      	movs	r2, #0
 8000186:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	4a14      	ldr	r2, [pc, #80]	@ (80001dc <_DoInit+0x90>)
 800018c:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4a14      	ldr	r2, [pc, #80]	@ (80001e4 <_DoInit+0x98>)
 8000192:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2210      	movs	r2, #16
 8000198:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2200      	movs	r2, #0
 800019e:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2200      	movs	r2, #0
 80001a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2200      	movs	r2, #0
 80001aa:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3307      	adds	r3, #7
 80001b0:	4a0d      	ldr	r2, [pc, #52]	@ (80001e8 <_DoInit+0x9c>)
 80001b2:	6810      	ldr	r0, [r2, #0]
 80001b4:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	4a0c      	ldr	r2, [pc, #48]	@ (80001ec <_DoInit+0xa0>)
 80001ba:	6810      	ldr	r0, [r2, #0]
 80001bc:	6018      	str	r0, [r3, #0]
 80001be:	8891      	ldrh	r1, [r2, #4]
 80001c0:	7992      	ldrb	r2, [r2, #6]
 80001c2:	8099      	strh	r1, [r3, #4]
 80001c4:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2220      	movs	r2, #32
 80001ca:	719a      	strb	r2, [r3, #6]
}
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000260 	.word	0x20000260
 80001dc:	0800a6cc 	.word	0x0800a6cc
 80001e0:	20000308 	.word	0x20000308
 80001e4:	20000508 	.word	0x20000508
 80001e8:	0800a6d8 	.word	0x0800a6d8
 80001ec:	0800a6dc 	.word	0x0800a6dc

080001f0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b088      	sub	sp, #32
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	60f8      	str	r0, [r7, #12]
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	691b      	ldr	r3, [r3, #16]
 800020a:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 800020c:	693a      	ldr	r2, [r7, #16]
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	429a      	cmp	r2, r3
 8000212:	d905      	bls.n	8000220 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000214:	693a      	ldr	r2, [r7, #16]
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	1ad3      	subs	r3, r2, r3
 800021a:	3b01      	subs	r3, #1
 800021c:	61fb      	str	r3, [r7, #28]
 800021e:	e007      	b.n	8000230 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	689a      	ldr	r2, [r3, #8]
 8000224:	6939      	ldr	r1, [r7, #16]
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	1acb      	subs	r3, r1, r3
 800022a:	4413      	add	r3, r2
 800022c:	3b01      	subs	r3, #1
 800022e:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	689a      	ldr	r2, [r3, #8]
 8000234:	697b      	ldr	r3, [r7, #20]
 8000236:	1ad3      	subs	r3, r2, r3
 8000238:	69fa      	ldr	r2, [r7, #28]
 800023a:	4293      	cmp	r3, r2
 800023c:	bf28      	it	cs
 800023e:	4613      	movcs	r3, r2
 8000240:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000242:	69fa      	ldr	r2, [r7, #28]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4293      	cmp	r3, r2
 8000248:	bf28      	it	cs
 800024a:	4613      	movcs	r3, r2
 800024c:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	685a      	ldr	r2, [r3, #4]
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	4413      	add	r3, r2
 8000256:	69fa      	ldr	r2, [r7, #28]
 8000258:	68b9      	ldr	r1, [r7, #8]
 800025a:	4618      	mov	r0, r3
 800025c:	f00a fa1c 	bl	800a698 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000260:	69ba      	ldr	r2, [r7, #24]
 8000262:	69fb      	ldr	r3, [r7, #28]
 8000264:	4413      	add	r3, r2
 8000266:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8000268:	68ba      	ldr	r2, [r7, #8]
 800026a:	69fb      	ldr	r3, [r7, #28]
 800026c:	4413      	add	r3, r2
 800026e:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	69fb      	ldr	r3, [r7, #28]
 8000274:	1ad3      	subs	r3, r2, r3
 8000276:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8000278:	697a      	ldr	r2, [r7, #20]
 800027a:	69fb      	ldr	r3, [r7, #28]
 800027c:	4413      	add	r3, r2
 800027e:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	697a      	ldr	r2, [r7, #20]
 8000286:	429a      	cmp	r2, r3
 8000288:	d101      	bne.n	800028e <_WriteBlocking+0x9e>
      WrOff = 0u;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	697a      	ldr	r2, [r7, #20]
 8000292:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d1b5      	bne.n	8000206 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 800029a:	69bb      	ldr	r3, [r7, #24]
}
 800029c:	4618      	mov	r0, r3
 800029e:	3720      	adds	r7, #32
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	689a      	ldr	r2, [r3, #8]
 80002ba:	69fb      	ldr	r3, [r7, #28]
 80002bc:	1ad3      	subs	r3, r2, r3
 80002be:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80002c0:	69ba      	ldr	r2, [r7, #24]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d90e      	bls.n	80002e6 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	685a      	ldr	r2, [r3, #4]
 80002cc:	69fb      	ldr	r3, [r7, #28]
 80002ce:	4413      	add	r3, r2
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	68b9      	ldr	r1, [r7, #8]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f00a f9df 	bl	800a698 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 80002da:	69fa      	ldr	r2, [r7, #28]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	441a      	add	r2, r3
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80002e4:	e01a      	b.n	800031c <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	685a      	ldr	r2, [r3, #4]
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	4413      	add	r3, r2
 80002f2:	697a      	ldr	r2, [r7, #20]
 80002f4:	68b9      	ldr	r1, [r7, #8]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f00a f9ce 	bl	800a698 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	69bb      	ldr	r3, [r7, #24]
 8000300:	1ad3      	subs	r3, r2, r3
 8000302:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	6858      	ldr	r0, [r3, #4]
 8000308:	68ba      	ldr	r2, [r7, #8]
 800030a:	69bb      	ldr	r3, [r7, #24]
 800030c:	4413      	add	r3, r2
 800030e:	697a      	ldr	r2, [r7, #20]
 8000310:	4619      	mov	r1, r3
 8000312:	f00a f9c1 	bl	800a698 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	697a      	ldr	r2, [r7, #20]
 800031a:	60da      	str	r2, [r3, #12]
}
 800031c:	bf00      	nop
 800031e:	3720      	adds	r7, #32
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8000324:	b480      	push	{r7}
 8000326:	b087      	sub	sp, #28
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000338:	693a      	ldr	r2, [r7, #16]
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	429a      	cmp	r2, r3
 800033e:	d808      	bhi.n	8000352 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689a      	ldr	r2, [r3, #8]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	1ad2      	subs	r2, r2, r3
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	4413      	add	r3, r2
 800034c:	3b01      	subs	r3, #1
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	e004      	b.n	800035c <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000352:	693a      	ldr	r2, [r7, #16]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	1ad3      	subs	r3, r2, r3
 8000358:	3b01      	subs	r3, #1
 800035a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800035c:	697b      	ldr	r3, [r7, #20]
}
 800035e:	4618      	mov	r0, r3
 8000360:	371c      	adds	r7, #28
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	1c5a      	adds	r2, r3, #1
 800037c:	4613      	mov	r3, r2
 800037e:	005b      	lsls	r3, r3, #1
 8000380:	4413      	add	r3, r2
 8000382:	00db      	lsls	r3, r3, #3
 8000384:	4a1f      	ldr	r2, [pc, #124]	@ (8000404 <SEGGER_RTT_WriteNoLock+0x9c>)
 8000386:	4413      	add	r3, r2
 8000388:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	2b02      	cmp	r3, #2
 8000390:	d029      	beq.n	80003e6 <SEGGER_RTT_WriteNoLock+0x7e>
 8000392:	2b02      	cmp	r3, #2
 8000394:	d82e      	bhi.n	80003f4 <SEGGER_RTT_WriteNoLock+0x8c>
 8000396:	2b00      	cmp	r3, #0
 8000398:	d002      	beq.n	80003a0 <SEGGER_RTT_WriteNoLock+0x38>
 800039a:	2b01      	cmp	r3, #1
 800039c:	d013      	beq.n	80003c6 <SEGGER_RTT_WriteNoLock+0x5e>
 800039e:	e029      	b.n	80003f4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80003a0:	6978      	ldr	r0, [r7, #20]
 80003a2:	f7ff ffbf 	bl	8000324 <_GetAvailWriteSpace>
 80003a6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80003a8:	693a      	ldr	r2, [r7, #16]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d202      	bcs.n	80003b6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80003b0:	2300      	movs	r3, #0
 80003b2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80003b4:	e021      	b.n	80003fa <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	69b9      	ldr	r1, [r7, #24]
 80003be:	6978      	ldr	r0, [r7, #20]
 80003c0:	f7ff ff70 	bl	80002a4 <_WriteNoCheck>
    break;
 80003c4:	e019      	b.n	80003fa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80003c6:	6978      	ldr	r0, [r7, #20]
 80003c8:	f7ff ffac 	bl	8000324 <_GetAvailWriteSpace>
 80003cc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	693b      	ldr	r3, [r7, #16]
 80003d2:	4293      	cmp	r3, r2
 80003d4:	bf28      	it	cs
 80003d6:	4613      	movcs	r3, r2
 80003d8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80003da:	69fa      	ldr	r2, [r7, #28]
 80003dc:	69b9      	ldr	r1, [r7, #24]
 80003de:	6978      	ldr	r0, [r7, #20]
 80003e0:	f7ff ff60 	bl	80002a4 <_WriteNoCheck>
    break;
 80003e4:	e009      	b.n	80003fa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	69b9      	ldr	r1, [r7, #24]
 80003ea:	6978      	ldr	r0, [r7, #20]
 80003ec:	f7ff ff00 	bl	80001f0 <_WriteBlocking>
 80003f0:	61f8      	str	r0, [r7, #28]
    break;
 80003f2:	e002      	b.n	80003fa <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80003f4:	2300      	movs	r3, #0
 80003f6:	61fb      	str	r3, [r7, #28]
    break;
 80003f8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80003fa:	69fb      	ldr	r3, [r7, #28]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3720      	adds	r7, #32
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000260 	.word	0x20000260

08000408 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8000414:	4b0d      	ldr	r3, [pc, #52]	@ (800044c <SEGGER_RTT_Write+0x44>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d101      	bne.n	8000420 <SEGGER_RTT_Write+0x18>
 800041c:	f7ff fe96 	bl	800014c <_DoInit>
  SEGGER_RTT_LOCK();
 8000420:	f3ef 8311 	mrs	r3, BASEPRI
 8000424:	f04f 0120 	mov.w	r1, #32
 8000428:	f381 8811 	msr	BASEPRI, r1
 800042c:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	68b9      	ldr	r1, [r7, #8]
 8000432:	68f8      	ldr	r0, [r7, #12]
 8000434:	f7ff ff98 	bl	8000368 <SEGGER_RTT_WriteNoLock>
 8000438:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8000440:	693b      	ldr	r3, [r7, #16]
}
 8000442:	4618      	mov	r0, r3
 8000444:	3718      	adds	r7, #24
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000260 	.word	0x20000260

08000450 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	1c5a      	adds	r2, r3, #1
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	429a      	cmp	r2, r3
 800046c:	d80e      	bhi.n	800048c <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	4413      	add	r3, r2
 8000476:	78fa      	ldrb	r2, [r7, #3]
 8000478:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	1c5a      	adds	r2, r3, #1
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	689a      	ldr	r2, [r3, #8]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	429a      	cmp	r2, r3
 8000496:	d115      	bne.n	80004c4 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	6918      	ldr	r0, [r3, #16]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	6819      	ldr	r1, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	461a      	mov	r2, r3
 80004a6:	f7ff ffaf 	bl	8000408 <SEGGER_RTT_Write>
 80004aa:	4602      	mov	r2, r0
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d004      	beq.n	80004be <_StoreChar+0x6e>
      p->ReturnValue = -1;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f04f 32ff 	mov.w	r2, #4294967295
 80004ba:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 80004bc:	e002      	b.n	80004c4 <_StoreChar+0x74>
      p->Cnt = 0u;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
}
 80004c4:	bf00      	nop
 80004c6:	3710      	adds	r7, #16
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	@ 0x28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
 80004d8:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80004de:	2301      	movs	r3, #1
 80004e0:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80004e2:	2301      	movs	r3, #1
 80004e4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80004e6:	e007      	b.n	80004f8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80004e8:	6a3a      	ldr	r2, [r7, #32]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f0:	623b      	str	r3, [r7, #32]
    Width++;
 80004f2:	69fb      	ldr	r3, [r7, #28]
 80004f4:	3301      	adds	r3, #1
 80004f6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80004f8:	6a3a      	ldr	r2, [r7, #32]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d2f3      	bcs.n	80004e8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	69fb      	ldr	r3, [r7, #28]
 8000504:	429a      	cmp	r2, r3
 8000506:	d901      	bls.n	800050c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800050c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	2b00      	cmp	r3, #0
 8000514:	d125      	bne.n	8000562 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8000516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000518:	2b00      	cmp	r3, #0
 800051a:	d022      	beq.n	8000562 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800051c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	2b00      	cmp	r3, #0
 8000524:	d005      	beq.n	8000532 <_PrintUnsigned+0x66>
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d102      	bne.n	8000532 <_PrintUnsigned+0x66>
        c = '0';
 800052c:	2330      	movs	r3, #48	@ 0x30
 800052e:	76fb      	strb	r3, [r7, #27]
 8000530:	e001      	b.n	8000536 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8000532:	2320      	movs	r3, #32
 8000534:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000536:	e00b      	b.n	8000550 <_PrintUnsigned+0x84>
        FieldWidth--;
 8000538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800053a:	3b01      	subs	r3, #1
 800053c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 800053e:	7efb      	ldrb	r3, [r7, #27]
 8000540:	4619      	mov	r1, r3
 8000542:	68f8      	ldr	r0, [r7, #12]
 8000544:	f7ff ff84 	bl	8000450 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	2b00      	cmp	r3, #0
 800054e:	db07      	blt.n	8000560 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000552:	2b00      	cmp	r3, #0
 8000554:	d005      	beq.n	8000562 <_PrintUnsigned+0x96>
 8000556:	69fa      	ldr	r2, [r7, #28]
 8000558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800055a:	429a      	cmp	r2, r3
 800055c:	d3ec      	bcc.n	8000538 <_PrintUnsigned+0x6c>
 800055e:	e000      	b.n	8000562 <_PrintUnsigned+0x96>
          break;
 8000560:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	68db      	ldr	r3, [r3, #12]
 8000566:	2b00      	cmp	r3, #0
 8000568:	db55      	blt.n	8000616 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d903      	bls.n	8000578 <_PrintUnsigned+0xac>
        NumDigits--;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	3b01      	subs	r3, #1
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	e009      	b.n	800058c <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000578:	68ba      	ldr	r2, [r7, #8]
 800057a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000580:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8000582:	697a      	ldr	r2, [r7, #20]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	429a      	cmp	r2, r3
 8000588:	d200      	bcs.n	800058c <_PrintUnsigned+0xc0>
          break;
 800058a:	e005      	b.n	8000598 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 800058c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	fb02 f303 	mul.w	r3, r2, r3
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000596:	e7e8      	b.n	800056a <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8000598:	68ba      	ldr	r2, [r7, #8]
 800059a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800059c:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a0:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005a6:	fb02 f303 	mul.w	r3, r2, r3
 80005aa:	68ba      	ldr	r2, [r7, #8]
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 80005b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000620 <_PrintUnsigned+0x154>)
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f7ff ff48 	bl	8000450 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	db08      	blt.n	80005da <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 80005c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d0:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 80005d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1df      	bne.n	8000598 <_PrintUnsigned+0xcc>
 80005d8:	e000      	b.n	80005dc <_PrintUnsigned+0x110>
        break;
 80005da:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80005dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d017      	beq.n	8000616 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 80005e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d014      	beq.n	8000616 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80005ec:	e00a      	b.n	8000604 <_PrintUnsigned+0x138>
          FieldWidth--;
 80005ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005f0:	3b01      	subs	r3, #1
 80005f2:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 80005f4:	2120      	movs	r1, #32
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f7ff ff2a 	bl	8000450 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	2b00      	cmp	r3, #0
 8000602:	db07      	blt.n	8000614 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000606:	2b00      	cmp	r3, #0
 8000608:	d005      	beq.n	8000616 <_PrintUnsigned+0x14a>
 800060a:	69fa      	ldr	r2, [r7, #28]
 800060c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800060e:	429a      	cmp	r2, r3
 8000610:	d3ed      	bcc.n	80005ee <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000612:	e000      	b.n	8000616 <_PrintUnsigned+0x14a>
            break;
 8000614:	bf00      	nop
}
 8000616:	bf00      	nop
 8000618:	3728      	adds	r7, #40	@ 0x28
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	0800a7e8 	.word	0x0800a7e8

08000624 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af02      	add	r7, sp, #8
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
 8000630:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	2b00      	cmp	r3, #0
 8000636:	bfb8      	it	lt
 8000638:	425b      	neglt	r3, r3
 800063a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800063c:	2301      	movs	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000640:	e007      	b.n	8000652 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	693a      	ldr	r2, [r7, #16]
 8000646:	fb92 f3f3 	sdiv	r3, r2, r3
 800064a:	613b      	str	r3, [r7, #16]
    Width++;
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	3301      	adds	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	429a      	cmp	r2, r3
 8000658:	daf3      	bge.n	8000642 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800065a:	683a      	ldr	r2, [r7, #0]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	429a      	cmp	r2, r3
 8000660:	d901      	bls.n	8000666 <_PrintInt+0x42>
    Width = NumDigits;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000666:	6a3b      	ldr	r3, [r7, #32]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00a      	beq.n	8000682 <_PrintInt+0x5e>
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	2b00      	cmp	r3, #0
 8000670:	db04      	blt.n	800067c <_PrintInt+0x58>
 8000672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000674:	f003 0304 	and.w	r3, r3, #4
 8000678:	2b00      	cmp	r3, #0
 800067a:	d002      	beq.n	8000682 <_PrintInt+0x5e>
    FieldWidth--;
 800067c:	6a3b      	ldr	r3, [r7, #32]
 800067e:	3b01      	subs	r3, #1
 8000680:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000684:	f003 0302 	and.w	r3, r3, #2
 8000688:	2b00      	cmp	r3, #0
 800068a:	d002      	beq.n	8000692 <_PrintInt+0x6e>
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d01c      	beq.n	80006cc <_PrintInt+0xa8>
 8000692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	2b00      	cmp	r3, #0
 800069a:	d117      	bne.n	80006cc <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d014      	beq.n	80006cc <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80006a2:	e00a      	b.n	80006ba <_PrintInt+0x96>
        FieldWidth--;
 80006a4:	6a3b      	ldr	r3, [r7, #32]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80006aa:	2120      	movs	r1, #32
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f7ff fecf 	bl	8000450 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db07      	blt.n	80006ca <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80006ba:	6a3b      	ldr	r3, [r7, #32]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d005      	beq.n	80006cc <_PrintInt+0xa8>
 80006c0:	697a      	ldr	r2, [r7, #20]
 80006c2:	6a3b      	ldr	r3, [r7, #32]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d3ed      	bcc.n	80006a4 <_PrintInt+0x80>
 80006c8:	e000      	b.n	80006cc <_PrintInt+0xa8>
          break;
 80006ca:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db4a      	blt.n	800076a <_PrintInt+0x146>
    if (v < 0) {
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	da07      	bge.n	80006ea <_PrintInt+0xc6>
      v = -v;
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	425b      	negs	r3, r3
 80006de:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 80006e0:	212d      	movs	r1, #45	@ 0x2d
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	f7ff feb4 	bl	8000450 <_StoreChar>
 80006e8:	e008      	b.n	80006fc <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80006ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d003      	beq.n	80006fc <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 80006f4:	212b      	movs	r1, #43	@ 0x2b
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f7ff feaa 	bl	8000450 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	2b00      	cmp	r3, #0
 8000702:	db32      	blt.n	800076a <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8000704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	2b00      	cmp	r3, #0
 800070c:	d01f      	beq.n	800074e <_PrintInt+0x12a>
 800070e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d11a      	bne.n	800074e <_PrintInt+0x12a>
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d117      	bne.n	800074e <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 800071e:	6a3b      	ldr	r3, [r7, #32]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d014      	beq.n	800074e <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000724:	e00a      	b.n	800073c <_PrintInt+0x118>
            FieldWidth--;
 8000726:	6a3b      	ldr	r3, [r7, #32]
 8000728:	3b01      	subs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 800072c:	2130      	movs	r1, #48	@ 0x30
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f7ff fe8e 	bl	8000450 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db07      	blt.n	800074c <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800073c:	6a3b      	ldr	r3, [r7, #32]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d005      	beq.n	800074e <_PrintInt+0x12a>
 8000742:	697a      	ldr	r2, [r7, #20]
 8000744:	6a3b      	ldr	r3, [r7, #32]
 8000746:	429a      	cmp	r2, r3
 8000748:	d3ed      	bcc.n	8000726 <_PrintInt+0x102>
 800074a:	e000      	b.n	800074e <_PrintInt+0x12a>
              break;
 800074c:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	2b00      	cmp	r3, #0
 8000754:	db09      	blt.n	800076a <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8000756:	68b9      	ldr	r1, [r7, #8]
 8000758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	68f8      	ldr	r0, [r7, #12]
 8000766:	f7ff feb1 	bl	80004cc <_PrintUnsigned>
      }
    }
  }
}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b0a2      	sub	sp, #136	@ 0x88
 8000778:	af02      	add	r7, sp, #8
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	653b      	str	r3, [r7, #80]	@ 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000786:	2340      	movs	r3, #64	@ 0x40
 8000788:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.Cnt            = 0u;
 800078a:	2300      	movs	r3, #0
 800078c:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	663b      	str	r3, [r7, #96]	@ 0x60
  BufferDesc.ReturnValue    = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	65fb      	str	r3, [r7, #92]	@ 0x5c

  do {
    c = *sFormat;
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    sFormat++;
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 80007a4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	f000 819f 	beq.w	8000aec <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 80007ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80007b2:	2b25      	cmp	r3, #37	@ 0x25
 80007b4:	f040 818d 	bne.w	8000ad2 <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80007b8:	2300      	movs	r3, #0
 80007ba:	673b      	str	r3, [r7, #112]	@ 0x70
      v = 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	67bb      	str	r3, [r7, #120]	@ 0x78
      do {
        c = *sFormat;
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        switch (c) {
 80007c8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80007cc:	3b23      	subs	r3, #35	@ 0x23
 80007ce:	2b0d      	cmp	r3, #13
 80007d0:	d83e      	bhi.n	8000850 <SEGGER_RTT_vprintf+0xdc>
 80007d2:	a201      	add	r2, pc, #4	@ (adr r2, 80007d8 <SEGGER_RTT_vprintf+0x64>)
 80007d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d8:	08000841 	.word	0x08000841
 80007dc:	08000851 	.word	0x08000851
 80007e0:	08000851 	.word	0x08000851
 80007e4:	08000851 	.word	0x08000851
 80007e8:	08000851 	.word	0x08000851
 80007ec:	08000851 	.word	0x08000851
 80007f0:	08000851 	.word	0x08000851
 80007f4:	08000851 	.word	0x08000851
 80007f8:	08000831 	.word	0x08000831
 80007fc:	08000851 	.word	0x08000851
 8000800:	08000811 	.word	0x08000811
 8000804:	08000851 	.word	0x08000851
 8000808:	08000851 	.word	0x08000851
 800080c:	08000821 	.word	0x08000821
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8000810:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	673b      	str	r3, [r7, #112]	@ 0x70
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	3301      	adds	r3, #1
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	e01a      	b.n	8000856 <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8000820:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000822:	f043 0302 	orr.w	r3, r3, #2
 8000826:	673b      	str	r3, [r7, #112]	@ 0x70
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	3301      	adds	r3, #1
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	e012      	b.n	8000856 <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8000830:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	673b      	str	r3, [r7, #112]	@ 0x70
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	3301      	adds	r3, #1
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	e00a      	b.n	8000856 <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8000840:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	673b      	str	r3, [r7, #112]	@ 0x70
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	3301      	adds	r3, #1
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	e002      	b.n	8000856 <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 8000850:	2300      	movs	r3, #0
 8000852:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000854:	bf00      	nop
        }
      } while (v);
 8000856:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1b1      	bne.n	80007c0 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800085c:	2300      	movs	r3, #0
 800085e:	66fb      	str	r3, [r7, #108]	@ 0x6c
      do {
        c = *sFormat;
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c < '0') || (c > '9')) {
 8000868:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800086c:	2b2f      	cmp	r3, #47	@ 0x2f
 800086e:	d912      	bls.n	8000896 <SEGGER_RTT_vprintf+0x122>
 8000870:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000874:	2b39      	cmp	r3, #57	@ 0x39
 8000876:	d80e      	bhi.n	8000896 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	3301      	adds	r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800087e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000880:	4613      	mov	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	461a      	mov	r2, r3
 800088a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800088e:	4413      	add	r3, r2
 8000890:	3b30      	subs	r3, #48	@ 0x30
 8000892:	66fb      	str	r3, [r7, #108]	@ 0x6c
        c = *sFormat;
 8000894:	e7e4      	b.n	8000860 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8000896:	2300      	movs	r3, #0
 8000898:	677b      	str	r3, [r7, #116]	@ 0x74
      c = *sFormat;
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (c == '.') {
 80008a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80008a8:	d11d      	bne.n	80008e6 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	3301      	adds	r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          if ((c < '0') || (c > '9')) {
 80008b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80008be:	d912      	bls.n	80008e6 <SEGGER_RTT_vprintf+0x172>
 80008c0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008c4:	2b39      	cmp	r3, #57	@ 0x39
 80008c6:	d80e      	bhi.n	80008e6 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	3301      	adds	r3, #1
 80008cc:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 80008ce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80008d0:	4613      	mov	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4413      	add	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	461a      	mov	r2, r3
 80008da:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008de:	4413      	add	r3, r2
 80008e0:	3b30      	subs	r3, #48	@ 0x30
 80008e2:	677b      	str	r3, [r7, #116]	@ 0x74
          c = *sFormat;
 80008e4:	e7e4      	b.n	80008b0 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 80008ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008f2:	2b6c      	cmp	r3, #108	@ 0x6c
 80008f4:	d003      	beq.n	80008fe <SEGGER_RTT_vprintf+0x18a>
 80008f6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008fa:	2b68      	cmp	r3, #104	@ 0x68
 80008fc:	d107      	bne.n	800090e <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	3301      	adds	r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c == 'l') || (c == 'h')) {
 800090c:	e7ef      	b.n	80008ee <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800090e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000912:	2b25      	cmp	r3, #37	@ 0x25
 8000914:	f000 80d1 	beq.w	8000aba <SEGGER_RTT_vprintf+0x346>
 8000918:	2b25      	cmp	r3, #37	@ 0x25
 800091a:	f2c0 80d5 	blt.w	8000ac8 <SEGGER_RTT_vprintf+0x354>
 800091e:	2b78      	cmp	r3, #120	@ 0x78
 8000920:	f300 80d2 	bgt.w	8000ac8 <SEGGER_RTT_vprintf+0x354>
 8000924:	2b58      	cmp	r3, #88	@ 0x58
 8000926:	f2c0 80cf 	blt.w	8000ac8 <SEGGER_RTT_vprintf+0x354>
 800092a:	3b58      	subs	r3, #88	@ 0x58
 800092c:	2b20      	cmp	r3, #32
 800092e:	f200 80cb 	bhi.w	8000ac8 <SEGGER_RTT_vprintf+0x354>
 8000932:	a201      	add	r2, pc, #4	@ (adr r2, 8000938 <SEGGER_RTT_vprintf+0x1c4>)
 8000934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000938:	08000a2f 	.word	0x08000a2f
 800093c:	08000ac9 	.word	0x08000ac9
 8000940:	08000ac9 	.word	0x08000ac9
 8000944:	08000ac9 	.word	0x08000ac9
 8000948:	08000ac9 	.word	0x08000ac9
 800094c:	08000ac9 	.word	0x08000ac9
 8000950:	08000ac9 	.word	0x08000ac9
 8000954:	08000ac9 	.word	0x08000ac9
 8000958:	08000ac9 	.word	0x08000ac9
 800095c:	08000ac9 	.word	0x08000ac9
 8000960:	08000ac9 	.word	0x08000ac9
 8000964:	080009bd 	.word	0x080009bd
 8000968:	080009e3 	.word	0x080009e3
 800096c:	08000ac9 	.word	0x08000ac9
 8000970:	08000ac9 	.word	0x08000ac9
 8000974:	08000ac9 	.word	0x08000ac9
 8000978:	08000ac9 	.word	0x08000ac9
 800097c:	08000ac9 	.word	0x08000ac9
 8000980:	08000ac9 	.word	0x08000ac9
 8000984:	08000ac9 	.word	0x08000ac9
 8000988:	08000ac9 	.word	0x08000ac9
 800098c:	08000ac9 	.word	0x08000ac9
 8000990:	08000ac9 	.word	0x08000ac9
 8000994:	08000ac9 	.word	0x08000ac9
 8000998:	08000a95 	.word	0x08000a95
 800099c:	08000ac9 	.word	0x08000ac9
 80009a0:	08000ac9 	.word	0x08000ac9
 80009a4:	08000a55 	.word	0x08000a55
 80009a8:	08000ac9 	.word	0x08000ac9
 80009ac:	08000a09 	.word	0x08000a09
 80009b0:	08000ac9 	.word	0x08000ac9
 80009b4:	08000ac9 	.word	0x08000ac9
 80009b8:	08000a2f 	.word	0x08000a2f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	1d19      	adds	r1, r3, #4
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	6011      	str	r1, [r2, #0]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	67bb      	str	r3, [r7, #120]	@ 0x78
        c0 = (char)v;
 80009ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80009cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        _StoreChar(&BufferDesc, c0);
 80009d0:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80009d4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80009d8:	4611      	mov	r1, r2
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fd38 	bl	8000450 <_StoreChar>
        break;
 80009e0:	e073      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	1d19      	adds	r1, r3, #4
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	6011      	str	r1, [r2, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80009f0:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80009f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009fe:	220a      	movs	r2, #10
 8000a00:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000a02:	f7ff fe0f 	bl	8000624 <_PrintInt>
        break;
 8000a06:	e060      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	1d19      	adds	r1, r3, #4
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	6011      	str	r1, [r2, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000a16:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000a18:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000a1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a26:	220a      	movs	r2, #10
 8000a28:	f7ff fd50 	bl	80004cc <_PrintUnsigned>
        break;
 8000a2c:	e04d      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	1d19      	adds	r1, r3, #4
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	6011      	str	r1, [r2, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8000a3c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000a3e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a4c:	2210      	movs	r2, #16
 8000a4e:	f7ff fd3d 	bl	80004cc <_PrintUnsigned>
        break;
 8000a52:	e03a      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	1d19      	adds	r1, r3, #4
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	6011      	str	r1, [r2, #0]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	66bb      	str	r3, [r7, #104]	@ 0x68
          do {
            c = *s;
 8000a62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            s++;
 8000a6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (c == '\0') {
 8000a70:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d00b      	beq.n	8000a90 <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8000a78:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8000a7c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fce4 	bl	8000450 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8000a88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	dae9      	bge.n	8000a62 <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 8000a8e:	e01c      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
              break;
 8000a90:	bf00      	nop
        break;
 8000a92:	e01a      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	1d19      	adds	r1, r3, #4
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	6011      	str	r1, [r2, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8000aa2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000aa4:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	9301      	str	r3, [sp, #4]
 8000aac:	2308      	movs	r3, #8
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	2210      	movs	r2, #16
 8000ab4:	f7ff fd0a 	bl	80004cc <_PrintUnsigned>
        break;
 8000ab8:	e007      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8000aba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000abe:	2125      	movs	r1, #37	@ 0x25
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fcc5 	bl	8000450 <_StoreChar>
        break;
 8000ac6:	e000      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 8000ac8:	bf00      	nop
      }
      sFormat++;
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	3301      	adds	r3, #1
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	e007      	b.n	8000ae2 <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 8000ad2:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8000ad6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fcb7 	bl	8000450 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8000ae2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	f6bf ae56 	bge.w	8000796 <SEGGER_RTT_vprintf+0x22>
 8000aea:	e000      	b.n	8000aee <SEGGER_RTT_vprintf+0x37a>
      break;
 8000aec:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8000aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	dd0d      	ble.n	8000b10 <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8000af4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d006      	beq.n	8000b08 <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8000afa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	f7ff fc80 	bl	8000408 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8000b08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000b0c:	4413      	add	r3, r2
 8000b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }
  return BufferDesc.ReturnValue;
 8000b10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3780      	adds	r7, #128	@ 0x80
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop

08000b1c <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8000b1c:	b40e      	push	{r1, r2, r3}
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b085      	sub	sp, #20
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	461a      	mov	r2, r3
 8000b32:	69f9      	ldr	r1, [r7, #28]
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff fe1d 	bl	8000774 <SEGGER_RTT_vprintf>
 8000b3a:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b48:	b003      	add	sp, #12
 8000b4a:	4770      	bx	lr

08000b4c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
void MX_DMA_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b52:	4b29      	ldr	r3, [pc, #164]	@ (8000bf8 <MX_DMA_Init+0xac>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a28      	ldr	r2, [pc, #160]	@ (8000bf8 <MX_DMA_Init+0xac>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6153      	str	r3, [r2, #20]
 8000b5e:	4b26      	ldr	r3, [pc, #152]	@ (8000bf8 <MX_DMA_Init+0xac>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000b6a:	4b24      	ldr	r3, [pc, #144]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b6c:	4a24      	ldr	r2, [pc, #144]	@ (8000c00 <MX_DMA_Init+0xb4>)
 8000b6e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000b70:	4b22      	ldr	r3, [pc, #136]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b76:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000b78:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b7a:	2240      	movs	r2, #64	@ 0x40
 8000b7c:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b80:	2280      	movs	r2, #128	@ 0x80
 8000b82:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b96:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b9c:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000b9e:	4817      	ldr	r0, [pc, #92]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000ba0:	f000 ff9c 	bl	8001adc <HAL_DMA_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_DMA_Init+0x62>
  {
    Error_Handler();
 8000baa:	f000 f9a3 	bl	8000ef4 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	200e      	movs	r0, #14
 8000bb4:	f000 ff4f 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000bb8:	200e      	movs	r0, #14
 8000bba:	f000 ff68 	bl	8001a8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	200f      	movs	r0, #15
 8000bc4:	f000 ff47 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000bc8:	200f      	movs	r0, #15
 8000bca:	f000 ff60 	bl	8001a8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2010      	movs	r0, #16
 8000bd4:	f000 ff3f 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000bd8:	2010      	movs	r0, #16
 8000bda:	f000 ff58 	bl	8001a8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2011      	movs	r0, #17
 8000be4:	f000 ff37 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000be8:	2011      	movs	r0, #17
 8000bea:	f000 ff50 	bl	8001a8e <HAL_NVIC_EnableIRQ>

}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	20000518 	.word	0x20000518
 8000c00:	40020008 	.word	0x40020008

08000c04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	4a13      	ldr	r2, [pc, #76]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c10:	f043 0310 	orr.w	r3, r3, #16
 8000c14:	6193      	str	r3, [r2, #24]
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f003 0310 	and.w	r3, r3, #16
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c28:	f043 0320 	orr.w	r3, r3, #32
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 0320 	and.w	r3, r3, #32
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6193      	str	r3, [r2, #24]
 8000c46:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40021000 	.word	0x40021000

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int i;
	uart_ctx_t * uart_ctx;
	memset(&ctx, 0, sizeof(ctx_t));
 8000c64:	f242 0254 	movw	r2, #8276	@ 0x2054
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4848      	ldr	r0, [pc, #288]	@ (8000d8c <main+0x12c>)
 8000c6c:	f009 fce8 	bl	800a640 <memset>
	ctx.uart1.name = "UART1";
 8000c70:	4b46      	ldr	r3, [pc, #280]	@ (8000d8c <main+0x12c>)
 8000c72:	4a47      	ldr	r2, [pc, #284]	@ (8000d90 <main+0x130>)
 8000c74:	601a      	str	r2, [r3, #0]
	ctx.uart1.huart = &huart1;
 8000c76:	4b45      	ldr	r3, [pc, #276]	@ (8000d8c <main+0x12c>)
 8000c78:	4a46      	ldr	r2, [pc, #280]	@ (8000d94 <main+0x134>)
 8000c7a:	605a      	str	r2, [r3, #4]
	ctx.uart1.hdma_rx = &hdma_usart1_rx;
 8000c7c:	4b43      	ldr	r3, [pc, #268]	@ (8000d8c <main+0x12c>)
 8000c7e:	4a46      	ldr	r2, [pc, #280]	@ (8000d98 <main+0x138>)
 8000c80:	60da      	str	r2, [r3, #12]
	ctx.uart1.hdma_tx = &hdma_usart1_tx;
 8000c82:	4b42      	ldr	r3, [pc, #264]	@ (8000d8c <main+0x12c>)
 8000c84:	4a45      	ldr	r2, [pc, #276]	@ (8000d9c <main+0x13c>)
 8000c86:	611a      	str	r2, [r3, #16]
	ctx.uart1.irq_num = USART1_IRQn;
 8000c88:	4b40      	ldr	r3, [pc, #256]	@ (8000d8c <main+0x12c>)
 8000c8a:	2225      	movs	r2, #37	@ 0x25
 8000c8c:	721a      	strb	r2, [r3, #8]
	ctx.uart2.name = "UART2";
 8000c8e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d8c <main+0x12c>)
 8000c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b42      	ldr	r3, [pc, #264]	@ (8000da0 <main+0x140>)
 8000c98:	6293      	str	r3, [r2, #40]	@ 0x28
	ctx.uart2.huart = &huart2;
 8000c9a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d8c <main+0x12c>)
 8000c9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b40      	ldr	r3, [pc, #256]	@ (8000da4 <main+0x144>)
 8000ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ctx.uart2.hdma_rx = &hdma_usart2_rx;
 8000ca6:	4b39      	ldr	r3, [pc, #228]	@ (8000d8c <main+0x12c>)
 8000ca8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b3e      	ldr	r3, [pc, #248]	@ (8000da8 <main+0x148>)
 8000cb0:	6353      	str	r3, [r2, #52]	@ 0x34
	ctx.uart2.hdma_tx = &hdma_usart2_tx;
 8000cb2:	4b36      	ldr	r3, [pc, #216]	@ (8000d8c <main+0x12c>)
 8000cb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b3c      	ldr	r3, [pc, #240]	@ (8000dac <main+0x14c>)
 8000cbc:	6393      	str	r3, [r2, #56]	@ 0x38
	ctx.uart2.irq_num = USART2_IRQn;
 8000cbe:	4b33      	ldr	r3, [pc, #204]	@ (8000d8c <main+0x12c>)
 8000cc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cc4:	2226      	movs	r2, #38	@ 0x26
 8000cc6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	ctx.memcpy_dma = &hdma_memtomem_dma1_channel1;
 8000cca:	4b30      	ldr	r3, [pc, #192]	@ (8000d8c <main+0x12c>)
 8000ccc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b37      	ldr	r3, [pc, #220]	@ (8000db0 <main+0x150>)
 8000cd4:	6513      	str	r3, [r2, #80]	@ 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd6:	f000 fd61 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cda:	f000 f86b 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cde:	f7ff ff91 	bl	8000c04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ce2:	f7ff ff33 	bl	8000b4c <MX_DMA_Init>
  MX_RTC_Init();
 8000ce6:	f000 f90b 	bl	8000f00 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000cea:	f000 fb0b 	bl	8001304 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000cee:	f000 fb33 	bl	8001358 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000cf2:	f008 fe83 	bl	80099fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000cf6:	2005      	movs	r0, #5
 8000cf8:	f000 fea2 	bl	8001a40 <HAL_NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn  , 0, 2);
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	2100      	movs	r1, #0
 8000d00:	2013      	movs	r0, #19
 8000d02:	f000 fea8 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn , 0, 3);
 8000d06:	2203      	movs	r2, #3
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2014      	movs	r0, #20
 8000d0c:	f000 fea3 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(USART1_IRQn          , 0, 1);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2100      	movs	r1, #0
 8000d14:	2025      	movs	r0, #37	@ 0x25
 8000d16:	f000 fe9e 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(USART2_IRQn          , 0, 1);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2026      	movs	r0, #38	@ 0x26
 8000d20:	f000 fe99 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn   , 0, 2); // DMA for memory copy.
 8000d24:	2202      	movs	r2, #2
 8000d26:	2100      	movs	r1, #0
 8000d28:	200b      	movs	r0, #11
 8000d2a:	f000 fe94 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn   , 1, 1); // UART1 Tx
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2101      	movs	r1, #1
 8000d32:	200e      	movs	r0, #14
 8000d34:	f000 fe8f 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn   , 1, 0); // UART1 Rx
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	200f      	movs	r0, #15
 8000d3e:	f000 fe8a 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn   , 1, 1); // UART2 Tx
 8000d42:	2201      	movs	r2, #1
 8000d44:	2101      	movs	r1, #1
 8000d46:	2010      	movs	r0, #16
 8000d48:	f000 fe85 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn   , 1, 0); // UART2 Rx
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2101      	movs	r1, #1
 8000d50:	2011      	movs	r0, #17
 8000d52:	f000 fe80 	bl	8001a56 <HAL_NVIC_SetPriority>

  __HAL_UART_DISABLE(&huart1);
 8000d56:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <main+0x134>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <main+0x134>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000d64:	60da      	str	r2, [r3, #12]
  __HAL_UART_DISABLE(&huart2);
 8000d66:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <main+0x144>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <main+0x144>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000d74:	60da      	str	r2, [r3, #12]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//  while (CDC_Transmit_FS("USB0_N\r\n", 8, 0) == USBD_BUSY){};
		  HAL_Delay(1000);
 8000d76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d7a:	f000 fd71 	bl	8001860 <HAL_Delay>
		//  while (CDC_Transmit_FS("USB2_N\r\n", 8, 2) == USBD_BUSY){};
		  HAL_Delay(1000);
 8000d7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d82:	f000 fd6d 	bl	8001860 <HAL_Delay>
		  HAL_Delay(1000);
 8000d86:	bf00      	nop
 8000d88:	e7f5      	b.n	8000d76 <main+0x116>
 8000d8a:	bf00      	nop
 8000d8c:	2000055c 	.word	0x2000055c
 8000d90:	0800a6e4 	.word	0x0800a6e4
 8000d94:	200025c4 	.word	0x200025c4
 8000d98:	20002654 	.word	0x20002654
 8000d9c:	20002698 	.word	0x20002698
 8000da0:	0800a6ec 	.word	0x0800a6ec
 8000da4:	2000260c 	.word	0x2000260c
 8000da8:	200026dc 	.word	0x200026dc
 8000dac:	20002720 	.word	0x20002720
 8000db0:	20000518 	.word	0x20000518

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b094      	sub	sp, #80	@ 0x50
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dbe:	2228      	movs	r2, #40	@ 0x28
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f009 fc3c 	bl	800a640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000de4:	2305      	movs	r3, #5
 8000de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000df2:	2301      	movs	r3, #1
 8000df4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df6:	2301      	movs	r3, #1
 8000df8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e04:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f003 f9ca 	bl	80041a8 <HAL_RCC_OscConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e1a:	f000 f86b 	bl	8000ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1e:	230f      	movs	r3, #15
 8000e20:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e2e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 fc36 	bl	80046ac <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e46:	f000 f855 	bl	8000ef4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8000e4a:	2311      	movs	r3, #17
 8000e4c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e52:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f003 fdb4 	bl	80049c8 <HAL_RCCEx_PeriphCLKConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000e66:	f000 f845 	bl	8000ef4 <Error_Handler>
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3750      	adds	r7, #80	@ 0x50
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
    SEGGER_RTT_printf(0, "_Error_Handler: %s #%d\n", file, line);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	4905      	ldr	r1, [pc, #20]	@ (8000e98 <_Error_Handler+0x24>)
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff fe49 	bl	8000b1c <SEGGER_RTT_printf>
    HAL_Delay(1000);
 8000e8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e8e:	f000 fce7 	bl	8001860 <HAL_Delay>
    SEGGER_RTT_printf(0, "_Error_Handler: %s #%d\n", file, line);
 8000e92:	bf00      	nop
 8000e94:	e7f3      	b.n	8000e7e <_Error_Handler+0xa>
 8000e96:	bf00      	nop
 8000e98:	0800a6f4 	.word	0x0800a6f4

08000e9c <USB_CDC_RxHandler_0>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void USB_CDC_RxHandler_0(uint8_t* Buf, uint32_t Len)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
	while (CDC_Transmit_FS("Echo0\r\n", 7, 0) == USBD_BUSY){};
 8000ea6:	bf00      	nop
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2107      	movs	r1, #7
 8000eac:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <USB_CDC_RxHandler_0+0x28>)
 8000eae:	f008 ff4d 	bl	8009d4c <CDC_Transmit_FS>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d0f7      	beq.n	8000ea8 <USB_CDC_RxHandler_0+0xc>

}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	0800a70c 	.word	0x0800a70c

08000ec8 <USB_CDC_RxHandler_2>:
void USB_CDC_RxHandler_2(uint8_t* Buf, uint32_t Len)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
	while (CDC_Transmit_FS("Echo2\r\n", 7, 2) == USBD_BUSY){};
 8000ed2:	bf00      	nop
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	2107      	movs	r1, #7
 8000ed8:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <USB_CDC_RxHandler_2+0x28>)
 8000eda:	f008 ff37 	bl	8009d4c <CDC_Transmit_FS>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d0f7      	beq.n	8000ed4 <USB_CDC_RxHandler_2+0xc>

}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	0800a714 	.word	0x0800a714

08000ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <MX_RTC_Init+0x30>)
 8000f06:	4a0b      	ldr	r2, [pc, #44]	@ (8000f34 <MX_RTC_Init+0x34>)
 8000f08:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <MX_RTC_Init+0x30>)
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000f12:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <MX_RTC_Init+0x30>)
 8000f14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f18:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <MX_RTC_Init+0x30>)
 8000f1c:	f003 fec0 	bl	8004ca0 <HAL_RTC_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000f26:	f7ff ffe5 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200025b0 	.word	0x200025b0
 8000f34:	40002800 	.word	0x40002800

08000f38 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0b      	ldr	r2, [pc, #44]	@ (8000f74 <HAL_RTC_MspInit+0x3c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d110      	bne.n	8000f6c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000f4a:	f003 f921 	bl	8004190 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <HAL_RTC_MspInit+0x40>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	4a09      	ldr	r2, [pc, #36]	@ (8000f78 <HAL_RTC_MspInit+0x40>)
 8000f54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f58:	61d3      	str	r3, [r2, #28]
 8000f5a:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <HAL_RTC_MspInit+0x40>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f66:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <HAL_RTC_MspInit+0x44>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40002800 	.word	0x40002800
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	4242043c 	.word	0x4242043c

08000f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f86:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <HAL_MspInit+0x6c>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	4a18      	ldr	r2, [pc, #96]	@ (8000fec <HAL_MspInit+0x6c>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6193      	str	r3, [r2, #24]
 8000f92:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <HAL_MspInit+0x6c>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <HAL_MspInit+0x6c>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a12      	ldr	r2, [pc, #72]	@ (8000fec <HAL_MspInit+0x6c>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <HAL_MspInit+0x6c>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2005      	movs	r0, #5
 8000fbc:	f000 fd4b 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000fc0:	2005      	movs	r0, #5
 8000fc2:	f000 fd64 	bl	8001a8e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <HAL_MspInit+0x70>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <HAL_MspInit+0x70>)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010000 	.word	0x40010000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <MemManage_Handler+0x4>

0800100c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <UsageFault_Handler+0x4>

0800101c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001044:	f000 fbf0 	bl	8001828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001048:	f000 fd3b 	bl	8001ac2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001060:	4802      	ldr	r0, [pc, #8]	@ (800106c <DMA1_Channel4_IRQHandler+0x10>)
 8001062:	f001 f87d 	bl	8002160 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20002698 	.word	0x20002698

08001070 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <DMA1_Channel5_IRQHandler+0x10>)
 8001076:	f001 f873 	bl	8002160 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20002654 	.word	0x20002654

08001084 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001088:	4802      	ldr	r0, [pc, #8]	@ (8001094 <DMA1_Channel6_IRQHandler+0x10>)
 800108a:	f001 f869 	bl	8002160 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200026dc 	.word	0x200026dc

08001098 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800109c:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <DMA1_Channel7_IRQHandler+0x10>)
 800109e:	f001 f85f 	bl	8002160 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20002720 	.word	0x20002720

080010ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80010b2:	f001 fc29 	bl	8002908 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20002f90 	.word	0x20002f90

080010c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010c6:	4843      	ldr	r0, [pc, #268]	@ (80011d4 <USART1_IRQHandler+0x114>)
 80010c8:	f004 f858 	bl	800517c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 80010cc:	4b41      	ldr	r3, [pc, #260]	@ (80011d4 <USART1_IRQHandler+0x114>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	2b10      	cmp	r3, #16
 80010d8:	d177      	bne.n	80011ca <USART1_IRQHandler+0x10a>
    uart_ctx_t * const uart_ctx = &ctx.uart1;
 80010da:	4b3f      	ldr	r3, [pc, #252]	@ (80011d8 <USART1_IRQHandler+0x118>)
 80010dc:	60bb      	str	r3, [r7, #8]
    int buf_len; 

    __HAL_UART_CLEAR_IDLEFLAG(uart_ctx->huart);
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]

    if (uart_ctx->buf.idx == 0) {
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d107      	bne.n	8001114 <USART1_IRQHandler+0x54>
      buf_len = DBL_BUF_TOTAL_LEN - __HAL_DMA_GET_COUNTER(uart_ctx->hdma_rx); 
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	e006      	b.n	8001122 <USART1_IRQHandler+0x62>
    } else {
      buf_len = DBL_BUF_LEN - __HAL_DMA_GET_COUNTER(uart_ctx->hdma_rx); 
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8001120:	60fb      	str	r3, [r7, #12]
    }

    // SEGGER_RTT_printf(0, "idle[1]: %d, len=%d\n", uart_ctx->buf.idx, buf_len);
    HAL_UART_DMAStop(uart_ctx->huart);
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	4618      	mov	r0, r3
 8001128:	f003 ffa9 	bl	800507e <HAL_UART_DMAStop>
    if (buf_len > 0) {
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	dd3c      	ble.n	80011ac <USART1_IRQHandler+0xec>
      if (buf_len == 1) {
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d112      	bne.n	800115e <USART1_IRQHandler+0x9e>
        uart_ctx->buf.data_rest[0] = uart_ctx->buf.data[uart_ctx->buf.idx][0];
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	029b      	lsls	r3, r3, #10
 8001144:	4413      	add	r3, r2
 8001146:	3314      	adds	r3, #20
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
        uart_ctx->buf.rest_len = 1;
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001156:	461a      	mov	r2, r3
 8001158:	2301      	movs	r3, #1
 800115a:	61d3      	str	r3, [r2, #28]
 800115c:	e026      	b.n	80011ac <USART1_IRQHandler+0xec>
      } else {
        // memcpy(uart_ctx->buf.data_rest, uart_ctx->buf.data[uart_ctx->buf.idx], buf_len);
        HAL_DMA_Start(ctx.memcpy_dma, (uint32_t)uart_ctx->buf.data[uart_ctx->buf.idx], (uint32_t)uart_ctx->buf.data_rest, buf_len);
 800115e:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <USART1_IRQHandler+0x118>)
 8001160:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001164:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	029b      	lsls	r3, r3, #10
 8001170:	3310      	adds	r3, #16
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	4413      	add	r3, r2
 8001176:	3304      	adds	r3, #4
 8001178:	4619      	mov	r1, r3
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001180:	461a      	mov	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f000 fd04 	bl	8001b90 <HAL_DMA_Start>
        if (HAL_DMA_PollForTransfer(ctx.memcpy_dma, HAL_DMA_FULL_TRANSFER, 2) == HAL_OK) {
 8001188:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <USART1_IRQHandler+0x118>)
 800118a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800118e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001190:	2202      	movs	r2, #2
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fe51 	bl	8001e3c <HAL_DMA_PollForTransfer>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d105      	bne.n	80011ac <USART1_IRQHandler+0xec>
          uart_ctx->buf.rest_len = buf_len;
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	61d3      	str	r3, [r2, #28]
        }
      }
    }

    // Set index of double buffer to next.
    uart_ctx->buf.idx = 0;
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011b2:	461a      	mov	r2, r3
 80011b4:	2300      	movs	r3, #0
 80011b6:	6213      	str	r3, [r2, #32]
    HAL_UART_Receive_DMA(uart_ctx->huart, (uint8_t *)uart_ctx->buf.data[0], DBL_BUF_TOTAL_LEN);
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	6858      	ldr	r0, [r3, #4]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	3314      	adds	r3, #20
 80011c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011c4:	4619      	mov	r1, r3
 80011c6:	f003 ff35 	bl	8005034 <HAL_UART_Receive_DMA>

  }
  /* USER CODE END USART1_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200025c4 	.word	0x200025c4
 80011d8:	2000055c 	.word	0x2000055c

080011dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  // SEGGER_RTT_printf(0, "Uart2 IRQ\n");
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011e2:	4842      	ldr	r0, [pc, #264]	@ (80012ec <USART2_IRQHandler+0x110>)
 80011e4:	f003 ffca 	bl	800517c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 80011e8:	4b40      	ldr	r3, [pc, #256]	@ (80012ec <USART2_IRQHandler+0x110>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0310 	and.w	r3, r3, #16
 80011f2:	2b10      	cmp	r3, #16
 80011f4:	d175      	bne.n	80012e2 <USART2_IRQHandler+0x106>
    uart_ctx_t * const uart_ctx = &ctx.uart2;
 80011f6:	4b3e      	ldr	r3, [pc, #248]	@ (80012f0 <USART2_IRQHandler+0x114>)
 80011f8:	60bb      	str	r3, [r7, #8]
    int buf_len; 

    __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b3b      	ldr	r3, [pc, #236]	@ (80012ec <USART2_IRQHandler+0x110>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	4b39      	ldr	r3, [pc, #228]	@ (80012ec <USART2_IRQHandler+0x110>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]

    if (uart_ctx->buf.idx == 0) {
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d107      	bne.n	800122c <USART2_IRQHandler+0x50>
      buf_len = DBL_BUF_TOTAL_LEN - __HAL_DMA_GET_COUNTER(uart_ctx->hdma_rx); 
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	e006      	b.n	800123a <USART2_IRQHandler+0x5e>
    } else {
      buf_len = DBL_BUF_LEN - __HAL_DMA_GET_COUNTER(uart_ctx->hdma_rx); 
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8001238:	60fb      	str	r3, [r7, #12]
    }

    // SEGGER_RTT_printf(0, "idle[2]: %d, len=%d\n", uart_ctx->buf.idx, buf_len);
    HAL_UART_DMAStop(uart_ctx->huart);
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	4618      	mov	r0, r3
 8001240:	f003 ff1d 	bl	800507e <HAL_UART_DMAStop>
    if (buf_len > 0) {
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	dd3c      	ble.n	80012c4 <USART2_IRQHandler+0xe8>
      if (buf_len == 1) {
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d112      	bne.n	8001276 <USART2_IRQHandler+0x9a>
        uart_ctx->buf.data_rest[0] = uart_ctx->buf.data[uart_ctx->buf.idx][0];
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	029b      	lsls	r3, r3, #10
 800125c:	4413      	add	r3, r2
 800125e:	3314      	adds	r3, #20
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
        uart_ctx->buf.rest_len = 1;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800126e:	461a      	mov	r2, r3
 8001270:	2301      	movs	r3, #1
 8001272:	61d3      	str	r3, [r2, #28]
 8001274:	e026      	b.n	80012c4 <USART2_IRQHandler+0xe8>
      } else {
        // memcpy(uart_ctx->buf.data_rest, uart_ctx->buf.data[uart_ctx->buf.idx], buf_len);
        HAL_DMA_Start(ctx.memcpy_dma, (uint32_t)uart_ctx->buf.data[uart_ctx->buf.idx], (uint32_t)uart_ctx->buf.data_rest, buf_len);
 8001276:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <USART2_IRQHandler+0x118>)
 8001278:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800127c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	029b      	lsls	r3, r3, #10
 8001288:	3310      	adds	r3, #16
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	4413      	add	r3, r2
 800128e:	3304      	adds	r3, #4
 8001290:	4619      	mov	r1, r3
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001298:	461a      	mov	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f000 fc78 	bl	8001b90 <HAL_DMA_Start>
        if (HAL_DMA_PollForTransfer(ctx.memcpy_dma, HAL_DMA_FULL_TRANSFER, 10) == HAL_OK) {
 80012a0:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <USART2_IRQHandler+0x118>)
 80012a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80012a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012a8:	220a      	movs	r2, #10
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 fdc5 	bl	8001e3c <HAL_DMA_PollForTransfer>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d105      	bne.n	80012c4 <USART2_IRQHandler+0xe8>
          uart_ctx->buf.rest_len = buf_len;
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012be:	461a      	mov	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	61d3      	str	r3, [r2, #28]
        }
      }
    }

    // Set index of double buffer to next.
    uart_ctx->buf.idx = 0;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012ca:	461a      	mov	r2, r3
 80012cc:	2300      	movs	r3, #0
 80012ce:	6213      	str	r3, [r2, #32]
    HAL_UART_Receive_DMA(uart_ctx->huart, (uint8_t *)uart_ctx->buf.data[0], DBL_BUF_TOTAL_LEN);
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	6858      	ldr	r0, [r3, #4]
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	3314      	adds	r3, #20
 80012d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012dc:	4619      	mov	r1, r3
 80012de:	f003 fea9 	bl	8005034 <HAL_UART_Receive_DMA>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000260c 	.word	0x2000260c
 80012f0:	20001584 	.word	0x20001584
 80012f4:	2000055c 	.word	0x2000055c

080012f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <MX_USART1_UART_Init+0x4c>)
 800130a:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <MX_USART1_UART_Init+0x50>)
 800130c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <MX_USART1_UART_Init+0x4c>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <MX_USART1_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <MX_USART1_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <MX_USART1_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <MX_USART1_UART_Init+0x4c>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <MX_USART1_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <MX_USART1_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	@ (8001350 <MX_USART1_UART_Init+0x4c>)
 800133c:	f003 fdb9 	bl	8004eb2 <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001346:	f7ff fdd5 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200025c4 	.word	0x200025c4
 8001354:	40013800 	.word	0x40013800

08001358 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800135c:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <MX_USART2_UART_Init+0x4c>)
 800135e:	4a12      	ldr	r2, [pc, #72]	@ (80013a8 <MX_USART2_UART_Init+0x50>)
 8001360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <MX_USART2_UART_Init+0x4c>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <MX_USART2_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <MX_USART2_UART_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001376:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <MX_USART2_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <MX_USART2_UART_Init+0x4c>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <MX_USART2_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <MX_USART2_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800138e:	4805      	ldr	r0, [pc, #20]	@ (80013a4 <MX_USART2_UART_Init+0x4c>)
 8001390:	f003 fd8f 	bl	8004eb2 <HAL_UART_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800139a:	f7ff fdab 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000260c 	.word	0x2000260c
 80013a8:	40004400 	.word	0x40004400

080013ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	@ 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a8d      	ldr	r2, [pc, #564]	@ (80015fc <HAL_UART_MspInit+0x250>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	f040 8088 	bne.w	80014de <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ce:	4b8c      	ldr	r3, [pc, #560]	@ (8001600 <HAL_UART_MspInit+0x254>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	4a8b      	ldr	r2, [pc, #556]	@ (8001600 <HAL_UART_MspInit+0x254>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d8:	6193      	str	r3, [r2, #24]
 80013da:	4b89      	ldr	r3, [pc, #548]	@ (8001600 <HAL_UART_MspInit+0x254>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b86      	ldr	r3, [pc, #536]	@ (8001600 <HAL_UART_MspInit+0x254>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	4a85      	ldr	r2, [pc, #532]	@ (8001600 <HAL_UART_MspInit+0x254>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6193      	str	r3, [r2, #24]
 80013f2:	4b83      	ldr	r3, [pc, #524]	@ (8001600 <HAL_UART_MspInit+0x254>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 0318 	add.w	r3, r7, #24
 8001410:	4619      	mov	r1, r3
 8001412:	487c      	ldr	r0, [pc, #496]	@ (8001604 <HAL_UART_MspInit+0x258>)
 8001414:	f000 ffd8 	bl	80023c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001418:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 0318 	add.w	r3, r7, #24
 800142a:	4619      	mov	r1, r3
 800142c:	4875      	ldr	r0, [pc, #468]	@ (8001604 <HAL_UART_MspInit+0x258>)
 800142e:	f000 ffcb 	bl	80023c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001432:	4b75      	ldr	r3, [pc, #468]	@ (8001608 <HAL_UART_MspInit+0x25c>)
 8001434:	4a75      	ldr	r2, [pc, #468]	@ (800160c <HAL_UART_MspInit+0x260>)
 8001436:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001438:	4b73      	ldr	r3, [pc, #460]	@ (8001608 <HAL_UART_MspInit+0x25c>)
 800143a:	2200      	movs	r2, #0
 800143c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800143e:	4b72      	ldr	r3, [pc, #456]	@ (8001608 <HAL_UART_MspInit+0x25c>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001444:	4b70      	ldr	r3, [pc, #448]	@ (8001608 <HAL_UART_MspInit+0x25c>)
 8001446:	2280      	movs	r2, #128	@ 0x80
 8001448:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800144a:	4b6f      	ldr	r3, [pc, #444]	@ (8001608 <HAL_UART_MspInit+0x25c>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001450:	4b6d      	ldr	r3, [pc, #436]	@ (8001608 <HAL_UART_MspInit+0x25c>)
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001456:	4b6c      	ldr	r3, [pc, #432]	@ (8001608 <HAL_UART_MspInit+0x25c>)
 8001458:	2220      	movs	r2, #32
 800145a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800145c:	4b6a      	ldr	r3, [pc, #424]	@ (8001608 <HAL_UART_MspInit+0x25c>)
 800145e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001462:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001464:	4868      	ldr	r0, [pc, #416]	@ (8001608 <HAL_UART_MspInit+0x25c>)
 8001466:	f000 fb39 	bl	8001adc <HAL_DMA_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8001470:	f7ff fd40 	bl	8000ef4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a64      	ldr	r2, [pc, #400]	@ (8001608 <HAL_UART_MspInit+0x25c>)
 8001478:	63da      	str	r2, [r3, #60]	@ 0x3c
 800147a:	4a63      	ldr	r2, [pc, #396]	@ (8001608 <HAL_UART_MspInit+0x25c>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001480:	4b63      	ldr	r3, [pc, #396]	@ (8001610 <HAL_UART_MspInit+0x264>)
 8001482:	4a64      	ldr	r2, [pc, #400]	@ (8001614 <HAL_UART_MspInit+0x268>)
 8001484:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001486:	4b62      	ldr	r3, [pc, #392]	@ (8001610 <HAL_UART_MspInit+0x264>)
 8001488:	2210      	movs	r2, #16
 800148a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800148c:	4b60      	ldr	r3, [pc, #384]	@ (8001610 <HAL_UART_MspInit+0x264>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001492:	4b5f      	ldr	r3, [pc, #380]	@ (8001610 <HAL_UART_MspInit+0x264>)
 8001494:	2280      	movs	r2, #128	@ 0x80
 8001496:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001498:	4b5d      	ldr	r3, [pc, #372]	@ (8001610 <HAL_UART_MspInit+0x264>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800149e:	4b5c      	ldr	r3, [pc, #368]	@ (8001610 <HAL_UART_MspInit+0x264>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80014a4:	4b5a      	ldr	r3, [pc, #360]	@ (8001610 <HAL_UART_MspInit+0x264>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014aa:	4b59      	ldr	r3, [pc, #356]	@ (8001610 <HAL_UART_MspInit+0x264>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80014b0:	4857      	ldr	r0, [pc, #348]	@ (8001610 <HAL_UART_MspInit+0x264>)
 80014b2:	f000 fb13 	bl	8001adc <HAL_DMA_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 80014bc:	f7ff fd1a 	bl	8000ef4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a53      	ldr	r2, [pc, #332]	@ (8001610 <HAL_UART_MspInit+0x264>)
 80014c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80014c6:	4a52      	ldr	r2, [pc, #328]	@ (8001610 <HAL_UART_MspInit+0x264>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	2025      	movs	r0, #37	@ 0x25
 80014d2:	f000 fac0 	bl	8001a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014d6:	2025      	movs	r0, #37	@ 0x25
 80014d8:	f000 fad9 	bl	8001a8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014dc:	e08a      	b.n	80015f4 <HAL_UART_MspInit+0x248>
  else if(uartHandle->Instance==USART2)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a4d      	ldr	r2, [pc, #308]	@ (8001618 <HAL_UART_MspInit+0x26c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	f040 8085 	bne.w	80015f4 <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ea:	4b45      	ldr	r3, [pc, #276]	@ (8001600 <HAL_UART_MspInit+0x254>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4a44      	ldr	r2, [pc, #272]	@ (8001600 <HAL_UART_MspInit+0x254>)
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f4:	61d3      	str	r3, [r2, #28]
 80014f6:	4b42      	ldr	r3, [pc, #264]	@ (8001600 <HAL_UART_MspInit+0x254>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	4b3f      	ldr	r3, [pc, #252]	@ (8001600 <HAL_UART_MspInit+0x254>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	4a3e      	ldr	r2, [pc, #248]	@ (8001600 <HAL_UART_MspInit+0x254>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6193      	str	r3, [r2, #24]
 800150e:	4b3c      	ldr	r3, [pc, #240]	@ (8001600 <HAL_UART_MspInit+0x254>)
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800151a:	2304      	movs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 0318 	add.w	r3, r7, #24
 800152a:	4619      	mov	r1, r3
 800152c:	4835      	ldr	r0, [pc, #212]	@ (8001604 <HAL_UART_MspInit+0x258>)
 800152e:	f000 ff4b 	bl	80023c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001532:	2308      	movs	r3, #8
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 0318 	add.w	r3, r7, #24
 8001542:	4619      	mov	r1, r3
 8001544:	482f      	ldr	r0, [pc, #188]	@ (8001604 <HAL_UART_MspInit+0x258>)
 8001546:	f000 ff3f 	bl	80023c8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800154a:	4b34      	ldr	r3, [pc, #208]	@ (800161c <HAL_UART_MspInit+0x270>)
 800154c:	4a34      	ldr	r2, [pc, #208]	@ (8001620 <HAL_UART_MspInit+0x274>)
 800154e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001550:	4b32      	ldr	r3, [pc, #200]	@ (800161c <HAL_UART_MspInit+0x270>)
 8001552:	2200      	movs	r2, #0
 8001554:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001556:	4b31      	ldr	r3, [pc, #196]	@ (800161c <HAL_UART_MspInit+0x270>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800155c:	4b2f      	ldr	r3, [pc, #188]	@ (800161c <HAL_UART_MspInit+0x270>)
 800155e:	2280      	movs	r2, #128	@ 0x80
 8001560:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001562:	4b2e      	ldr	r3, [pc, #184]	@ (800161c <HAL_UART_MspInit+0x270>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001568:	4b2c      	ldr	r3, [pc, #176]	@ (800161c <HAL_UART_MspInit+0x270>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800156e:	4b2b      	ldr	r3, [pc, #172]	@ (800161c <HAL_UART_MspInit+0x270>)
 8001570:	2220      	movs	r2, #32
 8001572:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001574:	4b29      	ldr	r3, [pc, #164]	@ (800161c <HAL_UART_MspInit+0x270>)
 8001576:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800157a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800157c:	4827      	ldr	r0, [pc, #156]	@ (800161c <HAL_UART_MspInit+0x270>)
 800157e:	f000 faad 	bl	8001adc <HAL_DMA_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8001588:	f7ff fcb4 	bl	8000ef4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a23      	ldr	r2, [pc, #140]	@ (800161c <HAL_UART_MspInit+0x270>)
 8001590:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001592:	4a22      	ldr	r2, [pc, #136]	@ (800161c <HAL_UART_MspInit+0x270>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001598:	4b22      	ldr	r3, [pc, #136]	@ (8001624 <HAL_UART_MspInit+0x278>)
 800159a:	4a23      	ldr	r2, [pc, #140]	@ (8001628 <HAL_UART_MspInit+0x27c>)
 800159c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800159e:	4b21      	ldr	r3, [pc, #132]	@ (8001624 <HAL_UART_MspInit+0x278>)
 80015a0:	2210      	movs	r2, #16
 80015a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001624 <HAL_UART_MspInit+0x278>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001624 <HAL_UART_MspInit+0x278>)
 80015ac:	2280      	movs	r2, #128	@ 0x80
 80015ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001624 <HAL_UART_MspInit+0x278>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001624 <HAL_UART_MspInit+0x278>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80015bc:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <HAL_UART_MspInit+0x278>)
 80015be:	2200      	movs	r2, #0
 80015c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015c2:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <HAL_UART_MspInit+0x278>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015c8:	4816      	ldr	r0, [pc, #88]	@ (8001624 <HAL_UART_MspInit+0x278>)
 80015ca:	f000 fa87 	bl	8001adc <HAL_DMA_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 80015d4:	f7ff fc8e 	bl	8000ef4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <HAL_UART_MspInit+0x278>)
 80015dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80015de:	4a11      	ldr	r2, [pc, #68]	@ (8001624 <HAL_UART_MspInit+0x278>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2100      	movs	r1, #0
 80015e8:	2026      	movs	r0, #38	@ 0x26
 80015ea:	f000 fa34 	bl	8001a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015ee:	2026      	movs	r0, #38	@ 0x26
 80015f0:	f000 fa4d 	bl	8001a8e <HAL_NVIC_EnableIRQ>
}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	@ 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40013800 	.word	0x40013800
 8001600:	40021000 	.word	0x40021000
 8001604:	40010800 	.word	0x40010800
 8001608:	20002654 	.word	0x20002654
 800160c:	40020058 	.word	0x40020058
 8001610:	20002698 	.word	0x20002698
 8001614:	40020044 	.word	0x40020044
 8001618:	40004400 	.word	0x40004400
 800161c:	200026dc 	.word	0x200026dc
 8001620:	4002006c 	.word	0x4002006c
 8001624:	20002720 	.word	0x20002720
 8001628:	40020080 	.word	0x40020080

0800162c <HAL_UART_RxHalfCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uart_ctx_t * const uart_ctx = (huart == &huart1) ? &ctx.uart1 : &ctx.uart2;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a16      	ldr	r2, [pc, #88]	@ (8001690 <HAL_UART_RxHalfCpltCallback+0x64>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d101      	bne.n	8001640 <HAL_UART_RxHalfCpltCallback+0x14>
 800163c:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <HAL_UART_RxHalfCpltCallback+0x68>)
 800163e:	e000      	b.n	8001642 <HAL_UART_RxHalfCpltCallback+0x16>
 8001640:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <HAL_UART_RxHalfCpltCallback+0x6c>)
 8001642:	60fb      	str	r3, [r7, #12]
  // const int usb_idx = (huart == &huart2) ? 0 : 2;

  if (uart_ctx->buf.idx != 0) {
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <HAL_UART_RxHalfCpltCallback+0x30>
    uart_ctx->buf.idx = 0;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001656:	461a      	mov	r2, r3
 8001658:	2300      	movs	r3, #0
 800165a:	6213      	str	r3, [r2, #32]
  }

  if (uart_ctx->buf_idx == 1) {
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001664:	2b01      	cmp	r3, #1
 8001666:	d00d      	beq.n	8001684 <HAL_UART_RxHalfCpltCallback+0x58>
    // SEGGER_RTT_printf(0, "rxhalf: %s; [X]\n", uart_ctx->name);
    return;
  }

  // In Rx Half callback, the length of received data is half length of double buffer.
  uart_ctx->buf.len[0] = DBL_BUF_LEN;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800166e:	461a      	mov	r2, r3
 8001670:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001674:	6153      	str	r3, [r2, #20]
  // Set index of double buffer to next.
  uart_ctx->buf.idx = 1;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800167c:	461a      	mov	r2, r3
 800167e:	2301      	movs	r3, #1
 8001680:	6213      	str	r3, [r2, #32]
 8001682:	e000      	b.n	8001686 <HAL_UART_RxHalfCpltCallback+0x5a>
    return;
 8001684:	bf00      	nop
  // SEGGER_RTT_printf(0, "rxhalf: %s; \n", uart_ctx->name);
}
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	200025c4 	.word	0x200025c4
 8001694:	2000055c 	.word	0x2000055c
 8001698:	20001584 	.word	0x20001584

0800169c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uart_ctx_t * const uart_ctx = (huart == &huart1) ? &ctx.uart1 : &ctx.uart2;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a16      	ldr	r2, [pc, #88]	@ (8001700 <HAL_UART_RxCpltCallback+0x64>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_UART_RxCpltCallback+0x14>
 80016ac:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <HAL_UART_RxCpltCallback+0x68>)
 80016ae:	e000      	b.n	80016b2 <HAL_UART_RxCpltCallback+0x16>
 80016b0:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <HAL_UART_RxCpltCallback+0x6c>)
 80016b2:	60fb      	str	r3, [r7, #12]
  // const int usb_idx = (huart == &huart2) ? 0 : 2;

  if (uart_ctx->buf.idx != 1) {
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d005      	beq.n	80016cc <HAL_UART_RxCpltCallback+0x30>
    uart_ctx->buf.idx = 1;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c6:	461a      	mov	r2, r3
 80016c8:	2301      	movs	r3, #1
 80016ca:	6213      	str	r3, [r2, #32]
  }
  if (uart_ctx->buf_idx == 0) {
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00d      	beq.n	80016f4 <HAL_UART_RxCpltCallback+0x58>
    // SEGGER_RTT_printf(0, "rxcmpl: %s; [X]\n", uart_ctx->name);
    return;
  }

  // In Rx callback, the length of received data is half length of double buffer.
  uart_ctx->buf.len[1] = DBL_BUF_LEN;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016de:	461a      	mov	r2, r3
 80016e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016e4:	6193      	str	r3, [r2, #24]
  // Set index of double buffer to next.
  uart_ctx->buf.idx = 0;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ec:	461a      	mov	r2, r3
 80016ee:	2300      	movs	r3, #0
 80016f0:	6213      	str	r3, [r2, #32]
 80016f2:	e000      	b.n	80016f6 <HAL_UART_RxCpltCallback+0x5a>
    return;
 80016f4:	bf00      	nop
  // SEGGER_RTT_printf(0, "rxcmpl: %s; \n", uart_ctx->name);
}
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	200025c4 	.word	0x200025c4
 8001704:	2000055c 	.word	0x2000055c
 8001708:	20001584 	.word	0x20001584

0800170c <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uart_ctx_t * const uart_ctx = (huart == &huart1) ? &ctx.uart1 : &ctx.uart2;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a0b      	ldr	r2, [pc, #44]	@ (8001744 <HAL_UART_ErrorCallback+0x38>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d101      	bne.n	8001720 <HAL_UART_ErrorCallback+0x14>
 800171c:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <HAL_UART_ErrorCallback+0x3c>)
 800171e:	e000      	b.n	8001722 <HAL_UART_ErrorCallback+0x16>
 8001720:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <HAL_UART_ErrorCallback+0x40>)
 8001722:	60fb      	str	r3, [r7, #12]

  HAL_UART_DMAStop(huart);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f003 fcaa 	bl	800507e <HAL_UART_DMAStop>
  HAL_UART_Receive_DMA(huart, (uint8_t *)uart_ctx->buf.data[0], DBL_BUF_TOTAL_LEN);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3314      	adds	r3, #20
 800172e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001732:	4619      	mov	r1, r3
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f003 fc7d 	bl	8005034 <HAL_UART_Receive_DMA>
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200025c4 	.word	0x200025c4
 8001748:	2000055c 	.word	0x2000055c
 800174c:	20001584 	.word	0x20001584

08001750 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001750:	f7ff fdd2 	bl	80012f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001754:	480b      	ldr	r0, [pc, #44]	@ (8001784 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001756:	490c      	ldr	r1, [pc, #48]	@ (8001788 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001758:	4a0c      	ldr	r2, [pc, #48]	@ (800178c <LoopFillZerobss+0x16>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a09      	ldr	r2, [pc, #36]	@ (8001790 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800176c:	4c09      	ldr	r4, [pc, #36]	@ (8001794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800177a:	f008 ff69 	bl	800a650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800177e:	f7ff fa6f 	bl	8000c60 <main>
  bx lr
 8001782:	4770      	bx	lr
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 800178c:	0800a840 	.word	0x0800a840
  ldr r2, =_sbss
 8001790:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8001794:	20003488 	.word	0x20003488

08001798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC1_2_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a0:	4b08      	ldr	r3, [pc, #32]	@ (80017c4 <HAL_Init+0x28>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a07      	ldr	r2, [pc, #28]	@ (80017c4 <HAL_Init+0x28>)
 80017a6:	f043 0310 	orr.w	r3, r3, #16
 80017aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ac:	2003      	movs	r0, #3
 80017ae:	f000 f947 	bl	8001a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b2:	200f      	movs	r0, #15
 80017b4:	f000 f808 	bl	80017c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b8:	f7ff fbe2 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40022000 	.word	0x40022000

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_InitTick+0x54>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <HAL_InitTick+0x58>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017de:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f95f 	bl	8001aaa <HAL_SYSTICK_Config>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00e      	b.n	8001814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	d80a      	bhi.n	8001812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f000 f927 	bl	8001a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001808:	4a06      	ldr	r2, [pc, #24]	@ (8001824 <HAL_InitTick+0x5c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000000 	.word	0x20000000
 8001820:	20000008 	.word	0x20000008
 8001824:	20000004 	.word	0x20000004

08001828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <HAL_IncTick+0x1c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <HAL_IncTick+0x20>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4413      	add	r3, r2
 8001838:	4a03      	ldr	r2, [pc, #12]	@ (8001848 <HAL_IncTick+0x20>)
 800183a:	6013      	str	r3, [r2, #0]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	20000008 	.word	0x20000008
 8001848:	20002764 	.word	0x20002764

0800184c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b02      	ldr	r3, [pc, #8]	@ (800185c <HAL_GetTick+0x10>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	20002764 	.word	0x20002764

08001860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff fff0 	bl	800184c <HAL_GetTick>
 800186c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d005      	beq.n	8001886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <HAL_Delay+0x44>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001886:	bf00      	nop
 8001888:	f7ff ffe0 	bl	800184c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	429a      	cmp	r2, r3
 8001896:	d8f7      	bhi.n	8001888 <HAL_Delay+0x28>
  {
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db0b      	blt.n	8001936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4906      	ldr	r1, [pc, #24]	@ (8001940 <__NVIC_EnableIRQ+0x34>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100

08001944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	2b00      	cmp	r3, #0
 8001956:	db0a      	blt.n	800196e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	490c      	ldr	r1, [pc, #48]	@ (8001990 <__NVIC_SetPriority+0x4c>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	0112      	lsls	r2, r2, #4
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	440b      	add	r3, r1
 8001968:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800196c:	e00a      	b.n	8001984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4908      	ldr	r1, [pc, #32]	@ (8001994 <__NVIC_SetPriority+0x50>)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	3b04      	subs	r3, #4
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	440b      	add	r3, r1
 8001982:	761a      	strb	r2, [r3, #24]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e100 	.word	0xe000e100
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	@ 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f1c3 0307 	rsb	r3, r3, #7
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	bf28      	it	cs
 80019b6:	2304      	movcs	r3, #4
 80019b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3304      	adds	r3, #4
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d902      	bls.n	80019c8 <NVIC_EncodePriority+0x30>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3b03      	subs	r3, #3
 80019c6:	e000      	b.n	80019ca <NVIC_EncodePriority+0x32>
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	401a      	ands	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43d9      	mvns	r1, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	4313      	orrs	r3, r2
         );
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3724      	adds	r7, #36	@ 0x24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a0c:	d301      	bcc.n	8001a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00f      	b.n	8001a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a12:	4a0a      	ldr	r2, [pc, #40]	@ (8001a3c <SysTick_Config+0x40>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a20:	f7ff ff90 	bl	8001944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <SysTick_Config+0x40>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2a:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <SysTick_Config+0x40>)
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	e000e010 	.word	0xe000e010

08001a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff2d 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a68:	f7ff ff42 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	6978      	ldr	r0, [r7, #20]
 8001a74:	f7ff ff90 	bl	8001998 <NVIC_EncodePriority>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff5f 	bl	8001944 <__NVIC_SetPriority>
}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff35 	bl	800190c <__NVIC_EnableIRQ>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ffa2 	bl	80019fc <SysTick_Config>
 8001ab8:	4603      	mov	r3, r0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001ac6:	f000 f802 	bl	8001ace <HAL_SYSTICK_Callback>
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
	...

08001adc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e043      	b.n	8001b7a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b22      	ldr	r3, [pc, #136]	@ (8001b84 <HAL_DMA_Init+0xa8>)
 8001afa:	4413      	add	r3, r2
 8001afc:	4a22      	ldr	r2, [pc, #136]	@ (8001b88 <HAL_DMA_Init+0xac>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	091b      	lsrs	r3, r3, #4
 8001b04:	009a      	lsls	r2, r3, #2
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001b8c <HAL_DMA_Init+0xb0>)
 8001b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b26:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001b2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	bffdfff8 	.word	0xbffdfff8
 8001b88:	cccccccd 	.word	0xcccccccd
 8001b8c:	40020000 	.word	0x40020000

08001b90 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_DMA_Start+0x20>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e02e      	b.n	8001c0e <HAL_DMA_Start+0x7e>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d11d      	bne.n	8001c00 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	639a      	str	r2, [r3, #56]	@ 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0201 	bic.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	68b9      	ldr	r1, [r7, #8]
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 fbbf 	bl	800236c <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	e005      	b.n	8001c0c <HAL_DMA_Start+0x7c>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_DMA_Start_IT+0x20>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e04b      	b.n	8001cce <HAL_DMA_Start_IT+0xb8>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d13a      	bne.n	8001cc0 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 fb7c 	bl	800236c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 020e 	orr.w	r2, r2, #14
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e00f      	b.n	8001cae <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0204 	bic.w	r2, r2, #4
 8001c9c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 020a 	orr.w	r2, r2, #10
 8001cac:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	e005      	b.n	8001ccc <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d008      	beq.n	8001d00 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e020      	b.n	8001d42 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 020e 	bic.w	r2, r2, #14
 8001d0e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0201 	bic.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d28:	2101      	movs	r1, #1
 8001d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d005      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2204      	movs	r2, #4
 8001d68:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
 8001d6e:	e051      	b.n	8001e14 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 020e 	bic.w	r2, r2, #14
 8001d7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a22      	ldr	r2, [pc, #136]	@ (8001e20 <HAL_DMA_Abort_IT+0xd4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d029      	beq.n	8001dee <HAL_DMA_Abort_IT+0xa2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a21      	ldr	r2, [pc, #132]	@ (8001e24 <HAL_DMA_Abort_IT+0xd8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d022      	beq.n	8001dea <HAL_DMA_Abort_IT+0x9e>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e28 <HAL_DMA_Abort_IT+0xdc>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d01a      	beq.n	8001de4 <HAL_DMA_Abort_IT+0x98>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e2c <HAL_DMA_Abort_IT+0xe0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d012      	beq.n	8001dde <HAL_DMA_Abort_IT+0x92>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8001e30 <HAL_DMA_Abort_IT+0xe4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00a      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0x8c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e34 <HAL_DMA_Abort_IT+0xe8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d102      	bne.n	8001dd2 <HAL_DMA_Abort_IT+0x86>
 8001dcc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001dd0:	e00e      	b.n	8001df0 <HAL_DMA_Abort_IT+0xa4>
 8001dd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dd6:	e00b      	b.n	8001df0 <HAL_DMA_Abort_IT+0xa4>
 8001dd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ddc:	e008      	b.n	8001df0 <HAL_DMA_Abort_IT+0xa4>
 8001dde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de2:	e005      	b.n	8001df0 <HAL_DMA_Abort_IT+0xa4>
 8001de4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001de8:	e002      	b.n	8001df0 <HAL_DMA_Abort_IT+0xa4>
 8001dea:	2310      	movs	r3, #16
 8001dec:	e000      	b.n	8001df0 <HAL_DMA_Abort_IT+0xa4>
 8001dee:	2301      	movs	r3, #1
 8001df0:	4a11      	ldr	r2, [pc, #68]	@ (8001e38 <HAL_DMA_Abort_IT+0xec>)
 8001df2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4798      	blx	r3
    } 
  }
  return status;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40020008 	.word	0x40020008
 8001e24:	4002001c 	.word	0x4002001c
 8001e28:	40020030 	.word	0x40020030
 8001e2c:	40020044 	.word	0x40020044
 8001e30:	40020058 	.word	0x40020058
 8001e34:	4002006c 	.word	0x4002006c
 8001e38:	40020000 	.word	0x40020000

08001e3c <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the DMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  uint32_t temp;
  uint32_t tickstart = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d008      	beq.n	8001e6a <HAL_DMA_PollForTransfer+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2020 	strb.w	r2, [r3, #32]
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e167      	b.n	800213a <HAL_DMA_PollForTransfer+0x2fe>
  }

  /* Polling mode not supported in circular mode */
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_DMA_PollForTransfer+0x48>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e7e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e15a      	b.n	800213a <HAL_DMA_PollForTransfer+0x2fe>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d131      	bne.n	8001eee <HAL_DMA_PollForTransfer+0xb2>
  {
    /* Transfer Complete flag */
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a88      	ldr	r2, [pc, #544]	@ (80020b0 <HAL_DMA_PollForTransfer+0x274>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d029      	beq.n	8001ee8 <HAL_DMA_PollForTransfer+0xac>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a86      	ldr	r2, [pc, #536]	@ (80020b4 <HAL_DMA_PollForTransfer+0x278>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d022      	beq.n	8001ee4 <HAL_DMA_PollForTransfer+0xa8>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a85      	ldr	r2, [pc, #532]	@ (80020b8 <HAL_DMA_PollForTransfer+0x27c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d01a      	beq.n	8001ede <HAL_DMA_PollForTransfer+0xa2>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a83      	ldr	r2, [pc, #524]	@ (80020bc <HAL_DMA_PollForTransfer+0x280>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d012      	beq.n	8001ed8 <HAL_DMA_PollForTransfer+0x9c>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a82      	ldr	r2, [pc, #520]	@ (80020c0 <HAL_DMA_PollForTransfer+0x284>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d00a      	beq.n	8001ed2 <HAL_DMA_PollForTransfer+0x96>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a80      	ldr	r2, [pc, #512]	@ (80020c4 <HAL_DMA_PollForTransfer+0x288>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d102      	bne.n	8001ecc <HAL_DMA_PollForTransfer+0x90>
 8001ec6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001eca:	e00e      	b.n	8001eea <HAL_DMA_PollForTransfer+0xae>
 8001ecc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ed0:	e00b      	b.n	8001eea <HAL_DMA_PollForTransfer+0xae>
 8001ed2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ed6:	e008      	b.n	8001eea <HAL_DMA_PollForTransfer+0xae>
 8001ed8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001edc:	e005      	b.n	8001eea <HAL_DMA_PollForTransfer+0xae>
 8001ede:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ee2:	e002      	b.n	8001eea <HAL_DMA_PollForTransfer+0xae>
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	e000      	b.n	8001eea <HAL_DMA_PollForTransfer+0xae>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	e030      	b.n	8001f50 <HAL_DMA_PollForTransfer+0x114>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a6f      	ldr	r2, [pc, #444]	@ (80020b0 <HAL_DMA_PollForTransfer+0x274>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d029      	beq.n	8001f4c <HAL_DMA_PollForTransfer+0x110>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a6d      	ldr	r2, [pc, #436]	@ (80020b4 <HAL_DMA_PollForTransfer+0x278>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d022      	beq.n	8001f48 <HAL_DMA_PollForTransfer+0x10c>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a6c      	ldr	r2, [pc, #432]	@ (80020b8 <HAL_DMA_PollForTransfer+0x27c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d01a      	beq.n	8001f42 <HAL_DMA_PollForTransfer+0x106>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a6a      	ldr	r2, [pc, #424]	@ (80020bc <HAL_DMA_PollForTransfer+0x280>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d012      	beq.n	8001f3c <HAL_DMA_PollForTransfer+0x100>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a69      	ldr	r2, [pc, #420]	@ (80020c0 <HAL_DMA_PollForTransfer+0x284>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00a      	beq.n	8001f36 <HAL_DMA_PollForTransfer+0xfa>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a67      	ldr	r2, [pc, #412]	@ (80020c4 <HAL_DMA_PollForTransfer+0x288>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d102      	bne.n	8001f30 <HAL_DMA_PollForTransfer+0xf4>
 8001f2a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f2e:	e00e      	b.n	8001f4e <HAL_DMA_PollForTransfer+0x112>
 8001f30:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001f34:	e00b      	b.n	8001f4e <HAL_DMA_PollForTransfer+0x112>
 8001f36:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f3a:	e008      	b.n	8001f4e <HAL_DMA_PollForTransfer+0x112>
 8001f3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f40:	e005      	b.n	8001f4e <HAL_DMA_PollForTransfer+0x112>
 8001f42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f46:	e002      	b.n	8001f4e <HAL_DMA_PollForTransfer+0x112>
 8001f48:	2340      	movs	r3, #64	@ 0x40
 8001f4a:	e000      	b.n	8001f4e <HAL_DMA_PollForTransfer+0x112>
 8001f4c:	2304      	movs	r3, #4
 8001f4e:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f50:	f7ff fc7c 	bl	800184c <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8001f56:	e06b      	b.n	8002030 <HAL_DMA_PollForTransfer+0x1f4>
  {
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 8001f58:	4b5b      	ldr	r3, [pc, #364]	@ (80020c8 <HAL_DMA_PollForTransfer+0x28c>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4953      	ldr	r1, [pc, #332]	@ (80020b0 <HAL_DMA_PollForTransfer+0x274>)
 8001f62:	428b      	cmp	r3, r1
 8001f64:	d029      	beq.n	8001fba <HAL_DMA_PollForTransfer+0x17e>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4952      	ldr	r1, [pc, #328]	@ (80020b4 <HAL_DMA_PollForTransfer+0x278>)
 8001f6c:	428b      	cmp	r3, r1
 8001f6e:	d022      	beq.n	8001fb6 <HAL_DMA_PollForTransfer+0x17a>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4950      	ldr	r1, [pc, #320]	@ (80020b8 <HAL_DMA_PollForTransfer+0x27c>)
 8001f76:	428b      	cmp	r3, r1
 8001f78:	d01a      	beq.n	8001fb0 <HAL_DMA_PollForTransfer+0x174>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	494f      	ldr	r1, [pc, #316]	@ (80020bc <HAL_DMA_PollForTransfer+0x280>)
 8001f80:	428b      	cmp	r3, r1
 8001f82:	d012      	beq.n	8001faa <HAL_DMA_PollForTransfer+0x16e>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	494d      	ldr	r1, [pc, #308]	@ (80020c0 <HAL_DMA_PollForTransfer+0x284>)
 8001f8a:	428b      	cmp	r3, r1
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_DMA_PollForTransfer+0x168>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	494c      	ldr	r1, [pc, #304]	@ (80020c4 <HAL_DMA_PollForTransfer+0x288>)
 8001f94:	428b      	cmp	r3, r1
 8001f96:	d102      	bne.n	8001f9e <HAL_DMA_PollForTransfer+0x162>
 8001f98:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001f9c:	e00e      	b.n	8001fbc <HAL_DMA_PollForTransfer+0x180>
 8001f9e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001fa2:	e00b      	b.n	8001fbc <HAL_DMA_PollForTransfer+0x180>
 8001fa4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001fa8:	e008      	b.n	8001fbc <HAL_DMA_PollForTransfer+0x180>
 8001faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fae:	e005      	b.n	8001fbc <HAL_DMA_PollForTransfer+0x180>
 8001fb0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fb4:	e002      	b.n	8001fbc <HAL_DMA_PollForTransfer+0x180>
 8001fb6:	2380      	movs	r3, #128	@ 0x80
 8001fb8:	e000      	b.n	8001fbc <HAL_DMA_PollForTransfer+0x180>
 8001fba:	2308      	movs	r3, #8
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d017      	beq.n	8001ff2 <HAL_DMA_PollForTransfer+0x1b6>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fca:	2101      	movs	r1, #1
 8001fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd0:	605a      	str	r2, [r3, #4]

      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0a3      	b.n	800213a <HAL_DMA_PollForTransfer+0x2fe>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff8:	d01a      	beq.n	8002030 <HAL_DMA_PollForTransfer+0x1f4>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <HAL_DMA_PollForTransfer+0x1d4>
 8002000:	f7ff fc24 	bl	800184c <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	d20f      	bcs.n	8002030 <HAL_DMA_PollForTransfer+0x1f4>
      {
        /* Update error code */
        SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002014:	f043 0220 	orr.w	r2, r3, #32
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e084      	b.n	800213a <HAL_DMA_PollForTransfer+0x2fe>
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8002030:	4b25      	ldr	r3, [pc, #148]	@ (80020c8 <HAL_DMA_PollForTransfer+0x28c>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d08d      	beq.n	8001f58 <HAL_DMA_PollForTransfer+0x11c>
      }
    }
  }

  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d144      	bne.n	80020cc <HAL_DMA_PollForTransfer+0x290>
  {
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a1a      	ldr	r2, [pc, #104]	@ (80020b0 <HAL_DMA_PollForTransfer+0x274>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d029      	beq.n	80020a0 <HAL_DMA_PollForTransfer+0x264>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a18      	ldr	r2, [pc, #96]	@ (80020b4 <HAL_DMA_PollForTransfer+0x278>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d022      	beq.n	800209c <HAL_DMA_PollForTransfer+0x260>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a17      	ldr	r2, [pc, #92]	@ (80020b8 <HAL_DMA_PollForTransfer+0x27c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d01a      	beq.n	8002096 <HAL_DMA_PollForTransfer+0x25a>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a15      	ldr	r2, [pc, #84]	@ (80020bc <HAL_DMA_PollForTransfer+0x280>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d012      	beq.n	8002090 <HAL_DMA_PollForTransfer+0x254>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a14      	ldr	r2, [pc, #80]	@ (80020c0 <HAL_DMA_PollForTransfer+0x284>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d00a      	beq.n	800208a <HAL_DMA_PollForTransfer+0x24e>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a12      	ldr	r2, [pc, #72]	@ (80020c4 <HAL_DMA_PollForTransfer+0x288>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d102      	bne.n	8002084 <HAL_DMA_PollForTransfer+0x248>
 800207e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002082:	e00e      	b.n	80020a2 <HAL_DMA_PollForTransfer+0x266>
 8002084:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002088:	e00b      	b.n	80020a2 <HAL_DMA_PollForTransfer+0x266>
 800208a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800208e:	e008      	b.n	80020a2 <HAL_DMA_PollForTransfer+0x266>
 8002090:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002094:	e005      	b.n	80020a2 <HAL_DMA_PollForTransfer+0x266>
 8002096:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800209a:	e002      	b.n	80020a2 <HAL_DMA_PollForTransfer+0x266>
 800209c:	2320      	movs	r3, #32
 800209e:	e000      	b.n	80020a2 <HAL_DMA_PollForTransfer+0x266>
 80020a0:	2302      	movs	r3, #2
 80020a2:	4a09      	ldr	r2, [pc, #36]	@ (80020c8 <HAL_DMA_PollForTransfer+0x28c>)
 80020a4:	6053      	str	r3, [r2, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80020ae:	e03f      	b.n	8002130 <HAL_DMA_PollForTransfer+0x2f4>
 80020b0:	40020008 	.word	0x40020008
 80020b4:	4002001c 	.word	0x4002001c
 80020b8:	40020030 	.word	0x40020030
 80020bc:	40020044 	.word	0x40020044
 80020c0:	40020058 	.word	0x40020058
 80020c4:	4002006c 	.word	0x4002006c
 80020c8:	40020000 	.word	0x40020000
  }
  else
  {
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002144 <HAL_DMA_PollForTransfer+0x308>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d029      	beq.n	800212a <HAL_DMA_PollForTransfer+0x2ee>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1b      	ldr	r2, [pc, #108]	@ (8002148 <HAL_DMA_PollForTransfer+0x30c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d022      	beq.n	8002126 <HAL_DMA_PollForTransfer+0x2ea>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a19      	ldr	r2, [pc, #100]	@ (800214c <HAL_DMA_PollForTransfer+0x310>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01a      	beq.n	8002120 <HAL_DMA_PollForTransfer+0x2e4>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a18      	ldr	r2, [pc, #96]	@ (8002150 <HAL_DMA_PollForTransfer+0x314>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d012      	beq.n	800211a <HAL_DMA_PollForTransfer+0x2de>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a16      	ldr	r2, [pc, #88]	@ (8002154 <HAL_DMA_PollForTransfer+0x318>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00a      	beq.n	8002114 <HAL_DMA_PollForTransfer+0x2d8>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a15      	ldr	r2, [pc, #84]	@ (8002158 <HAL_DMA_PollForTransfer+0x31c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d102      	bne.n	800210e <HAL_DMA_PollForTransfer+0x2d2>
 8002108:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800210c:	e00e      	b.n	800212c <HAL_DMA_PollForTransfer+0x2f0>
 800210e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002112:	e00b      	b.n	800212c <HAL_DMA_PollForTransfer+0x2f0>
 8002114:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002118:	e008      	b.n	800212c <HAL_DMA_PollForTransfer+0x2f0>
 800211a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800211e:	e005      	b.n	800212c <HAL_DMA_PollForTransfer+0x2f0>
 8002120:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002124:	e002      	b.n	800212c <HAL_DMA_PollForTransfer+0x2f0>
 8002126:	2340      	movs	r3, #64	@ 0x40
 8002128:	e000      	b.n	800212c <HAL_DMA_PollForTransfer+0x2f0>
 800212a:	2304      	movs	r3, #4
 800212c:	4a0b      	ldr	r2, [pc, #44]	@ (800215c <HAL_DMA_PollForTransfer+0x320>)
 800212e:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40020008 	.word	0x40020008
 8002148:	4002001c 	.word	0x4002001c
 800214c:	40020030 	.word	0x40020030
 8002150:	40020044 	.word	0x40020044
 8002154:	40020058 	.word	0x40020058
 8002158:	4002006c 	.word	0x4002006c
 800215c:	40020000 	.word	0x40020000

08002160 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217c:	2204      	movs	r2, #4
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d04f      	beq.n	8002228 <HAL_DMA_IRQHandler+0xc8>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	2b00      	cmp	r3, #0
 8002190:	d04a      	beq.n	8002228 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d107      	bne.n	80021b0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0204 	bic.w	r2, r2, #4
 80021ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a66      	ldr	r2, [pc, #408]	@ (8002350 <HAL_DMA_IRQHandler+0x1f0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d029      	beq.n	800220e <HAL_DMA_IRQHandler+0xae>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a65      	ldr	r2, [pc, #404]	@ (8002354 <HAL_DMA_IRQHandler+0x1f4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d022      	beq.n	800220a <HAL_DMA_IRQHandler+0xaa>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a63      	ldr	r2, [pc, #396]	@ (8002358 <HAL_DMA_IRQHandler+0x1f8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01a      	beq.n	8002204 <HAL_DMA_IRQHandler+0xa4>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a62      	ldr	r2, [pc, #392]	@ (800235c <HAL_DMA_IRQHandler+0x1fc>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d012      	beq.n	80021fe <HAL_DMA_IRQHandler+0x9e>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a60      	ldr	r2, [pc, #384]	@ (8002360 <HAL_DMA_IRQHandler+0x200>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00a      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x98>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a5f      	ldr	r2, [pc, #380]	@ (8002364 <HAL_DMA_IRQHandler+0x204>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d102      	bne.n	80021f2 <HAL_DMA_IRQHandler+0x92>
 80021ec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021f0:	e00e      	b.n	8002210 <HAL_DMA_IRQHandler+0xb0>
 80021f2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80021f6:	e00b      	b.n	8002210 <HAL_DMA_IRQHandler+0xb0>
 80021f8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80021fc:	e008      	b.n	8002210 <HAL_DMA_IRQHandler+0xb0>
 80021fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002202:	e005      	b.n	8002210 <HAL_DMA_IRQHandler+0xb0>
 8002204:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002208:	e002      	b.n	8002210 <HAL_DMA_IRQHandler+0xb0>
 800220a:	2340      	movs	r3, #64	@ 0x40
 800220c:	e000      	b.n	8002210 <HAL_DMA_IRQHandler+0xb0>
 800220e:	2304      	movs	r3, #4
 8002210:	4a55      	ldr	r2, [pc, #340]	@ (8002368 <HAL_DMA_IRQHandler+0x208>)
 8002212:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 8094 	beq.w	8002346 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002226:	e08e      	b.n	8002346 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	2202      	movs	r2, #2
 800222e:	409a      	lsls	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d056      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x186>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d051      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10b      	bne.n	8002268 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 020a 	bic.w	r2, r2, #10
 800225e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a38      	ldr	r2, [pc, #224]	@ (8002350 <HAL_DMA_IRQHandler+0x1f0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d029      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x166>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a37      	ldr	r2, [pc, #220]	@ (8002354 <HAL_DMA_IRQHandler+0x1f4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d022      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x162>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a35      	ldr	r2, [pc, #212]	@ (8002358 <HAL_DMA_IRQHandler+0x1f8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01a      	beq.n	80022bc <HAL_DMA_IRQHandler+0x15c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a34      	ldr	r2, [pc, #208]	@ (800235c <HAL_DMA_IRQHandler+0x1fc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d012      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x156>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a32      	ldr	r2, [pc, #200]	@ (8002360 <HAL_DMA_IRQHandler+0x200>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00a      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x150>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a31      	ldr	r2, [pc, #196]	@ (8002364 <HAL_DMA_IRQHandler+0x204>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d102      	bne.n	80022aa <HAL_DMA_IRQHandler+0x14a>
 80022a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80022a8:	e00e      	b.n	80022c8 <HAL_DMA_IRQHandler+0x168>
 80022aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022ae:	e00b      	b.n	80022c8 <HAL_DMA_IRQHandler+0x168>
 80022b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022b4:	e008      	b.n	80022c8 <HAL_DMA_IRQHandler+0x168>
 80022b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022ba:	e005      	b.n	80022c8 <HAL_DMA_IRQHandler+0x168>
 80022bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022c0:	e002      	b.n	80022c8 <HAL_DMA_IRQHandler+0x168>
 80022c2:	2320      	movs	r3, #32
 80022c4:	e000      	b.n	80022c8 <HAL_DMA_IRQHandler+0x168>
 80022c6:	2302      	movs	r3, #2
 80022c8:	4a27      	ldr	r2, [pc, #156]	@ (8002368 <HAL_DMA_IRQHandler+0x208>)
 80022ca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d034      	beq.n	8002346 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022e4:	e02f      	b.n	8002346 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	2208      	movs	r2, #8
 80022ec:	409a      	lsls	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d028      	beq.n	8002348 <HAL_DMA_IRQHandler+0x1e8>
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d023      	beq.n	8002348 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 020e 	bic.w	r2, r2, #14
 800230e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002318:	2101      	movs	r1, #1
 800231a:	fa01 f202 	lsl.w	r2, r1, r2
 800231e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	2b00      	cmp	r3, #0
 800233c:	d004      	beq.n	8002348 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	4798      	blx	r3
    }
  }
  return;
 8002346:	bf00      	nop
 8002348:	bf00      	nop
}
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40020008 	.word	0x40020008
 8002354:	4002001c 	.word	0x4002001c
 8002358:	40020030 	.word	0x40020030
 800235c:	40020044 	.word	0x40020044
 8002360:	40020058 	.word	0x40020058
 8002364:	4002006c 	.word	0x4002006c
 8002368:	40020000 	.word	0x40020000

0800236c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002382:	2101      	movs	r1, #1
 8002384:	fa01 f202 	lsl.w	r2, r1, r2
 8002388:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b10      	cmp	r3, #16
 8002398:	d108      	bne.n	80023ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023aa:	e007      	b.n	80023bc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	60da      	str	r2, [r3, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b08b      	sub	sp, #44	@ 0x2c
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023d6:	2300      	movs	r3, #0
 80023d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023da:	e169      	b.n	80026b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023dc:	2201      	movs	r2, #1
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	f040 8158 	bne.w	80026aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4a9a      	ldr	r2, [pc, #616]	@ (8002668 <HAL_GPIO_Init+0x2a0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d05e      	beq.n	80024c2 <HAL_GPIO_Init+0xfa>
 8002404:	4a98      	ldr	r2, [pc, #608]	@ (8002668 <HAL_GPIO_Init+0x2a0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d875      	bhi.n	80024f6 <HAL_GPIO_Init+0x12e>
 800240a:	4a98      	ldr	r2, [pc, #608]	@ (800266c <HAL_GPIO_Init+0x2a4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d058      	beq.n	80024c2 <HAL_GPIO_Init+0xfa>
 8002410:	4a96      	ldr	r2, [pc, #600]	@ (800266c <HAL_GPIO_Init+0x2a4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d86f      	bhi.n	80024f6 <HAL_GPIO_Init+0x12e>
 8002416:	4a96      	ldr	r2, [pc, #600]	@ (8002670 <HAL_GPIO_Init+0x2a8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d052      	beq.n	80024c2 <HAL_GPIO_Init+0xfa>
 800241c:	4a94      	ldr	r2, [pc, #592]	@ (8002670 <HAL_GPIO_Init+0x2a8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d869      	bhi.n	80024f6 <HAL_GPIO_Init+0x12e>
 8002422:	4a94      	ldr	r2, [pc, #592]	@ (8002674 <HAL_GPIO_Init+0x2ac>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d04c      	beq.n	80024c2 <HAL_GPIO_Init+0xfa>
 8002428:	4a92      	ldr	r2, [pc, #584]	@ (8002674 <HAL_GPIO_Init+0x2ac>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d863      	bhi.n	80024f6 <HAL_GPIO_Init+0x12e>
 800242e:	4a92      	ldr	r2, [pc, #584]	@ (8002678 <HAL_GPIO_Init+0x2b0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d046      	beq.n	80024c2 <HAL_GPIO_Init+0xfa>
 8002434:	4a90      	ldr	r2, [pc, #576]	@ (8002678 <HAL_GPIO_Init+0x2b0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d85d      	bhi.n	80024f6 <HAL_GPIO_Init+0x12e>
 800243a:	2b12      	cmp	r3, #18
 800243c:	d82a      	bhi.n	8002494 <HAL_GPIO_Init+0xcc>
 800243e:	2b12      	cmp	r3, #18
 8002440:	d859      	bhi.n	80024f6 <HAL_GPIO_Init+0x12e>
 8002442:	a201      	add	r2, pc, #4	@ (adr r2, 8002448 <HAL_GPIO_Init+0x80>)
 8002444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002448:	080024c3 	.word	0x080024c3
 800244c:	0800249d 	.word	0x0800249d
 8002450:	080024af 	.word	0x080024af
 8002454:	080024f1 	.word	0x080024f1
 8002458:	080024f7 	.word	0x080024f7
 800245c:	080024f7 	.word	0x080024f7
 8002460:	080024f7 	.word	0x080024f7
 8002464:	080024f7 	.word	0x080024f7
 8002468:	080024f7 	.word	0x080024f7
 800246c:	080024f7 	.word	0x080024f7
 8002470:	080024f7 	.word	0x080024f7
 8002474:	080024f7 	.word	0x080024f7
 8002478:	080024f7 	.word	0x080024f7
 800247c:	080024f7 	.word	0x080024f7
 8002480:	080024f7 	.word	0x080024f7
 8002484:	080024f7 	.word	0x080024f7
 8002488:	080024f7 	.word	0x080024f7
 800248c:	080024a5 	.word	0x080024a5
 8002490:	080024b9 	.word	0x080024b9
 8002494:	4a79      	ldr	r2, [pc, #484]	@ (800267c <HAL_GPIO_Init+0x2b4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d013      	beq.n	80024c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800249a:	e02c      	b.n	80024f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	623b      	str	r3, [r7, #32]
          break;
 80024a2:	e029      	b.n	80024f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	3304      	adds	r3, #4
 80024aa:	623b      	str	r3, [r7, #32]
          break;
 80024ac:	e024      	b.n	80024f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	3308      	adds	r3, #8
 80024b4:	623b      	str	r3, [r7, #32]
          break;
 80024b6:	e01f      	b.n	80024f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	330c      	adds	r3, #12
 80024be:	623b      	str	r3, [r7, #32]
          break;
 80024c0:	e01a      	b.n	80024f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d102      	bne.n	80024d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024ca:	2304      	movs	r3, #4
 80024cc:	623b      	str	r3, [r7, #32]
          break;
 80024ce:	e013      	b.n	80024f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d105      	bne.n	80024e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024d8:	2308      	movs	r3, #8
 80024da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	611a      	str	r2, [r3, #16]
          break;
 80024e2:	e009      	b.n	80024f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024e4:	2308      	movs	r3, #8
 80024e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	615a      	str	r2, [r3, #20]
          break;
 80024ee:	e003      	b.n	80024f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024f0:	2300      	movs	r3, #0
 80024f2:	623b      	str	r3, [r7, #32]
          break;
 80024f4:	e000      	b.n	80024f8 <HAL_GPIO_Init+0x130>
          break;
 80024f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	2bff      	cmp	r3, #255	@ 0xff
 80024fc:	d801      	bhi.n	8002502 <HAL_GPIO_Init+0x13a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	e001      	b.n	8002506 <HAL_GPIO_Init+0x13e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3304      	adds	r3, #4
 8002506:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2bff      	cmp	r3, #255	@ 0xff
 800250c:	d802      	bhi.n	8002514 <HAL_GPIO_Init+0x14c>
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	e002      	b.n	800251a <HAL_GPIO_Init+0x152>
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	3b08      	subs	r3, #8
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	210f      	movs	r1, #15
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	fa01 f303 	lsl.w	r3, r1, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	401a      	ands	r2, r3
 800252c:	6a39      	ldr	r1, [r7, #32]
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	fa01 f303 	lsl.w	r3, r1, r3
 8002534:	431a      	orrs	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 80b1 	beq.w	80026aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002548:	4b4d      	ldr	r3, [pc, #308]	@ (8002680 <HAL_GPIO_Init+0x2b8>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	4a4c      	ldr	r2, [pc, #304]	@ (8002680 <HAL_GPIO_Init+0x2b8>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6193      	str	r3, [r2, #24]
 8002554:	4b4a      	ldr	r3, [pc, #296]	@ (8002680 <HAL_GPIO_Init+0x2b8>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002560:	4a48      	ldr	r2, [pc, #288]	@ (8002684 <HAL_GPIO_Init+0x2bc>)
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	3302      	adds	r3, #2
 8002568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	220f      	movs	r2, #15
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a40      	ldr	r2, [pc, #256]	@ (8002688 <HAL_GPIO_Init+0x2c0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d013      	beq.n	80025b4 <HAL_GPIO_Init+0x1ec>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a3f      	ldr	r2, [pc, #252]	@ (800268c <HAL_GPIO_Init+0x2c4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00d      	beq.n	80025b0 <HAL_GPIO_Init+0x1e8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a3e      	ldr	r2, [pc, #248]	@ (8002690 <HAL_GPIO_Init+0x2c8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d007      	beq.n	80025ac <HAL_GPIO_Init+0x1e4>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a3d      	ldr	r2, [pc, #244]	@ (8002694 <HAL_GPIO_Init+0x2cc>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d101      	bne.n	80025a8 <HAL_GPIO_Init+0x1e0>
 80025a4:	2303      	movs	r3, #3
 80025a6:	e006      	b.n	80025b6 <HAL_GPIO_Init+0x1ee>
 80025a8:	2304      	movs	r3, #4
 80025aa:	e004      	b.n	80025b6 <HAL_GPIO_Init+0x1ee>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e002      	b.n	80025b6 <HAL_GPIO_Init+0x1ee>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <HAL_GPIO_Init+0x1ee>
 80025b4:	2300      	movs	r3, #0
 80025b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025b8:	f002 0203 	and.w	r2, r2, #3
 80025bc:	0092      	lsls	r2, r2, #2
 80025be:	4093      	lsls	r3, r2
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025c6:	492f      	ldr	r1, [pc, #188]	@ (8002684 <HAL_GPIO_Init+0x2bc>)
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	3302      	adds	r3, #2
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d006      	beq.n	80025ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002698 <HAL_GPIO_Init+0x2d0>)
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	492c      	ldr	r1, [pc, #176]	@ (8002698 <HAL_GPIO_Init+0x2d0>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	608b      	str	r3, [r1, #8]
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002698 <HAL_GPIO_Init+0x2d0>)
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	4928      	ldr	r1, [pc, #160]	@ (8002698 <HAL_GPIO_Init+0x2d0>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d006      	beq.n	8002616 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002608:	4b23      	ldr	r3, [pc, #140]	@ (8002698 <HAL_GPIO_Init+0x2d0>)
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	4922      	ldr	r1, [pc, #136]	@ (8002698 <HAL_GPIO_Init+0x2d0>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	60cb      	str	r3, [r1, #12]
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002616:	4b20      	ldr	r3, [pc, #128]	@ (8002698 <HAL_GPIO_Init+0x2d0>)
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	43db      	mvns	r3, r3
 800261e:	491e      	ldr	r1, [pc, #120]	@ (8002698 <HAL_GPIO_Init+0x2d0>)
 8002620:	4013      	ands	r3, r2
 8002622:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d006      	beq.n	800263e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002630:	4b19      	ldr	r3, [pc, #100]	@ (8002698 <HAL_GPIO_Init+0x2d0>)
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	4918      	ldr	r1, [pc, #96]	@ (8002698 <HAL_GPIO_Init+0x2d0>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
 800263c:	e006      	b.n	800264c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800263e:	4b16      	ldr	r3, [pc, #88]	@ (8002698 <HAL_GPIO_Init+0x2d0>)
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	43db      	mvns	r3, r3
 8002646:	4914      	ldr	r1, [pc, #80]	@ (8002698 <HAL_GPIO_Init+0x2d0>)
 8002648:	4013      	ands	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d021      	beq.n	800269c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002658:	4b0f      	ldr	r3, [pc, #60]	@ (8002698 <HAL_GPIO_Init+0x2d0>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	490e      	ldr	r1, [pc, #56]	@ (8002698 <HAL_GPIO_Init+0x2d0>)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	600b      	str	r3, [r1, #0]
 8002664:	e021      	b.n	80026aa <HAL_GPIO_Init+0x2e2>
 8002666:	bf00      	nop
 8002668:	10320000 	.word	0x10320000
 800266c:	10310000 	.word	0x10310000
 8002670:	10220000 	.word	0x10220000
 8002674:	10210000 	.word	0x10210000
 8002678:	10120000 	.word	0x10120000
 800267c:	10110000 	.word	0x10110000
 8002680:	40021000 	.word	0x40021000
 8002684:	40010000 	.word	0x40010000
 8002688:	40010800 	.word	0x40010800
 800268c:	40010c00 	.word	0x40010c00
 8002690:	40011000 	.word	0x40011000
 8002694:	40011400 	.word	0x40011400
 8002698:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800269c:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <HAL_GPIO_Init+0x304>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	4909      	ldr	r1, [pc, #36]	@ (80026cc <HAL_GPIO_Init+0x304>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ac:	3301      	adds	r3, #1
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f47f ae8e 	bne.w	80023dc <HAL_GPIO_Init+0x14>
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	372c      	adds	r7, #44	@ 0x2c
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	40010400 	.word	0x40010400

080026d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e0e8      	b.n	80028b4 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f007 fc44 	bl	8009f84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2203      	movs	r2, #3
 8002700:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f003 fc49 	bl	8005fa6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3304      	adds	r3, #4
 800271c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800271e:	f003 fc1f 	bl	8005f60 <USB_CoreInit>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0bf      	b.n	80028b4 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f003 fc4d 	bl	8005fda <USB_SetCurrentMode>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2202      	movs	r2, #2
 800274a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e0b0      	b.n	80028b4 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002752:	2300      	movs	r3, #0
 8002754:	73fb      	strb	r3, [r7, #15]
 8002756:	e03e      	b.n	80027d6 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002758:	7bfa      	ldrb	r2, [r7, #15]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	440b      	add	r3, r1
 8002766:	3311      	adds	r3, #17
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	3310      	adds	r3, #16
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002780:	7bfa      	ldrb	r2, [r7, #15]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	3313      	adds	r3, #19
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	3320      	adds	r3, #32
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	3324      	adds	r3, #36	@ 0x24
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	3301      	adds	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	791b      	ldrb	r3, [r3, #4]
 80027da:	7bfa      	ldrb	r2, [r7, #15]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d3bb      	bcc.n	8002758 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e0:	2300      	movs	r3, #0
 80027e2:	73fb      	strb	r3, [r7, #15]
 80027e4:	e044      	b.n	8002870 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	440b      	add	r3, r1
 800280a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800280e:	7bfa      	ldrb	r2, [r7, #15]
 8002810:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	440b      	add	r3, r1
 8002820:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	440b      	add	r3, r1
 8002836:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800283e:	7bfa      	ldrb	r2, [r7, #15]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	440b      	add	r3, r1
 8002862:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	3301      	adds	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	791b      	ldrb	r3, [r3, #4]
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	429a      	cmp	r2, r3
 8002878:	d3b5      	bcc.n	80027e6 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3304      	adds	r3, #4
 8002882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002884:	f003 fbb5 	bl	8005ff2 <USB_DevInit>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2202      	movs	r2, #2
 8002892:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e00c      	b.n	80028b4 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f005 fe34 	bl	800851a <USB_DevDisconnect>

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_PCD_Start+0x16>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e016      	b.n	8002900 <HAL_PCD_Start+0x44>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 fb4b 	bl	8005f7a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80028e4:	2101      	movs	r1, #1
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f007 fe9f 	bl	800a62a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f005 fe08 	bl	8008506 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f005 fe0a 	bl	800852e <USB_ReadInterrupts>
 800291a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fb1a 	bl	8002f60 <PCD_EP_ISR_Handler>

    return;
 800292c:	e119      	b.n	8002b62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d013      	beq.n	8002960 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002940:	b29a      	uxth	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800294a:	b292      	uxth	r2, r2
 800294c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f007 fb92 	bl	800a07a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002956:	2100      	movs	r1, #0
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f905 	bl	8002b68 <HAL_PCD_SetAddress>

    return;
 800295e:	e100      	b.n	8002b62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00c      	beq.n	8002984 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002972:	b29a      	uxth	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800297c:	b292      	uxth	r2, r2
 800297e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002982:	e0ee      	b.n	8002b62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00c      	beq.n	80029a8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002996:	b29a      	uxth	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029a0:	b292      	uxth	r2, r2
 80029a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80029a6:	e0dc      	b.n	8002b62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d027      	beq.n	8002a02 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0204 	bic.w	r2, r2, #4
 80029c4:	b292      	uxth	r2, r2
 80029c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0208 	bic.w	r2, r2, #8
 80029dc:	b292      	uxth	r2, r2
 80029de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f007 fb86 	bl	800a0f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80029fa:	b292      	uxth	r2, r2
 80029fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002a00:	e0af      	b.n	8002b62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8083 	beq.w	8002b14 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	77fb      	strb	r3, [r7, #31]
 8002a12:	e010      	b.n	8002a36 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	7ffb      	ldrb	r3, [r7, #31]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	441a      	add	r2, r3
 8002a20:	7ffb      	ldrb	r3, [r7, #31]
 8002a22:	8812      	ldrh	r2, [r2, #0]
 8002a24:	b292      	uxth	r2, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	3320      	adds	r3, #32
 8002a2a:	443b      	add	r3, r7
 8002a2c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002a30:	7ffb      	ldrb	r3, [r7, #31]
 8002a32:	3301      	adds	r3, #1
 8002a34:	77fb      	strb	r3, [r7, #31]
 8002a36:	7ffb      	ldrb	r3, [r7, #31]
 8002a38:	2b07      	cmp	r3, #7
 8002a3a:	d9eb      	bls.n	8002a14 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	b292      	uxth	r2, r2
 8002a50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	b292      	uxth	r2, r2
 8002a68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002a6c:	bf00      	nop
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f6      	beq.n	8002a6e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a92:	b292      	uxth	r2, r2
 8002a94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	77fb      	strb	r3, [r7, #31]
 8002a9c:	e00f      	b.n	8002abe <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002a9e:	7ffb      	ldrb	r3, [r7, #31]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	7ffa      	ldrb	r2, [r7, #31]
 8002aa8:	0092      	lsls	r2, r2, #2
 8002aaa:	440a      	add	r2, r1
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	3320      	adds	r3, #32
 8002ab0:	443b      	add	r3, r7
 8002ab2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002ab6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002ab8:	7ffb      	ldrb	r3, [r7, #31]
 8002aba:	3301      	adds	r3, #1
 8002abc:	77fb      	strb	r3, [r7, #31]
 8002abe:	7ffb      	ldrb	r3, [r7, #31]
 8002ac0:	2b07      	cmp	r3, #7
 8002ac2:	d9ec      	bls.n	8002a9e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0208 	orr.w	r2, r2, #8
 8002ad6:	b292      	uxth	r2, r2
 8002ad8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aee:	b292      	uxth	r2, r2
 8002af0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0204 	orr.w	r2, r2, #4
 8002b06:	b292      	uxth	r2, r2
 8002b08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f007 fad7 	bl	800a0c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b12:	e026      	b.n	8002b62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00f      	beq.n	8002b3e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b30:	b292      	uxth	r2, r2
 8002b32:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f007 fa91 	bl	800a05e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b3c:	e011      	b.n	8002b62 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00c      	beq.n	8002b62 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b5a:	b292      	uxth	r2, r2
 8002b5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b60:	bf00      	nop
  }
}
 8002b62:	3720      	adds	r7, #32
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_PCD_SetAddress+0x1a>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e012      	b.n	8002ba8 <HAL_PCD_SetAddress+0x40>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f005 fca1 	bl	80084e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	70fb      	strb	r3, [r7, #3]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	803b      	strh	r3, [r7, #0]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	da0e      	bge.n	8002bf4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	f003 0207 	and.w	r2, r3, #7
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	3310      	adds	r3, #16
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	705a      	strb	r2, [r3, #1]
 8002bf2:	e00e      	b.n	8002c12 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	f003 0207 	and.w	r2, r3, #7
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c1e:	883a      	ldrh	r2, [r7, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	78ba      	ldrb	r2, [r7, #2]
 8002c28:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c2a:	78bb      	ldrb	r3, [r7, #2]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d102      	bne.n	8002c36 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_PCD_EP_Open+0x94>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e00e      	b.n	8002c62 <HAL_PCD_EP_Open+0xb2>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68f9      	ldr	r1, [r7, #12]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 f9ea 	bl	800602c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002c60:	7afb      	ldrb	r3, [r7, #11]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	da0e      	bge.n	8002c9c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c7e:	78fb      	ldrb	r3, [r7, #3]
 8002c80:	f003 0207 	and.w	r2, r3, #7
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	3310      	adds	r3, #16
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2201      	movs	r2, #1
 8002c98:	705a      	strb	r2, [r3, #1]
 8002c9a:	e00e      	b.n	8002cba <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	f003 0207 	and.w	r2, r3, #7
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_PCD_EP_Close+0x6a>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e00e      	b.n	8002cf2 <HAL_PCD_EP_Close+0x88>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68f9      	ldr	r1, [r7, #12]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f003 fd62 	bl	80067ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	460b      	mov	r3, r1
 8002d08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d0a:	7afb      	ldrb	r3, [r7, #11]
 8002d0c:	f003 0207 	and.w	r2, r3, #7
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2200      	movs	r2, #0
 8002d32:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2200      	movs	r2, #0
 8002d38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d3a:	7afb      	ldrb	r3, [r7, #11]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6979      	ldr	r1, [r7, #20]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f003 ff19 	bl	8006b84 <USB_EPStartXfer>

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	f003 0207 	and.w	r2, r3, #7
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	440b      	add	r3, r1
 8002d7a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	460b      	mov	r3, r1
 8002d98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d9a:	7afb      	ldrb	r3, [r7, #11]
 8002d9c:	f003 0207 	and.w	r2, r3, #7
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	3310      	adds	r3, #16
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4413      	add	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd6:	7afb      	ldrb	r3, [r7, #11]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6979      	ldr	r1, [r7, #20]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f003 fecb 	bl	8006b84 <USB_EPStartXfer>

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	7912      	ldrb	r2, [r2, #4]
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e04c      	b.n	8002eb0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	da0e      	bge.n	8002e3c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e1e:	78fb      	ldrb	r3, [r7, #3]
 8002e20:	f003 0207 	and.w	r2, r3, #7
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	3310      	adds	r3, #16
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2201      	movs	r2, #1
 8002e38:	705a      	strb	r2, [r3, #1]
 8002e3a:	e00c      	b.n	8002e56 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_PCD_EP_SetStall+0x7e>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e01c      	b.n	8002eb0 <HAL_PCD_EP_SetStall+0xb8>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68f9      	ldr	r1, [r7, #12]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f005 fa2e 	bl	80082e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d108      	bne.n	8002ea6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	f005 fb53 	bl	800854c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	7912      	ldrb	r2, [r2, #4]
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e040      	b.n	8002f58 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ed6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	da0e      	bge.n	8002efc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	f003 0207 	and.w	r2, r3, #7
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	3310      	adds	r3, #16
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	705a      	strb	r2, [r3, #1]
 8002efa:	e00e      	b.n	8002f1a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	f003 0207 	and.w	r2, r3, #7
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_PCD_EP_ClrStall+0x82>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e00e      	b.n	8002f58 <HAL_PCD_EP_ClrStall+0xa0>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68f9      	ldr	r1, [r7, #12]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f005 fa1c 	bl	8008386 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b096      	sub	sp, #88	@ 0x58
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f68:	e3bb      	b.n	80036e2 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f72:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002f76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002f84:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f040 8175 	bne.w	8003278 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d14e      	bne.n	8003038 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002faa:	81fb      	strh	r3, [r7, #14]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	89fb      	ldrh	r3, [r7, #14]
 8002fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3310      	adds	r3, #16
 8002fc2:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3302      	adds	r3, #2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	441a      	add	r2, r3
 8002ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ffc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002ffe:	2100      	movs	r1, #0
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f007 f812 	bl	800a02a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	7b5b      	ldrb	r3, [r3, #13]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8368 	beq.w	80036e2 <PCD_EP_ISR_Handler+0x782>
 8003012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f040 8363 	bne.w	80036e2 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7b5b      	ldrb	r3, [r3, #13]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003026:	b2da      	uxtb	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	735a      	strb	r2, [r3, #13]
 8003036:	e354      	b.n	80036e2 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800303e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800304a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800304e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003052:	2b00      	cmp	r3, #0
 8003054:	d034      	beq.n	80030c0 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800305e:	b29b      	uxth	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	3306      	adds	r3, #6
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	4413      	add	r3, r2
 8003074:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800307e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003080:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800308c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800308e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003092:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003094:	b29b      	uxth	r3, r3
 8003096:	f005 faaa 	bl	80085ee <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80030a6:	4013      	ands	r3, r2
 80030a8:	823b      	strh	r3, [r7, #16]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	8a3a      	ldrh	r2, [r7, #16]
 80030b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80030b4:	b292      	uxth	r2, r2
 80030b6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f006 ff89 	bl	8009fd0 <HAL_PCD_SetupStageCallback>
 80030be:	e310      	b.n	80036e2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80030c0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f280 830c 	bge.w	80036e2 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80030d6:	4013      	ands	r3, r2
 80030d8:	83fb      	strh	r3, [r7, #30]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	8bfa      	ldrh	r2, [r7, #30]
 80030e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80030e4:	b292      	uxth	r2, r2
 80030e6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4413      	add	r3, r2
 80030fc:	3306      	adds	r3, #6
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	4413      	add	r3, r2
 8003106:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003112:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d019      	beq.n	8003150 <PCD_EP_ISR_Handler+0x1f0>
 800311c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d015      	beq.n	8003150 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800312a:	6959      	ldr	r1, [r3, #20]
 800312c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800312e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003132:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003134:	b29b      	uxth	r3, r3
 8003136:	f005 fa5a 	bl	80085ee <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800313a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	441a      	add	r2, r3
 8003144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003146:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003148:	2100      	movs	r1, #0
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f006 ff52 	bl	8009ff4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800315a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800315e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003162:	2b00      	cmp	r3, #0
 8003164:	f040 82bd 	bne.w	80036e2 <PCD_EP_ISR_Handler+0x782>
 8003168:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800316c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003170:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003174:	f000 82b5 	beq.w	80036e2 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003186:	b29b      	uxth	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	4413      	add	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	b29b      	uxth	r3, r3
 800319e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	801a      	strh	r2, [r3, #0]
 80031a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80031ae:	d91d      	bls.n	80031ec <PCD_EP_ISR_Handler+0x28c>
 80031b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80031b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d102      	bne.n	80031ca <PCD_EP_ISR_Handler+0x26a>
 80031c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031c6:	3b01      	subs	r3, #1
 80031c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	029b      	lsls	r3, r3, #10
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	4313      	orrs	r3, r2
 80031da:	b29b      	uxth	r3, r3
 80031dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	801a      	strh	r2, [r3, #0]
 80031ea:	e026      	b.n	800323a <PCD_EP_ISR_Handler+0x2da>
 80031ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10a      	bne.n	800320a <PCD_EP_ISR_Handler+0x2aa>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003202:	b29a      	uxth	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	801a      	strh	r2, [r3, #0]
 8003208:	e017      	b.n	800323a <PCD_EP_ISR_Handler+0x2da>
 800320a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	085b      	lsrs	r3, r3, #1
 8003210:	647b      	str	r3, [r7, #68]	@ 0x44
 8003212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <PCD_EP_ISR_Handler+0x2c4>
 800321e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003220:	3301      	adds	r3, #1
 8003222:	647b      	str	r3, [r7, #68]	@ 0x44
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29a      	uxth	r2, r3
 800322a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800322c:	b29b      	uxth	r3, r3
 800322e:	029b      	lsls	r3, r3, #10
 8003230:	b29b      	uxth	r3, r3
 8003232:	4313      	orrs	r3, r2
 8003234:	b29a      	uxth	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800324a:	827b      	strh	r3, [r7, #18]
 800324c:	8a7b      	ldrh	r3, [r7, #18]
 800324e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003252:	827b      	strh	r3, [r7, #18]
 8003254:	8a7b      	ldrh	r3, [r7, #18]
 8003256:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800325a:	827b      	strh	r3, [r7, #18]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	8a7b      	ldrh	r3, [r7, #18]
 8003262:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800326a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800326e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003272:	b29b      	uxth	r3, r3
 8003274:	8013      	strh	r3, [r2, #0]
 8003276:	e234      	b.n	80036e2 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800328c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003290:	2b00      	cmp	r3, #0
 8003292:	f280 80fc 	bge.w	800348e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80032ac:	4013      	ands	r3, r2
 80032ae:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80032c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032c8:	b292      	uxth	r2, r2
 80032ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80032cc:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	4413      	add	r3, r2
 80032e0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80032e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e4:	7b1b      	ldrb	r3, [r3, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d125      	bne.n	8003336 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4413      	add	r3, r2
 80032fe:	3306      	adds	r3, #6
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003312:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003316:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8092 	beq.w	8003444 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003326:	6959      	ldr	r1, [r3, #20]
 8003328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800332a:	88da      	ldrh	r2, [r3, #6]
 800332c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003330:	f005 f95d 	bl	80085ee <USB_ReadPMA>
 8003334:	e086      	b.n	8003444 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003338:	78db      	ldrb	r3, [r3, #3]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d10a      	bne.n	8003354 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800333e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003342:	461a      	mov	r2, r3
 8003344:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f9d9 	bl	80036fe <HAL_PCD_EP_DB_Receive>
 800334c:	4603      	mov	r3, r0
 800334e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003352:	e077      	b.n	8003444 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	b29b      	uxth	r3, r3
 8003366:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800336a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800336e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	441a      	add	r2, r3
 8003380:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003384:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003388:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800338c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003390:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003394:	b29b      	uxth	r3, r3
 8003396:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d024      	beq.n	80033fc <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	3302      	adds	r3, #2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033da:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80033de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d02e      	beq.n	8003444 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ec:	6959      	ldr	r1, [r3, #20]
 80033ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f0:	891a      	ldrh	r2, [r3, #8]
 80033f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80033f6:	f005 f8fa 	bl	80085ee <USB_ReadPMA>
 80033fa:	e023      	b.n	8003444 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003404:	b29b      	uxth	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	3306      	adds	r3, #6
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	4413      	add	r3, r2
 800341a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003424:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003428:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800342c:	2b00      	cmp	r3, #0
 800342e:	d009      	beq.n	8003444 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003436:	6959      	ldr	r1, [r3, #20]
 8003438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800343a:	895a      	ldrh	r2, [r3, #10]
 800343c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003440:	f005 f8d5 	bl	80085ee <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003446:	69da      	ldr	r2, [r3, #28]
 8003448:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800344c:	441a      	add	r2, r3
 800344e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003450:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003454:	695a      	ldr	r2, [r3, #20]
 8003456:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800345a:	441a      	add	r2, r3
 800345c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800345e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <PCD_EP_ISR_Handler+0x514>
 8003468:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800346c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	429a      	cmp	r2, r3
 8003472:	d206      	bcs.n	8003482 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	4619      	mov	r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f006 fdba 	bl	8009ff4 <HAL_PCD_DataOutStageCallback>
 8003480:	e005      	b.n	800348e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003488:	4618      	mov	r0, r3
 800348a:	f003 fb7b 	bl	8006b84 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800348e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 8123 	beq.w	80036e2 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800349c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	3310      	adds	r3, #16
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4413      	add	r3, r2
 80034ae:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80034c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	441a      	add	r2, r3
 80034dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80034e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80034ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ee:	78db      	ldrb	r3, [r3, #3]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	f040 80a2 	bne.w	800363a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80034f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f8:	2200      	movs	r2, #0
 80034fa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80034fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034fe:	7b1b      	ldrb	r3, [r3, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8093 	beq.w	800362c <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003506:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800350a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d046      	beq.n	80035a0 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003514:	785b      	ldrb	r3, [r3, #1]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d126      	bne.n	8003568 <PCD_EP_ISR_Handler+0x608>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003528:	b29b      	uxth	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352e:	4413      	add	r3, r2
 8003530:	627b      	str	r3, [r7, #36]	@ 0x24
 8003532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	011a      	lsls	r2, r3, #4
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	4413      	add	r3, r2
 800353c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003540:	623b      	str	r3, [r7, #32]
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	b29b      	uxth	r3, r3
 8003548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800354c:	b29a      	uxth	r2, r3
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	801a      	strh	r2, [r3, #0]
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	b29b      	uxth	r3, r3
 8003558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800355c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003560:	b29a      	uxth	r2, r3
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	801a      	strh	r2, [r3, #0]
 8003566:	e061      	b.n	800362c <PCD_EP_ISR_Handler+0x6cc>
 8003568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356a:	785b      	ldrb	r3, [r3, #1]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d15d      	bne.n	800362c <PCD_EP_ISR_Handler+0x6cc>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800357e:	b29b      	uxth	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003584:	4413      	add	r3, r2
 8003586:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	011a      	lsls	r2, r3, #4
 800358e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003590:	4413      	add	r3, r2
 8003592:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003596:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359a:	2200      	movs	r2, #0
 800359c:	801a      	strh	r2, [r3, #0]
 800359e:	e045      	b.n	800362c <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a8:	785b      	ldrb	r3, [r3, #1]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d126      	bne.n	80035fc <PCD_EP_ISR_Handler+0x69c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035bc:	b29b      	uxth	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c2:	4413      	add	r3, r2
 80035c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80035c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	011a      	lsls	r2, r3, #4
 80035cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ce:	4413      	add	r3, r2
 80035d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80035d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e4:	801a      	strh	r2, [r3, #0]
 80035e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f8:	801a      	strh	r2, [r3, #0]
 80035fa:	e017      	b.n	800362c <PCD_EP_ISR_Handler+0x6cc>
 80035fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fe:	785b      	ldrb	r3, [r3, #1]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d113      	bne.n	800362c <PCD_EP_ISR_Handler+0x6cc>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800360c:	b29b      	uxth	r3, r3
 800360e:	461a      	mov	r2, r3
 8003610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003612:	4413      	add	r3, r2
 8003614:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	011a      	lsls	r2, r3, #4
 800361c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800361e:	4413      	add	r3, r2
 8003620:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003624:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003628:	2200      	movs	r2, #0
 800362a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800362c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	4619      	mov	r1, r3
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f006 fcf9 	bl	800a02a <HAL_PCD_DataInStageCallback>
 8003638:	e053      	b.n	80036e2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800363a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800363e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d146      	bne.n	80036d4 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800364e:	b29b      	uxth	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	3302      	adds	r3, #2
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800366e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800367a:	429a      	cmp	r2, r3
 800367c:	d907      	bls.n	800368e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800367e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003686:	1ad2      	subs	r2, r2, r3
 8003688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800368a:	619a      	str	r2, [r3, #24]
 800368c:	e002      	b.n	8003694 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800368e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003690:	2200      	movs	r2, #0
 8003692:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d106      	bne.n	80036aa <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800369c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	4619      	mov	r1, r3
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f006 fcc1 	bl	800a02a <HAL_PCD_DataInStageCallback>
 80036a8:	e01b      	b.n	80036e2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80036aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80036b2:	441a      	add	r2, r3
 80036b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036b6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80036b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ba:	69da      	ldr	r2, [r3, #28]
 80036bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80036c0:	441a      	add	r2, r3
 80036c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036cc:	4618      	mov	r0, r3
 80036ce:	f003 fa59 	bl	8006b84 <USB_EPStartXfer>
 80036d2:	e006      	b.n	80036e2 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80036d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80036d8:	461a      	mov	r2, r3
 80036da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f91b 	bl	8003918 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	b21b      	sxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f6ff ac3b 	blt.w	8002f6a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3758      	adds	r7, #88	@ 0x58
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b088      	sub	sp, #32
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	4613      	mov	r3, r2
 800370a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d07e      	beq.n	8003814 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800371e:	b29b      	uxth	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	3302      	adds	r3, #2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800373e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	699a      	ldr	r2, [r3, #24]
 8003744:	8b7b      	ldrh	r3, [r7, #26]
 8003746:	429a      	cmp	r2, r3
 8003748:	d306      	bcc.n	8003758 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	8b7b      	ldrh	r3, [r7, #26]
 8003750:	1ad2      	subs	r2, r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	619a      	str	r2, [r3, #24]
 8003756:	e002      	b.n	800375e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2200      	movs	r2, #0
 800375c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d123      	bne.n	80037ae <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	b29b      	uxth	r3, r3
 8003778:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800377c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003780:	833b      	strh	r3, [r7, #24]
 8003782:	8b3b      	ldrh	r3, [r7, #24]
 8003784:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003788:	833b      	strh	r3, [r7, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	441a      	add	r2, r3
 8003798:	8b3b      	ldrh	r3, [r7, #24]
 800379a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800379e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01f      	beq.n	80037f8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037d2:	82fb      	strh	r3, [r7, #22]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	441a      	add	r2, r3
 80037e2:	8afb      	ldrh	r3, [r7, #22]
 80037e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80037f8:	8b7b      	ldrh	r3, [r7, #26]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8087 	beq.w	800390e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	6959      	ldr	r1, [r3, #20]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	891a      	ldrh	r2, [r3, #8]
 800380c:	8b7b      	ldrh	r3, [r7, #26]
 800380e:	f004 feee 	bl	80085ee <USB_ReadPMA>
 8003812:	e07c      	b.n	800390e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800381c:	b29b      	uxth	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	3306      	adds	r3, #6
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800383c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	8b7b      	ldrh	r3, [r7, #26]
 8003844:	429a      	cmp	r2, r3
 8003846:	d306      	bcc.n	8003856 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	8b7b      	ldrh	r3, [r7, #26]
 800384e:	1ad2      	subs	r2, r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	619a      	str	r2, [r3, #24]
 8003854:	e002      	b.n	800385c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2200      	movs	r2, #0
 800385a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d123      	bne.n	80038ac <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	b29b      	uxth	r3, r3
 8003876:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800387a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800387e:	83fb      	strh	r3, [r7, #30]
 8003880:	8bfb      	ldrh	r3, [r7, #30]
 8003882:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003886:	83fb      	strh	r3, [r7, #30]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	8bfb      	ldrh	r3, [r7, #30]
 8003898:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800389c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d11f      	bne.n	80038f6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d0:	83bb      	strh	r3, [r7, #28]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	441a      	add	r2, r3
 80038e0:	8bbb      	ldrh	r3, [r7, #28]
 80038e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038f6:	8b7b      	ldrh	r3, [r7, #26]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	6959      	ldr	r1, [r3, #20]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	895a      	ldrh	r2, [r3, #10]
 8003908:	8b7b      	ldrh	r3, [r7, #26]
 800390a:	f004 fe70 	bl	80085ee <USB_ReadPMA>
    }
  }

  return count;
 800390e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3720      	adds	r7, #32
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b0a4      	sub	sp, #144	@ 0x90
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	4613      	mov	r3, r2
 8003924:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 81dd 	beq.w	8003cec <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800393a:	b29b      	uxth	r3, r3
 800393c:	461a      	mov	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4413      	add	r3, r2
 8003946:	3302      	adds	r3, #2
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800395a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	699a      	ldr	r2, [r3, #24]
 8003962:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003966:	429a      	cmp	r2, r3
 8003968:	d907      	bls.n	800397a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003972:	1ad2      	subs	r2, r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	619a      	str	r2, [r3, #24]
 8003978:	e002      	b.n	8003980 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2200      	movs	r2, #0
 800397e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	f040 80b9 	bne.w	8003afc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	785b      	ldrb	r3, [r3, #1]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d126      	bne.n	80039e0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a6:	4413      	add	r3, r2
 80039a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	011a      	lsls	r2, r3, #4
 80039b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b2:	4413      	add	r3, r2
 80039b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80039b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c8:	801a      	strh	r2, [r3, #0]
 80039ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039d8:	b29a      	uxth	r2, r3
 80039da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039dc:	801a      	strh	r2, [r3, #0]
 80039de:	e01a      	b.n	8003a16 <HAL_PCD_EP_DB_Transmit+0xfe>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	785b      	ldrb	r3, [r3, #1]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d116      	bne.n	8003a16 <HAL_PCD_EP_DB_Transmit+0xfe>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039fc:	4413      	add	r3, r2
 80039fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	011a      	lsls	r2, r3, #4
 8003a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a08:	4413      	add	r3, r2
 8003a0a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a12:	2200      	movs	r2, #0
 8003a14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	785b      	ldrb	r3, [r3, #1]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d126      	bne.n	8003a72 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	461a      	mov	r2, r3
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	61fb      	str	r3, [r7, #28]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	011a      	lsls	r2, r3, #4
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	4413      	add	r3, r2
 8003a46:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	801a      	strh	r2, [r3, #0]
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	801a      	strh	r2, [r3, #0]
 8003a70:	e017      	b.n	8003aa2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	785b      	ldrb	r3, [r3, #1]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d113      	bne.n	8003aa2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	4413      	add	r3, r2
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	011a      	lsls	r2, r3, #4
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	4413      	add	r3, r2
 8003a96:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a9a:	623b      	str	r3, [r7, #32]
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f006 fabe 	bl	800a02a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 82fc 	beq.w	80040b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	881b      	ldrh	r3, [r3, #0]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad4:	82fb      	strh	r3, [r7, #22]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	441a      	add	r2, r3
 8003ae4:	8afb      	ldrh	r3, [r7, #22]
 8003ae6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	8013      	strh	r3, [r2, #0]
 8003afa:	e2da      	b.n	80040b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d021      	beq.n	8003b4a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b20:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	441a      	add	r2, r3
 8003b32:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003b36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	f040 82ae 	bne.w	80040b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b5e:	441a      	add	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b6c:	441a      	add	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	6a1a      	ldr	r2, [r3, #32]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d30b      	bcc.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	6a1a      	ldr	r2, [r3, #32]
 8003b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b8e:	1ad2      	subs	r2, r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	621a      	str	r2, [r3, #32]
 8003b94:	e017      	b.n	8003bc6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d108      	bne.n	8003bb0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003b9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ba2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003bae:	e00a      	b.n	8003bc6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	785b      	ldrb	r3, [r3, #1]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d165      	bne.n	8003c9a <HAL_PCD_EP_DB_Transmit+0x382>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be2:	4413      	add	r3, r2
 8003be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	011a      	lsls	r2, r3, #4
 8003bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bee:	4413      	add	r3, r2
 8003bf0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c04:	801a      	strh	r2, [r3, #0]
 8003c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c0c:	d91d      	bls.n	8003c4a <HAL_PCD_EP_DB_Transmit+0x332>
 8003c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d102      	bne.n	8003c28 <HAL_PCD_EP_DB_Transmit+0x310>
 8003c22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c24:	3b01      	subs	r3, #1
 8003c26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	029b      	lsls	r3, r3, #10
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	4313      	orrs	r3, r2
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c46:	801a      	strh	r2, [r3, #0]
 8003c48:	e044      	b.n	8003cd4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <HAL_PCD_EP_DB_Transmit+0x350>
 8003c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c64:	801a      	strh	r2, [r3, #0]
 8003c66:	e035      	b.n	8003cd4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003c7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c7e:	3301      	adds	r3, #1
 8003c80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	029b      	lsls	r3, r3, #10
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	4313      	orrs	r3, r2
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c96:	801a      	strh	r2, [r3, #0]
 8003c98:	e01c      	b.n	8003cd4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	785b      	ldrb	r3, [r3, #1]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d118      	bne.n	8003cd4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cb6:	4413      	add	r3, r2
 8003cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	011a      	lsls	r2, r3, #4
 8003cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003cc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	6959      	ldr	r1, [r3, #20]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	891a      	ldrh	r2, [r3, #8]
 8003ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	f004 fc3c 	bl	8008562 <USB_WritePMA>
 8003cea:	e1e2      	b.n	80040b2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4413      	add	r3, r2
 8003d00:	3306      	adds	r3, #6
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d14:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	699a      	ldr	r2, [r3, #24]
 8003d1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d307      	bcc.n	8003d34 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	699a      	ldr	r2, [r3, #24]
 8003d28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003d2c:	1ad2      	subs	r2, r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	619a      	str	r2, [r3, #24]
 8003d32:	e002      	b.n	8003d3a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2200      	movs	r2, #0
 8003d38:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f040 80c0 	bne.w	8003ec4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	785b      	ldrb	r3, [r3, #1]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d126      	bne.n	8003d9a <HAL_PCD_EP_DB_Transmit+0x482>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d60:	4413      	add	r3, r2
 8003d62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	011a      	lsls	r2, r3, #4
 8003d6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d82:	801a      	strh	r2, [r3, #0]
 8003d84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d96:	801a      	strh	r2, [r3, #0]
 8003d98:	e01a      	b.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	785b      	ldrb	r3, [r3, #1]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d116      	bne.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003db6:	4413      	add	r3, r2
 8003db8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	011a      	lsls	r2, r3, #4
 8003dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003dc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dcc:	2200      	movs	r2, #0
 8003dce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	677b      	str	r3, [r7, #116]	@ 0x74
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	785b      	ldrb	r3, [r3, #1]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d12b      	bne.n	8003e36 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003df2:	4413      	add	r3, r2
 8003df4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	011a      	lsls	r2, r3, #4
 8003dfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dfe:	4413      	add	r3, r2
 8003e00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e1a:	801a      	strh	r2, [r3, #0]
 8003e1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e32:	801a      	strh	r2, [r3, #0]
 8003e34:	e017      	b.n	8003e66 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d113      	bne.n	8003e66 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e4c:	4413      	add	r3, r2
 8003e4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	011a      	lsls	r2, r3, #4
 8003e56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e58:	4413      	add	r3, r2
 8003e5a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e62:	2200      	movs	r2, #0
 8003e64:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f006 f8dc 	bl	800a02a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e72:	88fb      	ldrh	r3, [r7, #6]
 8003e74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f040 811a 	bne.w	80040b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e98:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	441a      	add	r2, r3
 8003eaa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003eae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003eb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003eb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	8013      	strh	r3, [r2, #0]
 8003ec2:	e0f6      	b.n	80040b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d121      	bne.n	8003f12 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ee4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	441a      	add	r2, r3
 8003efa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003efe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	f040 80ca 	bne.w	80040b2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	695a      	ldr	r2, [r3, #20]
 8003f22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f26:	441a      	add	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	69da      	ldr	r2, [r3, #28]
 8003f30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f34:	441a      	add	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	6a1a      	ldr	r2, [r3, #32]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d30b      	bcc.n	8003f5e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	6a1a      	ldr	r2, [r3, #32]
 8003f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f56:	1ad2      	subs	r2, r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	621a      	str	r2, [r3, #32]
 8003f5c:	e017      	b.n	8003f8e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d108      	bne.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003f66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003f76:	e00a      	b.n	8003f8e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2200      	movs	r2, #0
 8003f84:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	785b      	ldrb	r3, [r3, #1]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d165      	bne.n	8004068 <HAL_PCD_EP_DB_Transmit+0x750>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fb0:	4413      	add	r3, r2
 8003fb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	011a      	lsls	r2, r3, #4
 8003fba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003fc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fd2:	801a      	strh	r2, [r3, #0]
 8003fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8003fda:	d91d      	bls.n	8004018 <HAL_PCD_EP_DB_Transmit+0x700>
 8003fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d102      	bne.n	8003ff6 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003ff0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ff6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	029b      	lsls	r3, r3, #10
 8004002:	b29b      	uxth	r3, r3
 8004004:	4313      	orrs	r3, r2
 8004006:	b29b      	uxth	r3, r3
 8004008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800400c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004010:	b29a      	uxth	r2, r3
 8004012:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004014:	801a      	strh	r2, [r3, #0]
 8004016:	e041      	b.n	800409c <HAL_PCD_EP_DB_Transmit+0x784>
 8004018:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004020:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	b29b      	uxth	r3, r3
 8004026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800402a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800402e:	b29a      	uxth	r2, r3
 8004030:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004032:	801a      	strh	r2, [r3, #0]
 8004034:	e032      	b.n	800409c <HAL_PCD_EP_DB_Transmit+0x784>
 8004036:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800403e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_PCD_EP_DB_Transmit+0x738>
 800404a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800404c:	3301      	adds	r3, #1
 800404e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004050:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	b29a      	uxth	r2, r3
 8004056:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004058:	b29b      	uxth	r3, r3
 800405a:	029b      	lsls	r3, r3, #10
 800405c:	b29b      	uxth	r3, r3
 800405e:	4313      	orrs	r3, r2
 8004060:	b29a      	uxth	r2, r3
 8004062:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004064:	801a      	strh	r2, [r3, #0]
 8004066:	e019      	b.n	800409c <HAL_PCD_EP_DB_Transmit+0x784>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	785b      	ldrb	r3, [r3, #1]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d115      	bne.n	800409c <HAL_PCD_EP_DB_Transmit+0x784>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004078:	b29b      	uxth	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800407e:	4413      	add	r3, r2
 8004080:	657b      	str	r3, [r7, #84]	@ 0x54
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	011a      	lsls	r2, r3, #4
 8004088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800408a:	4413      	add	r3, r2
 800408c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004090:	653b      	str	r3, [r7, #80]	@ 0x50
 8004092:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004096:	b29a      	uxth	r2, r3
 8004098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800409a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	6959      	ldr	r1, [r3, #20]
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	895a      	ldrh	r2, [r3, #10]
 80040a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	f004 fa58 	bl	8008562 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040cc:	82bb      	strh	r3, [r7, #20]
 80040ce:	8abb      	ldrh	r3, [r7, #20]
 80040d0:	f083 0310 	eor.w	r3, r3, #16
 80040d4:	82bb      	strh	r3, [r7, #20]
 80040d6:	8abb      	ldrh	r3, [r7, #20]
 80040d8:	f083 0320 	eor.w	r3, r3, #32
 80040dc:	82bb      	strh	r3, [r7, #20]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	441a      	add	r2, r3
 80040ec:	8abb      	ldrh	r3, [r7, #20]
 80040ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040fe:	b29b      	uxth	r3, r3
 8004100:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3790      	adds	r7, #144	@ 0x90
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	607b      	str	r3, [r7, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	817b      	strh	r3, [r7, #10]
 800411a:	4613      	mov	r3, r2
 800411c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800411e:	897b      	ldrh	r3, [r7, #10]
 8004120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00b      	beq.n	8004142 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800412a:	897b      	ldrh	r3, [r7, #10]
 800412c:	f003 0207 	and.w	r2, r3, #7
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	3310      	adds	r3, #16
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4413      	add	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	e009      	b.n	8004156 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004142:	897a      	ldrh	r2, [r7, #10]
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004156:	893b      	ldrh	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d107      	bne.n	800416c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2200      	movs	r2, #0
 8004160:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	b29a      	uxth	r2, r3
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	80da      	strh	r2, [r3, #6]
 800416a:	e00b      	b.n	8004184 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2201      	movs	r2, #1
 8004170:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	b29a      	uxth	r2, r3
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	0c1b      	lsrs	r3, r3, #16
 800417e:	b29a      	uxth	r2, r3
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004194:	4b03      	ldr	r3, [pc, #12]	@ (80041a4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004196:	2201      	movs	r2, #1
 8004198:	601a      	str	r2, [r3, #0]
}
 800419a:	bf00      	nop
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	420e0020 	.word	0x420e0020

080041a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e272      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8087 	beq.w	80042d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041c8:	4b92      	ldr	r3, [pc, #584]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d00c      	beq.n	80041ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041d4:	4b8f      	ldr	r3, [pc, #572]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 030c 	and.w	r3, r3, #12
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d112      	bne.n	8004206 <HAL_RCC_OscConfig+0x5e>
 80041e0:	4b8c      	ldr	r3, [pc, #560]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ec:	d10b      	bne.n	8004206 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ee:	4b89      	ldr	r3, [pc, #548]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d06c      	beq.n	80042d4 <HAL_RCC_OscConfig+0x12c>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d168      	bne.n	80042d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e24c      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800420e:	d106      	bne.n	800421e <HAL_RCC_OscConfig+0x76>
 8004210:	4b80      	ldr	r3, [pc, #512]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a7f      	ldr	r2, [pc, #508]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004216:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	e02e      	b.n	800427c <HAL_RCC_OscConfig+0xd4>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0x98>
 8004226:	4b7b      	ldr	r3, [pc, #492]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a7a      	ldr	r2, [pc, #488]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 800422c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	4b78      	ldr	r3, [pc, #480]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a77      	ldr	r2, [pc, #476]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004238:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e01d      	b.n	800427c <HAL_RCC_OscConfig+0xd4>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0xbc>
 800424a:	4b72      	ldr	r3, [pc, #456]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a71      	ldr	r2, [pc, #452]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b6f      	ldr	r3, [pc, #444]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a6e      	ldr	r2, [pc, #440]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0xd4>
 8004264:	4b6b      	ldr	r3, [pc, #428]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a6a      	ldr	r2, [pc, #424]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 800426a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	4b68      	ldr	r3, [pc, #416]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a67      	ldr	r2, [pc, #412]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800427a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d013      	beq.n	80042ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004284:	f7fd fae2 	bl	800184c <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800428c:	f7fd fade 	bl	800184c <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	@ 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e200      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	4b5d      	ldr	r3, [pc, #372]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0xe4>
 80042aa:	e014      	b.n	80042d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ac:	f7fd face 	bl	800184c <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b4:	f7fd faca 	bl	800184c <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	@ 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e1ec      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c6:	4b53      	ldr	r3, [pc, #332]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x10c>
 80042d2:	e000      	b.n	80042d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d063      	beq.n	80043aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00b      	beq.n	8004306 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042ee:	4b49      	ldr	r3, [pc, #292]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d11c      	bne.n	8004334 <HAL_RCC_OscConfig+0x18c>
 80042fa:	4b46      	ldr	r3, [pc, #280]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d116      	bne.n	8004334 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	4b43      	ldr	r3, [pc, #268]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_RCC_OscConfig+0x176>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d001      	beq.n	800431e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e1c0      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431e:	4b3d      	ldr	r3, [pc, #244]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4939      	ldr	r1, [pc, #228]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 800432e:	4313      	orrs	r3, r2
 8004330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004332:	e03a      	b.n	80043aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d020      	beq.n	800437e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800433c:	4b36      	ldr	r3, [pc, #216]	@ (8004418 <HAL_RCC_OscConfig+0x270>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004342:	f7fd fa83 	bl	800184c <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800434a:	f7fd fa7f 	bl	800184c <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e1a1      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435c:	4b2d      	ldr	r3, [pc, #180]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004368:	4b2a      	ldr	r3, [pc, #168]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4927      	ldr	r1, [pc, #156]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 8004378:	4313      	orrs	r3, r2
 800437a:	600b      	str	r3, [r1, #0]
 800437c:	e015      	b.n	80043aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800437e:	4b26      	ldr	r3, [pc, #152]	@ (8004418 <HAL_RCC_OscConfig+0x270>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7fd fa62 	bl	800184c <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438c:	f7fd fa5e 	bl	800184c <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e180      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439e:	4b1d      	ldr	r3, [pc, #116]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d03a      	beq.n	800442c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d019      	beq.n	80043f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043be:	4b17      	ldr	r3, [pc, #92]	@ (800441c <HAL_RCC_OscConfig+0x274>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c4:	f7fd fa42 	bl	800184c <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043cc:	f7fd fa3e 	bl	800184c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e160      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043de:	4b0d      	ldr	r3, [pc, #52]	@ (8004414 <HAL_RCC_OscConfig+0x26c>)
 80043e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043ea:	2001      	movs	r0, #1
 80043ec:	f000 face 	bl	800498c <RCC_Delay>
 80043f0:	e01c      	b.n	800442c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f2:	4b0a      	ldr	r3, [pc, #40]	@ (800441c <HAL_RCC_OscConfig+0x274>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f8:	f7fd fa28 	bl	800184c <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043fe:	e00f      	b.n	8004420 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004400:	f7fd fa24 	bl	800184c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d908      	bls.n	8004420 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e146      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	42420000 	.word	0x42420000
 800441c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004420:	4b92      	ldr	r3, [pc, #584]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e9      	bne.n	8004400 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80a6 	beq.w	8004586 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800443a:	2300      	movs	r3, #0
 800443c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800443e:	4b8b      	ldr	r3, [pc, #556]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10d      	bne.n	8004466 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800444a:	4b88      	ldr	r3, [pc, #544]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	4a87      	ldr	r2, [pc, #540]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004454:	61d3      	str	r3, [r2, #28]
 8004456:	4b85      	ldr	r3, [pc, #532]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800445e:	60bb      	str	r3, [r7, #8]
 8004460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004462:	2301      	movs	r3, #1
 8004464:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004466:	4b82      	ldr	r3, [pc, #520]	@ (8004670 <HAL_RCC_OscConfig+0x4c8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446e:	2b00      	cmp	r3, #0
 8004470:	d118      	bne.n	80044a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004472:	4b7f      	ldr	r3, [pc, #508]	@ (8004670 <HAL_RCC_OscConfig+0x4c8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a7e      	ldr	r2, [pc, #504]	@ (8004670 <HAL_RCC_OscConfig+0x4c8>)
 8004478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800447c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447e:	f7fd f9e5 	bl	800184c <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004486:	f7fd f9e1 	bl	800184c <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b64      	cmp	r3, #100	@ 0x64
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e103      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004498:	4b75      	ldr	r3, [pc, #468]	@ (8004670 <HAL_RCC_OscConfig+0x4c8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d106      	bne.n	80044ba <HAL_RCC_OscConfig+0x312>
 80044ac:	4b6f      	ldr	r3, [pc, #444]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	4a6e      	ldr	r2, [pc, #440]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	6213      	str	r3, [r2, #32]
 80044b8:	e02d      	b.n	8004516 <HAL_RCC_OscConfig+0x36e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10c      	bne.n	80044dc <HAL_RCC_OscConfig+0x334>
 80044c2:	4b6a      	ldr	r3, [pc, #424]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	4a69      	ldr	r2, [pc, #420]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	6213      	str	r3, [r2, #32]
 80044ce:	4b67      	ldr	r3, [pc, #412]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	4a66      	ldr	r2, [pc, #408]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	f023 0304 	bic.w	r3, r3, #4
 80044d8:	6213      	str	r3, [r2, #32]
 80044da:	e01c      	b.n	8004516 <HAL_RCC_OscConfig+0x36e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b05      	cmp	r3, #5
 80044e2:	d10c      	bne.n	80044fe <HAL_RCC_OscConfig+0x356>
 80044e4:	4b61      	ldr	r3, [pc, #388]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	4a60      	ldr	r2, [pc, #384]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	f043 0304 	orr.w	r3, r3, #4
 80044ee:	6213      	str	r3, [r2, #32]
 80044f0:	4b5e      	ldr	r3, [pc, #376]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	4a5d      	ldr	r2, [pc, #372]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	6213      	str	r3, [r2, #32]
 80044fc:	e00b      	b.n	8004516 <HAL_RCC_OscConfig+0x36e>
 80044fe:	4b5b      	ldr	r3, [pc, #364]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	4a5a      	ldr	r2, [pc, #360]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	6213      	str	r3, [r2, #32]
 800450a:	4b58      	ldr	r3, [pc, #352]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	4a57      	ldr	r2, [pc, #348]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004510:	f023 0304 	bic.w	r3, r3, #4
 8004514:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d015      	beq.n	800454a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451e:	f7fd f995 	bl	800184c <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004524:	e00a      	b.n	800453c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004526:	f7fd f991 	bl	800184c <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004534:	4293      	cmp	r3, r2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e0b1      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453c:	4b4b      	ldr	r3, [pc, #300]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0ee      	beq.n	8004526 <HAL_RCC_OscConfig+0x37e>
 8004548:	e014      	b.n	8004574 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800454a:	f7fd f97f 	bl	800184c <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004550:	e00a      	b.n	8004568 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004552:	f7fd f97b 	bl	800184c <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004560:	4293      	cmp	r3, r2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e09b      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004568:	4b40      	ldr	r3, [pc, #256]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1ee      	bne.n	8004552 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004574:	7dfb      	ldrb	r3, [r7, #23]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d105      	bne.n	8004586 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800457a:	4b3c      	ldr	r3, [pc, #240]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	4a3b      	ldr	r2, [pc, #236]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004580:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004584:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 8087 	beq.w	800469e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004590:	4b36      	ldr	r3, [pc, #216]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	2b08      	cmp	r3, #8
 800459a:	d061      	beq.n	8004660 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d146      	bne.n	8004632 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a4:	4b33      	ldr	r3, [pc, #204]	@ (8004674 <HAL_RCC_OscConfig+0x4cc>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045aa:	f7fd f94f 	bl	800184c <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b2:	f7fd f94b 	bl	800184c <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e06d      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045c4:	4b29      	ldr	r3, [pc, #164]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d8:	d108      	bne.n	80045ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045da:	4b24      	ldr	r3, [pc, #144]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	4921      	ldr	r1, [pc, #132]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ec:	4b1f      	ldr	r3, [pc, #124]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a19      	ldr	r1, [r3, #32]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fc:	430b      	orrs	r3, r1
 80045fe:	491b      	ldr	r1, [pc, #108]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004604:	4b1b      	ldr	r3, [pc, #108]	@ (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004606:	2201      	movs	r2, #1
 8004608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460a:	f7fd f91f 	bl	800184c <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004612:	f7fd f91b 	bl	800184c <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e03d      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004624:	4b11      	ldr	r3, [pc, #68]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f0      	beq.n	8004612 <HAL_RCC_OscConfig+0x46a>
 8004630:	e035      	b.n	800469e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004632:	4b10      	ldr	r3, [pc, #64]	@ (8004674 <HAL_RCC_OscConfig+0x4cc>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004638:	f7fd f908 	bl	800184c <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004640:	f7fd f904 	bl	800184c <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e026      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004652:	4b06      	ldr	r3, [pc, #24]	@ (800466c <HAL_RCC_OscConfig+0x4c4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x498>
 800465e:	e01e      	b.n	800469e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d107      	bne.n	8004678 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e019      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
 800466c:	40021000 	.word	0x40021000
 8004670:	40007000 	.word	0x40007000
 8004674:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004678:	4b0b      	ldr	r3, [pc, #44]	@ (80046a8 <HAL_RCC_OscConfig+0x500>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	429a      	cmp	r2, r3
 800468a:	d106      	bne.n	800469a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004696:	429a      	cmp	r2, r3
 8004698:	d001      	beq.n	800469e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40021000 	.word	0x40021000

080046ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0d0      	b.n	8004862 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046c0:	4b6a      	ldr	r3, [pc, #424]	@ (800486c <HAL_RCC_ClockConfig+0x1c0>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d910      	bls.n	80046f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ce:	4b67      	ldr	r3, [pc, #412]	@ (800486c <HAL_RCC_ClockConfig+0x1c0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 0207 	bic.w	r2, r3, #7
 80046d6:	4965      	ldr	r1, [pc, #404]	@ (800486c <HAL_RCC_ClockConfig+0x1c0>)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	4313      	orrs	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046de:	4b63      	ldr	r3, [pc, #396]	@ (800486c <HAL_RCC_ClockConfig+0x1c0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0b8      	b.n	8004862 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d020      	beq.n	800473e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004708:	4b59      	ldr	r3, [pc, #356]	@ (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4a58      	ldr	r2, [pc, #352]	@ (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800470e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004712:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004720:	4b53      	ldr	r3, [pc, #332]	@ (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4a52      	ldr	r2, [pc, #328]	@ (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 8004726:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800472a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800472c:	4b50      	ldr	r3, [pc, #320]	@ (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	494d      	ldr	r1, [pc, #308]	@ (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800473a:	4313      	orrs	r3, r2
 800473c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d040      	beq.n	80047cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d107      	bne.n	8004762 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004752:	4b47      	ldr	r3, [pc, #284]	@ (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d115      	bne.n	800478a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e07f      	b.n	8004862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d107      	bne.n	800477a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476a:	4b41      	ldr	r3, [pc, #260]	@ (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d109      	bne.n	800478a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e073      	b.n	8004862 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477a:	4b3d      	ldr	r3, [pc, #244]	@ (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e06b      	b.n	8004862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800478a:	4b39      	ldr	r3, [pc, #228]	@ (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f023 0203 	bic.w	r2, r3, #3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	4936      	ldr	r1, [pc, #216]	@ (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 8004798:	4313      	orrs	r3, r2
 800479a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800479c:	f7fd f856 	bl	800184c <HAL_GetTick>
 80047a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a2:	e00a      	b.n	80047ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a4:	f7fd f852 	bl	800184c <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e053      	b.n	8004862 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 020c 	and.w	r2, r3, #12
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d1eb      	bne.n	80047a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047cc:	4b27      	ldr	r3, [pc, #156]	@ (800486c <HAL_RCC_ClockConfig+0x1c0>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d210      	bcs.n	80047fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047da:	4b24      	ldr	r3, [pc, #144]	@ (800486c <HAL_RCC_ClockConfig+0x1c0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f023 0207 	bic.w	r2, r3, #7
 80047e2:	4922      	ldr	r1, [pc, #136]	@ (800486c <HAL_RCC_ClockConfig+0x1c0>)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ea:	4b20      	ldr	r3, [pc, #128]	@ (800486c <HAL_RCC_ClockConfig+0x1c0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e032      	b.n	8004862 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004808:	4b19      	ldr	r3, [pc, #100]	@ (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4916      	ldr	r1, [pc, #88]	@ (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	4313      	orrs	r3, r2
 8004818:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d009      	beq.n	800483a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004826:	4b12      	ldr	r3, [pc, #72]	@ (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	490e      	ldr	r1, [pc, #56]	@ (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 8004836:	4313      	orrs	r3, r2
 8004838:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800483a:	f000 f821 	bl	8004880 <HAL_RCC_GetSysClockFreq>
 800483e:	4602      	mov	r2, r0
 8004840:	4b0b      	ldr	r3, [pc, #44]	@ (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	490a      	ldr	r1, [pc, #40]	@ (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 800484c:	5ccb      	ldrb	r3, [r1, r3]
 800484e:	fa22 f303 	lsr.w	r3, r2, r3
 8004852:	4a09      	ldr	r2, [pc, #36]	@ (8004878 <HAL_RCC_ClockConfig+0x1cc>)
 8004854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004856:	4b09      	ldr	r3, [pc, #36]	@ (800487c <HAL_RCC_ClockConfig+0x1d0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f7fc ffb4 	bl	80017c8 <HAL_InitTick>

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40022000 	.word	0x40022000
 8004870:	40021000 	.word	0x40021000
 8004874:	0800a7f8 	.word	0x0800a7f8
 8004878:	20000000 	.word	0x20000000
 800487c:	20000004 	.word	0x20000004

08004880 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	2300      	movs	r3, #0
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	2300      	movs	r3, #0
 8004894:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800489a:	4b1e      	ldr	r3, [pc, #120]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x94>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d002      	beq.n	80048b0 <HAL_RCC_GetSysClockFreq+0x30>
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d003      	beq.n	80048b6 <HAL_RCC_GetSysClockFreq+0x36>
 80048ae:	e027      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048b0:	4b19      	ldr	r3, [pc, #100]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x98>)
 80048b2:	613b      	str	r3, [r7, #16]
      break;
 80048b4:	e027      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	0c9b      	lsrs	r3, r3, #18
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	4a17      	ldr	r2, [pc, #92]	@ (800491c <HAL_RCC_GetSysClockFreq+0x9c>)
 80048c0:	5cd3      	ldrb	r3, [r2, r3]
 80048c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d010      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048ce:	4b11      	ldr	r3, [pc, #68]	@ (8004914 <HAL_RCC_GetSysClockFreq+0x94>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	0c5b      	lsrs	r3, r3, #17
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	4a11      	ldr	r2, [pc, #68]	@ (8004920 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048da:	5cd3      	ldrb	r3, [r2, r3]
 80048dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x98>)
 80048e2:	fb03 f202 	mul.w	r2, r3, r2
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	e004      	b.n	80048fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004924 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048f4:	fb02 f303 	mul.w	r3, r2, r3
 80048f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	613b      	str	r3, [r7, #16]
      break;
 80048fe:	e002      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004900:	4b05      	ldr	r3, [pc, #20]	@ (8004918 <HAL_RCC_GetSysClockFreq+0x98>)
 8004902:	613b      	str	r3, [r7, #16]
      break;
 8004904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004906:	693b      	ldr	r3, [r7, #16]
}
 8004908:	4618      	mov	r0, r3
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000
 8004918:	007a1200 	.word	0x007a1200
 800491c:	0800a810 	.word	0x0800a810
 8004920:	0800a820 	.word	0x0800a820
 8004924:	003d0900 	.word	0x003d0900

08004928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800492c:	4b02      	ldr	r3, [pc, #8]	@ (8004938 <HAL_RCC_GetHCLKFreq+0x10>)
 800492e:	681b      	ldr	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	20000000 	.word	0x20000000

0800493c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004940:	f7ff fff2 	bl	8004928 <HAL_RCC_GetHCLKFreq>
 8004944:	4602      	mov	r2, r0
 8004946:	4b05      	ldr	r3, [pc, #20]	@ (800495c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	0a1b      	lsrs	r3, r3, #8
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	4903      	ldr	r1, [pc, #12]	@ (8004960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004952:	5ccb      	ldrb	r3, [r1, r3]
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40021000 	.word	0x40021000
 8004960:	0800a808 	.word	0x0800a808

08004964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004968:	f7ff ffde 	bl	8004928 <HAL_RCC_GetHCLKFreq>
 800496c:	4602      	mov	r2, r0
 800496e:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	0adb      	lsrs	r3, r3, #11
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	4903      	ldr	r1, [pc, #12]	@ (8004988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800497a:	5ccb      	ldrb	r3, [r1, r3]
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004980:	4618      	mov	r0, r3
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40021000 	.word	0x40021000
 8004988:	0800a808 	.word	0x0800a808

0800498c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004994:	4b0a      	ldr	r3, [pc, #40]	@ (80049c0 <RCC_Delay+0x34>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0a      	ldr	r2, [pc, #40]	@ (80049c4 <RCC_Delay+0x38>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	0a5b      	lsrs	r3, r3, #9
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049a8:	bf00      	nop
  }
  while (Delay --);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1e5a      	subs	r2, r3, #1
 80049ae:	60fa      	str	r2, [r7, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f9      	bne.n	80049a8 <RCC_Delay+0x1c>
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	20000000 	.word	0x20000000
 80049c4:	10624dd3 	.word	0x10624dd3

080049c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d07d      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80049e4:	2300      	movs	r3, #0
 80049e6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e8:	4b4f      	ldr	r3, [pc, #316]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10d      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f4:	4b4c      	ldr	r3, [pc, #304]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049fe:	61d3      	str	r3, [r2, #28]
 8004a00:	4b49      	ldr	r3, [pc, #292]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a10:	4b46      	ldr	r3, [pc, #280]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d118      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a1c:	4b43      	ldr	r3, [pc, #268]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a42      	ldr	r2, [pc, #264]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a28:	f7fc ff10 	bl	800184c <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2e:	e008      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a30:	f7fc ff0c 	bl	800184c <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b64      	cmp	r3, #100	@ 0x64
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e06d      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a42:	4b3a      	ldr	r3, [pc, #232]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a4e:	4b36      	ldr	r3, [pc, #216]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d02e      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d027      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a76:	4b2e      	ldr	r3, [pc, #184]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a7c:	4b2c      	ldr	r3, [pc, #176]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a82:	4a29      	ldr	r2, [pc, #164]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d014      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a92:	f7fc fedb 	bl	800184c <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a98:	e00a      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9a:	f7fc fed7 	bl	800184c <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e036      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0ee      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004abc:	4b1a      	ldr	r3, [pc, #104]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4917      	ldr	r1, [pc, #92]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ace:	7dfb      	ldrb	r3, [r7, #23]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d105      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ad4:	4b14      	ldr	r3, [pc, #80]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	4a13      	ldr	r2, [pc, #76]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ade:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d008      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004aec:	4b0e      	ldr	r3, [pc, #56]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	490b      	ldr	r1, [pc, #44]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d008      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b0a:	4b07      	ldr	r3, [pc, #28]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	4904      	ldr	r1, [pc, #16]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	40007000 	.word	0x40007000
 8004b30:	42420440 	.word	0x42420440

08004b34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	2300      	movs	r3, #0
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	2300      	movs	r3, #0
 8004b46:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d00a      	beq.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b10      	cmp	r3, #16
 8004b5a:	f200 808a 	bhi.w	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d045      	beq.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d075      	beq.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004b6a:	e082      	b.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004b6c:	4b46      	ldr	r3, [pc, #280]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004b72:	4b45      	ldr	r3, [pc, #276]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d07b      	beq.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	0c9b      	lsrs	r3, r3, #18
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	4a41      	ldr	r2, [pc, #260]	@ (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004b88:	5cd3      	ldrb	r3, [r2, r3]
 8004b8a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d015      	beq.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b96:	4b3c      	ldr	r3, [pc, #240]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	0c5b      	lsrs	r3, r3, #17
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	4a3b      	ldr	r2, [pc, #236]	@ (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004ba2:	5cd3      	ldrb	r3, [r2, r3]
 8004ba4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00d      	beq.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004bb0:	4a38      	ldr	r2, [pc, #224]	@ (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	fb02 f303 	mul.w	r3, r2, r3
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	e004      	b.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	4a34      	ldr	r2, [pc, #208]	@ (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bd8:	d102      	bne.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	61bb      	str	r3, [r7, #24]
      break;
 8004bde:	e04a      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	4a2d      	ldr	r2, [pc, #180]	@ (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	61bb      	str	r3, [r7, #24]
      break;
 8004bee:	e042      	b.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004bf0:	4b25      	ldr	r3, [pc, #148]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c00:	d108      	bne.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004c0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c10:	61bb      	str	r3, [r7, #24]
 8004c12:	e01f      	b.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c1e:	d109      	bne.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004c20:	4b19      	ldr	r3, [pc, #100]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004c2c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	e00f      	b.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c3e:	d11c      	bne.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004c40:	4b11      	ldr	r3, [pc, #68]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d016      	beq.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004c4c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004c50:	61bb      	str	r3, [r7, #24]
      break;
 8004c52:	e012      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004c54:	e011      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004c56:	f7ff fe85 	bl	8004964 <HAL_RCC_GetPCLK2Freq>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	0b9b      	lsrs	r3, r3, #14
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	3301      	adds	r3, #1
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6e:	61bb      	str	r3, [r7, #24]
      break;
 8004c70:	e004      	b.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004c72:	bf00      	nop
 8004c74:	e002      	b.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004c76:	bf00      	nop
 8004c78:	e000      	b.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004c7a:	bf00      	nop
    }
  }
  return (frequency);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3720      	adds	r7, #32
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	0800a824 	.word	0x0800a824
 8004c90:	0800a834 	.word	0x0800a834
 8004c94:	007a1200 	.word	0x007a1200
 8004c98:	003d0900 	.word	0x003d0900
 8004c9c:	aaaaaaab 	.word	0xaaaaaaab

08004ca0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e07a      	b.n	8004dac <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	7c5b      	ldrb	r3, [r3, #17]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d105      	bne.n	8004ccc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fc f936 	bl	8000f38 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f870 	bl	8004db8 <HAL_RTC_WaitForSynchro>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d004      	beq.n	8004ce8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e061      	b.n	8004dac <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f892 	bl	8004e12 <RTC_EnterInitMode>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e056      	b.n	8004dac <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0207 	bic.w	r2, r2, #7
 8004d0c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004d16:	4b27      	ldr	r3, [pc, #156]	@ (8004db4 <HAL_RTC_Init+0x114>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1a:	4a26      	ldr	r2, [pc, #152]	@ (8004db4 <HAL_RTC_Init+0x114>)
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004d22:	4b24      	ldr	r3, [pc, #144]	@ (8004db4 <HAL_RTC_Init+0x114>)
 8004d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d26:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	4921      	ldr	r1, [pc, #132]	@ (8004db4 <HAL_RTC_Init+0x114>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3c:	d003      	beq.n	8004d46 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	e00e      	b.n	8004d64 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004d46:	2001      	movs	r0, #1
 8004d48:	f7ff fef4 	bl	8004b34 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d4c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2204      	movs	r2, #4
 8004d58:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e026      	b.n	8004dac <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	0c1a      	lsrs	r2, r3, #16
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f002 020f 	and.w	r2, r2, #15
 8004d70:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	b292      	uxth	r2, r2
 8004d7a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f870 	bl	8004e62 <RTC_ExitInitMode>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d004      	beq.n	8004d92 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e00c      	b.n	8004dac <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004daa:	2300      	movs	r3, #0
  }
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40006c00 	.word	0x40006c00

08004db8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e01d      	b.n	8004e0a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0208 	bic.w	r2, r2, #8
 8004ddc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004dde:	f7fc fd35 	bl	800184c <HAL_GetTick>
 8004de2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004de4:	e009      	b.n	8004dfa <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004de6:	f7fc fd31 	bl	800184c <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004df4:	d901      	bls.n	8004dfa <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e007      	b.n	8004e0a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0ee      	beq.n	8004de6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004e1e:	f7fc fd15 	bl	800184c <HAL_GetTick>
 8004e22:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004e24:	e009      	b.n	8004e3a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004e26:	f7fc fd11 	bl	800184c <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e34:	d901      	bls.n	8004e3a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e00f      	b.n	8004e5a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 0320 	and.w	r3, r3, #32
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0ee      	beq.n	8004e26 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0210 	orr.w	r2, r2, #16
 8004e56:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0210 	bic.w	r2, r2, #16
 8004e7c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004e7e:	f7fc fce5 	bl	800184c <HAL_GetTick>
 8004e82:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004e84:	e009      	b.n	8004e9a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004e86:	f7fc fce1 	bl	800184c <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e94:	d901      	bls.n	8004e9a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e007      	b.n	8004eaa <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0ee      	beq.n	8004e86 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e042      	b.n	8004f4a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fc fa67 	bl	80013ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2224      	movs	r2, #36	@ 0x24
 8004ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ef4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 ffa4 	bl	8005e44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f0a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f1a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f2a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08c      	sub	sp, #48	@ 0x30
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b20      	cmp	r3, #32
 8004f6c:	d156      	bne.n	800501c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <HAL_UART_Transmit_DMA+0x26>
 8004f74:	88fb      	ldrh	r3, [r7, #6]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e04f      	b.n	800501e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	88fa      	ldrh	r2, [r7, #6]
 8004f88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	88fa      	ldrh	r2, [r7, #6]
 8004f8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2221      	movs	r2, #33	@ 0x21
 8004f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa2:	4a21      	ldr	r2, [pc, #132]	@ (8005028 <HAL_UART_Transmit_DMA+0xd4>)
 8004fa4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004faa:	4a20      	ldr	r2, [pc, #128]	@ (800502c <HAL_UART_Transmit_DMA+0xd8>)
 8004fac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8005030 <HAL_UART_Transmit_DMA+0xdc>)
 8004fb4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fba:	2200      	movs	r2, #0
 8004fbc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8004fbe:	f107 0308 	add.w	r3, r7, #8
 8004fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fca:	6819      	ldr	r1, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	88fb      	ldrh	r3, [r7, #6]
 8004fd6:	f7fc fe1e 	bl	8001c16 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fe2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3314      	adds	r3, #20
 8004fea:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	e853 3f00 	ldrex	r3, [r3]
 8004ff2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3314      	adds	r3, #20
 8005002:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005004:	627a      	str	r2, [r7, #36]	@ 0x24
 8005006:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005008:	6a39      	ldr	r1, [r7, #32]
 800500a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800500c:	e841 2300 	strex	r3, r2, [r1]
 8005010:	61fb      	str	r3, [r7, #28]
   return(result);
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1e5      	bne.n	8004fe4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	e000      	b.n	800501e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800501c:	2302      	movs	r3, #2
  }
}
 800501e:	4618      	mov	r0, r3
 8005020:	3730      	adds	r7, #48	@ 0x30
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	080056db 	.word	0x080056db
 800502c:	08005775 	.word	0x08005775
 8005030:	080058f9 	.word	0x080058f9

08005034 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	4613      	mov	r3, r2
 8005040:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b20      	cmp	r3, #32
 800504c:	d112      	bne.n	8005074 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <HAL_UART_Receive_DMA+0x26>
 8005054:	88fb      	ldrh	r3, [r7, #6]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e00b      	b.n	8005076 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005064:	88fb      	ldrh	r3, [r7, #6]
 8005066:	461a      	mov	r2, r3
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fc8e 	bl	800598c <UART_Start_Receive_DMA>
 8005070:	4603      	mov	r3, r0
 8005072:	e000      	b.n	8005076 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005074:	2302      	movs	r3, #2
  }
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b090      	sub	sp, #64	@ 0x40
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005086:	2300      	movs	r3, #0
 8005088:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005094:	2b00      	cmp	r3, #0
 8005096:	bf14      	ite	ne
 8005098:	2301      	movne	r3, #1
 800509a:	2300      	moveq	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b21      	cmp	r3, #33	@ 0x21
 80050aa:	d128      	bne.n	80050fe <HAL_UART_DMAStop+0x80>
 80050ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d025      	beq.n	80050fe <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3314      	adds	r3, #20
 80050b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	623b      	str	r3, [r7, #32]
   return(result);
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3314      	adds	r3, #20
 80050d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80050d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e5      	bne.n	80050b2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d004      	beq.n	80050f8 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fc fdef 	bl	8001cd6 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fce1 	bl	8005ac0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005108:	2b00      	cmp	r3, #0
 800510a:	bf14      	ite	ne
 800510c:	2301      	movne	r3, #1
 800510e:	2300      	moveq	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b22      	cmp	r3, #34	@ 0x22
 800511e:	d128      	bne.n	8005172 <HAL_UART_DMAStop+0xf4>
 8005120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005122:	2b00      	cmp	r3, #0
 8005124:	d025      	beq.n	8005172 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3314      	adds	r3, #20
 800512c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	60fb      	str	r3, [r7, #12]
   return(result);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800513c:	637b      	str	r3, [r7, #52]	@ 0x34
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3314      	adds	r3, #20
 8005144:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005146:	61fa      	str	r2, [r7, #28]
 8005148:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	69b9      	ldr	r1, [r7, #24]
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	e841 2300 	strex	r3, r2, [r1]
 8005152:	617b      	str	r3, [r7, #20]
   return(result);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1e5      	bne.n	8005126 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d004      	beq.n	800516c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005166:	4618      	mov	r0, r3
 8005168:	f7fc fdb5 	bl	8001cd6 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fcce 	bl	8005b0e <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3740      	adds	r7, #64	@ 0x40
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b0ba      	sub	sp, #232	@ 0xe8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80051ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10f      	bne.n	80051e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <HAL_UART_IRQHandler+0x66>
 80051ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fd74 	bl	8005cc8 <UART_Receive_IT>
      return;
 80051e0:	e25b      	b.n	800569a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 80de 	beq.w	80053a8 <HAL_UART_IRQHandler+0x22c>
 80051ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80d1 	beq.w	80053a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00b      	beq.n	800522a <HAL_UART_IRQHandler+0xae>
 8005212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005222:	f043 0201 	orr.w	r2, r3, #1
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800522a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00b      	beq.n	800524e <HAL_UART_IRQHandler+0xd2>
 8005236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005246:	f043 0202 	orr.w	r2, r3, #2
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800524e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00b      	beq.n	8005272 <HAL_UART_IRQHandler+0xf6>
 800525a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526a:	f043 0204 	orr.w	r2, r3, #4
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d011      	beq.n	80052a2 <HAL_UART_IRQHandler+0x126>
 800527e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	d105      	bne.n	8005296 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800528a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529a:	f043 0208 	orr.w	r2, r3, #8
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 81f2 	beq.w	8005690 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d008      	beq.n	80052ca <HAL_UART_IRQHandler+0x14e>
 80052b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fcff 	bl	8005cc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bf14      	ite	ne
 80052d8:	2301      	movne	r3, #1
 80052da:	2300      	moveq	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d103      	bne.n	80052f6 <HAL_UART_IRQHandler+0x17a>
 80052ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d04f      	beq.n	8005396 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fc09 	bl	8005b0e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005306:	2b00      	cmp	r3, #0
 8005308:	d041      	beq.n	800538e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3314      	adds	r3, #20
 8005310:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005320:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005328:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3314      	adds	r3, #20
 8005332:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005336:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800533a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005342:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800534e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1d9      	bne.n	800530a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535a:	2b00      	cmp	r3, #0
 800535c:	d013      	beq.n	8005386 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005362:	4a7e      	ldr	r2, [pc, #504]	@ (800555c <HAL_UART_IRQHandler+0x3e0>)
 8005364:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536a:	4618      	mov	r0, r3
 800536c:	f7fc fcee 	bl	8001d4c <HAL_DMA_Abort_IT>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d016      	beq.n	80053a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800537a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005380:	4610      	mov	r0, r2
 8005382:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005384:	e00e      	b.n	80053a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fc f9c0 	bl	800170c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800538c:	e00a      	b.n	80053a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fc f9bc 	bl	800170c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005394:	e006      	b.n	80053a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fc f9b8 	bl	800170c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80053a2:	e175      	b.n	8005690 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a4:	bf00      	nop
    return;
 80053a6:	e173      	b.n	8005690 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	f040 814f 	bne.w	8005650 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 8148 	beq.w	8005650 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8141 	beq.w	8005650 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053ce:	2300      	movs	r3, #0
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	60bb      	str	r3, [r7, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	60bb      	str	r3, [r7, #8]
 80053e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 80b6 	beq.w	8005560 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005400:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 8145 	beq.w	8005694 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800540e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005412:	429a      	cmp	r2, r3
 8005414:	f080 813e 	bcs.w	8005694 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800541e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	2b20      	cmp	r3, #32
 8005428:	f000 8088 	beq.w	800553c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	330c      	adds	r3, #12
 8005432:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005442:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005446:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800544a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	330c      	adds	r3, #12
 8005454:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005458:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800545c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005460:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005464:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005468:	e841 2300 	strex	r3, r2, [r1]
 800546c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1d9      	bne.n	800542c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3314      	adds	r3, #20
 800547e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005480:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005482:	e853 3f00 	ldrex	r3, [r3]
 8005486:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005488:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800548a:	f023 0301 	bic.w	r3, r3, #1
 800548e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3314      	adds	r3, #20
 8005498:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800549c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80054a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80054a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80054ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e1      	bne.n	8005478 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3314      	adds	r3, #20
 80054ba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80054c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3314      	adds	r3, #20
 80054d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80054d8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80054de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e3      	bne.n	80054b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	330c      	adds	r3, #12
 8005500:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800550a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800550c:	f023 0310 	bic.w	r3, r3, #16
 8005510:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800551e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005520:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005524:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800552c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e3      	bne.n	80054fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005536:	4618      	mov	r0, r3
 8005538:	f7fc fbcd 	bl	8001cd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800554a:	b29b      	uxth	r3, r3
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	b29b      	uxth	r3, r3
 8005550:	4619      	mov	r1, r3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f8b6 	bl	80056c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005558:	e09c      	b.n	8005694 <HAL_UART_IRQHandler+0x518>
 800555a:	bf00      	nop
 800555c:	08005bd3 	.word	0x08005bd3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005568:	b29b      	uxth	r3, r3
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 808e 	beq.w	8005698 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800557c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8089 	beq.w	8005698 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	330c      	adds	r3, #12
 800558c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005598:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800559c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	330c      	adds	r3, #12
 80055a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80055aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80055ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e3      	bne.n	8005586 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3314      	adds	r3, #20
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	623b      	str	r3, [r7, #32]
   return(result);
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	f023 0301 	bic.w	r3, r3, #1
 80055d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3314      	adds	r3, #20
 80055de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80055e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80055e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e3      	bne.n	80055be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	330c      	adds	r3, #12
 800560a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	e853 3f00 	ldrex	r3, [r3]
 8005612:	60fb      	str	r3, [r7, #12]
   return(result);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 0310 	bic.w	r3, r3, #16
 800561a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	330c      	adds	r3, #12
 8005624:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005628:	61fa      	str	r2, [r7, #28]
 800562a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	69b9      	ldr	r1, [r7, #24]
 800562e:	69fa      	ldr	r2, [r7, #28]
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	617b      	str	r3, [r7, #20]
   return(result);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e3      	bne.n	8005604 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005642:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f83b 	bl	80056c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800564e:	e023      	b.n	8005698 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005658:	2b00      	cmp	r3, #0
 800565a:	d009      	beq.n	8005670 <HAL_UART_IRQHandler+0x4f4>
 800565c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fac6 	bl	8005bfa <UART_Transmit_IT>
    return;
 800566e:	e014      	b.n	800569a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00e      	beq.n	800569a <HAL_UART_IRQHandler+0x51e>
 800567c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fb05 	bl	8005c98 <UART_EndTransmit_IT>
    return;
 800568e:	e004      	b.n	800569a <HAL_UART_IRQHandler+0x51e>
    return;
 8005690:	bf00      	nop
 8005692:	e002      	b.n	800569a <HAL_UART_IRQHandler+0x51e>
      return;
 8005694:	bf00      	nop
 8005696:	e000      	b.n	800569a <HAL_UART_IRQHandler+0x51e>
      return;
 8005698:	bf00      	nop
  }
}
 800569a:	37e8      	adds	r7, #232	@ 0xe8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr

080056b2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr

080056c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	460b      	mov	r3, r1
 80056ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr

080056da <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b090      	sub	sp, #64	@ 0x40
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d137      	bne.n	8005766 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80056f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f8:	2200      	movs	r2, #0
 80056fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3314      	adds	r3, #20
 8005702:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	623b      	str	r3, [r7, #32]
   return(result);
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005712:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3314      	adds	r3, #20
 800571a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800571c:	633a      	str	r2, [r7, #48]	@ 0x30
 800571e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800572a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e5      	bne.n	80056fc <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	330c      	adds	r3, #12
 8005736:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	e853 3f00 	ldrex	r3, [r3]
 800573e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005746:	637b      	str	r3, [r7, #52]	@ 0x34
 8005748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005750:	61fa      	str	r2, [r7, #28]
 8005752:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005754:	69b9      	ldr	r1, [r7, #24]
 8005756:	69fa      	ldr	r2, [r7, #28]
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	617b      	str	r3, [r7, #20]
   return(result);
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e5      	bne.n	8005730 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005764:	e002      	b.n	800576c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005766:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005768:	f7ff ff9a 	bl	80056a0 <HAL_UART_TxCpltCallback>
}
 800576c:	bf00      	nop
 800576e:	3740      	adds	r7, #64	@ 0x40
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005780:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f7ff ff95 	bl	80056b2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005788:	bf00      	nop
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b09c      	sub	sp, #112	@ 0x70
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d172      	bne.n	8005892 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80057ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057ae:	2200      	movs	r2, #0
 80057b0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	330c      	adds	r3, #12
 80057b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80057c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	330c      	adds	r3, #12
 80057d0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80057d2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80057d4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e5      	bne.n	80057b2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3314      	adds	r3, #20
 80057ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f8:	f023 0301 	bic.w	r3, r3, #1
 80057fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80057fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3314      	adds	r3, #20
 8005804:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005806:	647a      	str	r2, [r7, #68]	@ 0x44
 8005808:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800580c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e5      	bne.n	80057e6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800581a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3314      	adds	r3, #20
 8005820:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	623b      	str	r3, [r7, #32]
   return(result);
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005830:	663b      	str	r3, [r7, #96]	@ 0x60
 8005832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3314      	adds	r3, #20
 8005838:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800583a:	633a      	str	r2, [r7, #48]	@ 0x30
 800583c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e5      	bne.n	800581a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800584e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005850:	2220      	movs	r2, #32
 8005852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585a:	2b01      	cmp	r3, #1
 800585c:	d119      	bne.n	8005892 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800585e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	330c      	adds	r3, #12
 8005864:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	60fb      	str	r3, [r7, #12]
   return(result);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f023 0310 	bic.w	r3, r3, #16
 8005874:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005876:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	330c      	adds	r3, #12
 800587c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800587e:	61fa      	str	r2, [r7, #28]
 8005880:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005882:	69b9      	ldr	r1, [r7, #24]
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	617b      	str	r3, [r7, #20]
   return(result);
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1e5      	bne.n	800585e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005892:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005894:	2200      	movs	r2, #0
 8005896:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800589a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589c:	2b01      	cmp	r3, #1
 800589e:	d106      	bne.n	80058ae <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058a4:	4619      	mov	r1, r3
 80058a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80058a8:	f7ff ff0c 	bl	80056c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058ac:	e002      	b.n	80058b4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80058ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80058b0:	f7fb fef4 	bl	800169c <HAL_UART_RxCpltCallback>
}
 80058b4:	bf00      	nop
 80058b6:	3770      	adds	r7, #112	@ 0x70
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d108      	bne.n	80058ea <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058dc:	085b      	lsrs	r3, r3, #1
 80058de:	b29b      	uxth	r3, r3
 80058e0:	4619      	mov	r1, r3
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f7ff feee 	bl	80056c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058e8:	e002      	b.n	80058f0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f7fb fe9e 	bl	800162c <HAL_UART_RxHalfCpltCallback>
}
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005900:	2300      	movs	r3, #0
 8005902:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005908:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005914:	2b00      	cmp	r3, #0
 8005916:	bf14      	ite	ne
 8005918:	2301      	movne	r3, #1
 800591a:	2300      	moveq	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b21      	cmp	r3, #33	@ 0x21
 800592a:	d108      	bne.n	800593e <UART_DMAError+0x46>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2200      	movs	r2, #0
 8005936:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005938:	68b8      	ldr	r0, [r7, #8]
 800593a:	f000 f8c1 	bl	8005ac0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	bf14      	ite	ne
 800594c:	2301      	movne	r3, #1
 800594e:	2300      	moveq	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b22      	cmp	r3, #34	@ 0x22
 800595e:	d108      	bne.n	8005972 <UART_DMAError+0x7a>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2200      	movs	r2, #0
 800596a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800596c:	68b8      	ldr	r0, [r7, #8]
 800596e:	f000 f8ce 	bl	8005b0e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005976:	f043 0210 	orr.w	r2, r3, #16
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800597e:	68b8      	ldr	r0, [r7, #8]
 8005980:	f7fb fec4 	bl	800170c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005984:	bf00      	nop
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b098      	sub	sp, #96	@ 0x60
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	4613      	mov	r3, r2
 8005998:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	88fa      	ldrh	r2, [r7, #6]
 80059a4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2222      	movs	r2, #34	@ 0x22
 80059b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b8:	4a3e      	ldr	r2, [pc, #248]	@ (8005ab4 <UART_Start_Receive_DMA+0x128>)
 80059ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c0:	4a3d      	ldr	r2, [pc, #244]	@ (8005ab8 <UART_Start_Receive_DMA+0x12c>)
 80059c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c8:	4a3c      	ldr	r2, [pc, #240]	@ (8005abc <UART_Start_Receive_DMA+0x130>)
 80059ca:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d0:	2200      	movs	r2, #0
 80059d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80059d4:	f107 0308 	add.w	r3, r7, #8
 80059d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3304      	adds	r3, #4
 80059e4:	4619      	mov	r1, r3
 80059e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	f7fc f913 	bl	8001c16 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80059f0:	2300      	movs	r3, #0
 80059f2:	613b      	str	r3, [r7, #16]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	613b      	str	r3, [r7, #16]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	613b      	str	r3, [r7, #16]
 8005a04:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d019      	beq.n	8005a42 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	330c      	adds	r3, #12
 8005a14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a2e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005a30:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005a34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1e5      	bne.n	8005a0e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3314      	adds	r3, #20
 8005a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a54:	f043 0301 	orr.w	r3, r3, #1
 8005a58:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3314      	adds	r3, #20
 8005a60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a62:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005a64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005a68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1e5      	bne.n	8005a42 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3314      	adds	r3, #20
 8005a7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	e853 3f00 	ldrex	r3, [r3]
 8005a84:	617b      	str	r3, [r7, #20]
   return(result);
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3314      	adds	r3, #20
 8005a94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005a96:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	6a39      	ldr	r1, [r7, #32]
 8005a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e5      	bne.n	8005a76 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3760      	adds	r7, #96	@ 0x60
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	08005791 	.word	0x08005791
 8005ab8:	080058bd 	.word	0x080058bd
 8005abc:	080058f9 	.word	0x080058f9

08005ac0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b089      	sub	sp, #36	@ 0x24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	330c      	adds	r3, #12
 8005ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005ade:	61fb      	str	r3, [r7, #28]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	61ba      	str	r2, [r7, #24]
 8005aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	6979      	ldr	r1, [r7, #20]
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	613b      	str	r3, [r7, #16]
   return(result);
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e5      	bne.n	8005ac8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005b04:	bf00      	nop
 8005b06:	3724      	adds	r7, #36	@ 0x24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bc80      	pop	{r7}
 8005b0c:	4770      	bx	lr

08005b0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b095      	sub	sp, #84	@ 0x54
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	330c      	adds	r3, #12
 8005b1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	330c      	adds	r3, #12
 8005b34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b36:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1e5      	bne.n	8005b16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3314      	adds	r3, #20
 8005b50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	f023 0301 	bic.w	r3, r3, #1
 8005b60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3314      	adds	r3, #20
 8005b68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e5      	bne.n	8005b4a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d119      	bne.n	8005bba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	330c      	adds	r3, #12
 8005b8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f023 0310 	bic.w	r3, r3, #16
 8005b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ba6:	61ba      	str	r2, [r7, #24]
 8005ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6979      	ldr	r1, [r7, #20]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e5      	bne.n	8005b86 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005bc8:	bf00      	nop
 8005bca:	3754      	adds	r7, #84	@ 0x54
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bc80      	pop	{r7}
 8005bd0:	4770      	bx	lr

08005bd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f7fb fd8d 	bl	800170c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bf2:	bf00      	nop
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b21      	cmp	r3, #33	@ 0x21
 8005c0c:	d13e      	bne.n	8005c8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c16:	d114      	bne.n	8005c42 <UART_Transmit_IT+0x48>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d110      	bne.n	8005c42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	1c9a      	adds	r2, r3, #2
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	621a      	str	r2, [r3, #32]
 8005c40:	e008      	b.n	8005c54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	1c59      	adds	r1, r3, #1
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6211      	str	r1, [r2, #32]
 8005c4c:	781a      	ldrb	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	4619      	mov	r1, r3
 8005c62:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10f      	bne.n	8005c88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e000      	b.n	8005c8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c8c:	2302      	movs	r3, #2
  }
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr

08005c98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff fcf1 	bl	80056a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08c      	sub	sp, #48	@ 0x30
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b22      	cmp	r3, #34	@ 0x22
 8005cda:	f040 80ae 	bne.w	8005e3a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ce6:	d117      	bne.n	8005d18 <UART_Receive_IT+0x50>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d113      	bne.n	8005d18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d10:	1c9a      	adds	r2, r3, #2
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d16:	e026      	b.n	8005d66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d2a:	d007      	beq.n	8005d3c <UART_Receive_IT+0x74>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10a      	bne.n	8005d4a <UART_Receive_IT+0x82>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d46:	701a      	strb	r2, [r3, #0]
 8005d48:	e008      	b.n	8005d5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	4619      	mov	r1, r3
 8005d74:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d15d      	bne.n	8005e36 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0220 	bic.w	r2, r2, #32
 8005d88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695a      	ldr	r2, [r3, #20]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0201 	bic.w	r2, r2, #1
 8005da8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d135      	bne.n	8005e2c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	330c      	adds	r3, #12
 8005dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	e853 3f00 	ldrex	r3, [r3]
 8005dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f023 0310 	bic.w	r3, r3, #16
 8005ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	330c      	adds	r3, #12
 8005de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005de6:	623a      	str	r2, [r7, #32]
 8005de8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	69f9      	ldr	r1, [r7, #28]
 8005dec:	6a3a      	ldr	r2, [r7, #32]
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e5      	bne.n	8005dc6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b10      	cmp	r3, #16
 8005e06:	d10a      	bne.n	8005e1e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff fc4d 	bl	80056c4 <HAL_UARTEx_RxEventCallback>
 8005e2a:	e002      	b.n	8005e32 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7fb fc35 	bl	800169c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	e002      	b.n	8005e3c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	e000      	b.n	8005e3c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e3a:	2302      	movs	r3, #2
  }
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3730      	adds	r7, #48	@ 0x30
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005e7e:	f023 030c 	bic.w	r3, r3, #12
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	68b9      	ldr	r1, [r7, #8]
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699a      	ldr	r2, [r3, #24]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8005f58 <UART_SetConfig+0x114>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d103      	bne.n	8005eb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005eac:	f7fe fd5a 	bl	8004964 <HAL_RCC_GetPCLK2Freq>
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	e002      	b.n	8005eba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005eb4:	f7fe fd42 	bl	800493c <HAL_RCC_GetPCLK1Freq>
 8005eb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009a      	lsls	r2, r3, #2
 8005ec4:	441a      	add	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed0:	4a22      	ldr	r2, [pc, #136]	@ (8005f5c <UART_SetConfig+0x118>)
 8005ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	0119      	lsls	r1, r3, #4
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	4613      	mov	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009a      	lsls	r2, r3, #2
 8005ee4:	441a      	add	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f5c <UART_SetConfig+0x118>)
 8005ef2:	fba3 0302 	umull	r0, r3, r3, r2
 8005ef6:	095b      	lsrs	r3, r3, #5
 8005ef8:	2064      	movs	r0, #100	@ 0x64
 8005efa:	fb00 f303 	mul.w	r3, r0, r3
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	011b      	lsls	r3, r3, #4
 8005f02:	3332      	adds	r3, #50	@ 0x32
 8005f04:	4a15      	ldr	r2, [pc, #84]	@ (8005f5c <UART_SetConfig+0x118>)
 8005f06:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0a:	095b      	lsrs	r3, r3, #5
 8005f0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f10:	4419      	add	r1, r3
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4613      	mov	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	009a      	lsls	r2, r3, #2
 8005f1c:	441a      	add	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f28:	4b0c      	ldr	r3, [pc, #48]	@ (8005f5c <UART_SetConfig+0x118>)
 8005f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	2064      	movs	r0, #100	@ 0x64
 8005f32:	fb00 f303 	mul.w	r3, r0, r3
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	3332      	adds	r3, #50	@ 0x32
 8005f3c:	4a07      	ldr	r2, [pc, #28]	@ (8005f5c <UART_SetConfig+0x118>)
 8005f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	f003 020f 	and.w	r2, r3, #15
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40013800 	.word	0x40013800
 8005f5c:	51eb851f 	.word	0x51eb851f

08005f60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	4638      	mov	r0, r7
 8005f6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bc80      	pop	{r7}
 8005f78:	4770      	bx	lr

08005f7a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f8a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005f8e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bc80      	pop	{r7}
 8005fa4:	4770      	bx	lr

08005fa6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b085      	sub	sp, #20
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fae:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005fb2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bc80      	pop	{r7}
 8005fd8:	4770      	bx	lr

08005fda <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr

08005ff2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	4638      	mov	r0, r7
 8005ffc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2201      	movs	r2, #1
 8006004:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	bc80      	pop	{r7}
 800602a:	4770      	bx	lr

0800602c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800602c:	b480      	push	{r7}
 800602e:	b09d      	sub	sp, #116	@ 0x74
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	b29b      	uxth	r3, r3
 800604a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800604e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006052:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	78db      	ldrb	r3, [r3, #3]
 800605a:	2b03      	cmp	r3, #3
 800605c:	d81f      	bhi.n	800609e <USB_ActivateEndpoint+0x72>
 800605e:	a201      	add	r2, pc, #4	@ (adr r2, 8006064 <USB_ActivateEndpoint+0x38>)
 8006060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006064:	08006075 	.word	0x08006075
 8006068:	08006091 	.word	0x08006091
 800606c:	080060a7 	.word	0x080060a7
 8006070:	08006083 	.word	0x08006083
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006074:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006078:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800607c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006080:	e012      	b.n	80060a8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006082:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006086:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800608a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800608e:	e00b      	b.n	80060a8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006090:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006094:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006098:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800609c:	e004      	b.n	80060a8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80060a4:	e000      	b.n	80060a8 <USB_ActivateEndpoint+0x7c>
      break;
 80060a6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	441a      	add	r2, r3
 80060b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80060b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	7812      	ldrb	r2, [r2, #0]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	441a      	add	r2, r3
 80060f6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80060fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006102:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800610a:	b29b      	uxth	r3, r3
 800610c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	7b1b      	ldrb	r3, [r3, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	f040 8178 	bne.w	8006408 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	785b      	ldrb	r3, [r3, #1]
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 8084 	beq.w	800622a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800612c:	b29b      	uxth	r3, r3
 800612e:	461a      	mov	r2, r3
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	4413      	add	r3, r2
 8006134:	61bb      	str	r3, [r7, #24]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	011a      	lsls	r2, r3, #4
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	88db      	ldrh	r3, [r3, #6]
 800614a:	085b      	lsrs	r3, r3, #1
 800614c:	b29b      	uxth	r3, r3
 800614e:	005b      	lsls	r3, r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	827b      	strh	r3, [r7, #18]
 8006164:	8a7b      	ldrh	r3, [r7, #18]
 8006166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	d01b      	beq.n	80061a6 <USB_ActivateEndpoint+0x17a>
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006180:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006184:	823b      	strh	r3, [r7, #16]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	441a      	add	r2, r3
 8006190:	8a3b      	ldrh	r3, [r7, #16]
 8006192:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006196:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800619a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800619e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	78db      	ldrb	r3, [r3, #3]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d020      	beq.n	80061f0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061c4:	81bb      	strh	r3, [r7, #12]
 80061c6:	89bb      	ldrh	r3, [r7, #12]
 80061c8:	f083 0320 	eor.w	r3, r3, #32
 80061cc:	81bb      	strh	r3, [r7, #12]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	441a      	add	r2, r3
 80061d8:	89bb      	ldrh	r3, [r7, #12]
 80061da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	8013      	strh	r3, [r2, #0]
 80061ee:	e2d5      	b.n	800679c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006202:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006206:	81fb      	strh	r3, [r7, #14]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	441a      	add	r2, r3
 8006212:	89fb      	ldrh	r3, [r7, #14]
 8006214:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006218:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800621c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006224:	b29b      	uxth	r3, r3
 8006226:	8013      	strh	r3, [r2, #0]
 8006228:	e2b8      	b.n	800679c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	633b      	str	r3, [r7, #48]	@ 0x30
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006234:	b29b      	uxth	r3, r3
 8006236:	461a      	mov	r2, r3
 8006238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623a:	4413      	add	r3, r2
 800623c:	633b      	str	r3, [r7, #48]	@ 0x30
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	011a      	lsls	r2, r3, #4
 8006244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006246:	4413      	add	r3, r2
 8006248:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800624c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	88db      	ldrh	r3, [r3, #6]
 8006252:	085b      	lsrs	r3, r3, #1
 8006254:	b29b      	uxth	r3, r3
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	b29a      	uxth	r2, r3
 800625a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800625c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006268:	b29b      	uxth	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626e:	4413      	add	r3, r2
 8006270:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	011a      	lsls	r2, r3, #4
 8006278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627a:	4413      	add	r3, r2
 800627c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006280:	627b      	str	r3, [r7, #36]	@ 0x24
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800628c:	b29a      	uxth	r2, r3
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	801a      	strh	r2, [r3, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b3e      	cmp	r3, #62	@ 0x3e
 8006298:	d91d      	bls.n	80062d6 <USB_ActivateEndpoint+0x2aa>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	095b      	lsrs	r3, r3, #5
 80062a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f003 031f 	and.w	r3, r3, #31
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <USB_ActivateEndpoint+0x288>
 80062ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062b0:	3b01      	subs	r3, #1
 80062b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062bc:	b29b      	uxth	r3, r3
 80062be:	029b      	lsls	r3, r3, #10
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	4313      	orrs	r3, r2
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d2:	801a      	strh	r2, [r3, #0]
 80062d4:	e026      	b.n	8006324 <USB_ActivateEndpoint+0x2f8>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <USB_ActivateEndpoint+0x2c8>
 80062de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	801a      	strh	r2, [r3, #0]
 80062f2:	e017      	b.n	8006324 <USB_ActivateEndpoint+0x2f8>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	085b      	lsrs	r3, r3, #1
 80062fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <USB_ActivateEndpoint+0x2e2>
 8006308:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800630a:	3301      	adds	r3, #1
 800630c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	b29a      	uxth	r2, r3
 8006314:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006316:	b29b      	uxth	r3, r3
 8006318:	029b      	lsls	r3, r3, #10
 800631a:	b29b      	uxth	r3, r3
 800631c:	4313      	orrs	r3, r2
 800631e:	b29a      	uxth	r2, r3
 8006320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006322:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006332:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d01b      	beq.n	8006374 <USB_ActivateEndpoint+0x348>
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800634e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006352:	843b      	strh	r3, [r7, #32]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	441a      	add	r2, r3
 800635e:	8c3b      	ldrh	r3, [r7, #32]
 8006360:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006364:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006368:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800636c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006370:	b29b      	uxth	r3, r3
 8006372:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d124      	bne.n	80063c6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	b29b      	uxth	r3, r3
 800638a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800638e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006392:	83bb      	strh	r3, [r7, #28]
 8006394:	8bbb      	ldrh	r3, [r7, #28]
 8006396:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800639a:	83bb      	strh	r3, [r7, #28]
 800639c:	8bbb      	ldrh	r3, [r7, #28]
 800639e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80063a2:	83bb      	strh	r3, [r7, #28]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	441a      	add	r2, r3
 80063ae:	8bbb      	ldrh	r3, [r7, #28]
 80063b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	8013      	strh	r3, [r2, #0]
 80063c4:	e1ea      	b.n	800679c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063dc:	83fb      	strh	r3, [r7, #30]
 80063de:	8bfb      	ldrh	r3, [r7, #30]
 80063e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80063e4:	83fb      	strh	r3, [r7, #30]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	441a      	add	r2, r3
 80063f0:	8bfb      	ldrh	r3, [r7, #30]
 80063f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006402:	b29b      	uxth	r3, r3
 8006404:	8013      	strh	r3, [r2, #0]
 8006406:	e1c9      	b.n	800679c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	78db      	ldrb	r3, [r3, #3]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d11e      	bne.n	800644e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29b      	uxth	r3, r3
 800641e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006426:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	441a      	add	r2, r3
 8006434:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800643c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006440:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006448:	b29b      	uxth	r3, r3
 800644a:	8013      	strh	r3, [r2, #0]
 800644c:	e01d      	b.n	800648a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	b29b      	uxth	r3, r3
 800645c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006460:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006464:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	441a      	add	r2, r3
 8006472:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006476:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800647a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800647e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006486:	b29b      	uxth	r3, r3
 8006488:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006494:	b29b      	uxth	r3, r3
 8006496:	461a      	mov	r2, r3
 8006498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800649a:	4413      	add	r3, r2
 800649c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	011a      	lsls	r2, r3, #4
 80064a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	891b      	ldrh	r3, [r3, #8]
 80064b2:	085b      	lsrs	r3, r3, #1
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064bc:	801a      	strh	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	461a      	mov	r2, r3
 80064cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ce:	4413      	add	r3, r2
 80064d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	011a      	lsls	r2, r3, #4
 80064d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80064e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	895b      	ldrh	r3, [r3, #10]
 80064e6:	085b      	lsrs	r3, r3, #1
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064f0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	785b      	ldrb	r3, [r3, #1]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f040 8093 	bne.w	8006622 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800650c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006510:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01b      	beq.n	8006550 <USB_ActivateEndpoint+0x524>
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	b29b      	uxth	r3, r3
 8006526:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800652a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800652e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	441a      	add	r2, r3
 800653a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800653c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006540:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006544:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800654c:	b29b      	uxth	r3, r3
 800654e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800655e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01b      	beq.n	80065a0 <USB_ActivateEndpoint+0x574>
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800657a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800657e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	441a      	add	r2, r3
 800658a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800658c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006590:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006598:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800659c:	b29b      	uxth	r3, r3
 800659e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80065b8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80065ba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80065be:	873b      	strh	r3, [r7, #56]	@ 0x38
 80065c0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80065c2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065c6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	441a      	add	r2, r3
 80065d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80065d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	441a      	add	r2, r3
 800660a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800660c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006610:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006614:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800661c:	b29b      	uxth	r3, r3
 800661e:	8013      	strh	r3, [r2, #0]
 8006620:	e0bc      	b.n	800679c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006632:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d01d      	beq.n	800667a <USB_ActivateEndpoint+0x64e>
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	b29b      	uxth	r3, r3
 800664c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006654:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	441a      	add	r2, r3
 8006662:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006666:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800666a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800666e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006676:	b29b      	uxth	r3, r3
 8006678:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800668a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800668e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	d01d      	beq.n	80066d2 <USB_ActivateEndpoint+0x6a6>
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ac:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	441a      	add	r2, r3
 80066ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80066be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	78db      	ldrb	r3, [r3, #3]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d024      	beq.n	8006724 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066f0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80066f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80066f8:	f083 0320 	eor.w	r3, r3, #32
 80066fc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	441a      	add	r2, r3
 800670a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800670e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006712:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800671a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800671e:	b29b      	uxth	r3, r3
 8006720:	8013      	strh	r3, [r2, #0]
 8006722:	e01d      	b.n	8006760 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006736:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800673a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	441a      	add	r2, r3
 8006748:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800674c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006750:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006754:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800675c:	b29b      	uxth	r3, r3
 800675e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	b29b      	uxth	r3, r3
 800676e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006776:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	441a      	add	r2, r3
 8006784:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800678c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006798:	b29b      	uxth	r3, r3
 800679a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800679c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3774      	adds	r7, #116	@ 0x74
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop

080067ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b08d      	sub	sp, #52	@ 0x34
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	7b1b      	ldrb	r3, [r3, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f040 808e 	bne.w	80068dc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	785b      	ldrb	r3, [r3, #1]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d044      	beq.n	8006852 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	81bb      	strh	r3, [r7, #12]
 80067d6:	89bb      	ldrh	r3, [r7, #12]
 80067d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01b      	beq.n	8006818 <USB_DeactivateEndpoint+0x6c>
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	881b      	ldrh	r3, [r3, #0]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f6:	817b      	strh	r3, [r7, #10]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	441a      	add	r2, r3
 8006802:	897b      	ldrh	r3, [r7, #10]
 8006804:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006808:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800680c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006810:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006814:	b29b      	uxth	r3, r3
 8006816:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	b29b      	uxth	r3, r3
 8006826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800682a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800682e:	813b      	strh	r3, [r7, #8]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	441a      	add	r2, r3
 800683a:	893b      	ldrh	r3, [r7, #8]
 800683c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006840:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006844:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800684c:	b29b      	uxth	r3, r3
 800684e:	8013      	strh	r3, [r2, #0]
 8006850:	e192      	b.n	8006b78 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	827b      	strh	r3, [r7, #18]
 8006860:	8a7b      	ldrh	r3, [r7, #18]
 8006862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01b      	beq.n	80068a2 <USB_DeactivateEndpoint+0xf6>
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800687c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006880:	823b      	strh	r3, [r7, #16]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	441a      	add	r2, r3
 800688c:	8a3b      	ldrh	r3, [r7, #16]
 800688e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006892:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006896:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800689a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800689e:	b29b      	uxth	r3, r3
 80068a0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068b8:	81fb      	strh	r3, [r7, #14]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	441a      	add	r2, r3
 80068c4:	89fb      	ldrh	r3, [r7, #14]
 80068c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	8013      	strh	r3, [r2, #0]
 80068da:	e14d      	b.n	8006b78 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	785b      	ldrb	r3, [r3, #1]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f040 80a5 	bne.w	8006a30 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	843b      	strh	r3, [r7, #32]
 80068f4:	8c3b      	ldrh	r3, [r7, #32]
 80068f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d01b      	beq.n	8006936 <USB_DeactivateEndpoint+0x18a>
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006910:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006914:	83fb      	strh	r3, [r7, #30]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	441a      	add	r2, r3
 8006920:	8bfb      	ldrh	r3, [r7, #30]
 8006922:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006926:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800692a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800692e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006932:	b29b      	uxth	r3, r3
 8006934:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	83bb      	strh	r3, [r7, #28]
 8006944:	8bbb      	ldrh	r3, [r7, #28]
 8006946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800694a:	2b00      	cmp	r3, #0
 800694c:	d01b      	beq.n	8006986 <USB_DeactivateEndpoint+0x1da>
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29b      	uxth	r3, r3
 800695c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006964:	837b      	strh	r3, [r7, #26]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	441a      	add	r2, r3
 8006970:	8b7b      	ldrh	r3, [r7, #26]
 8006972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800697a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800697e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006982:	b29b      	uxth	r3, r3
 8006984:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29b      	uxth	r3, r3
 8006994:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699c:	833b      	strh	r3, [r7, #24]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	441a      	add	r2, r3
 80069a8:	8b3b      	ldrh	r3, [r7, #24]
 80069aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d4:	82fb      	strh	r3, [r7, #22]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	441a      	add	r2, r3
 80069e0:	8afb      	ldrh	r3, [r7, #22]
 80069e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a0c:	82bb      	strh	r3, [r7, #20]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	441a      	add	r2, r3
 8006a18:	8abb      	ldrh	r3, [r7, #20]
 8006a1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	8013      	strh	r3, [r2, #0]
 8006a2e:	e0a3      	b.n	8006b78 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006a3e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006a40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d01b      	beq.n	8006a80 <USB_DeactivateEndpoint+0x2d4>
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a5e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	441a      	add	r2, r3
 8006a6a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006a8e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01b      	beq.n	8006ad0 <USB_DeactivateEndpoint+0x324>
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aae:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	441a      	add	r2, r3
 8006aba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006abc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ac0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ac4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ac8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	441a      	add	r2, r3
 8006af2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006af4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006af8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006afc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b1e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	441a      	add	r2, r3
 8006b2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b56:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	441a      	add	r2, r3
 8006b62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3734      	adds	r7, #52	@ 0x34
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr

08006b84 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b0c2      	sub	sp, #264	@ 0x108
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b92:	6018      	str	r0, [r3, #0]
 8006b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b9c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	785b      	ldrb	r3, [r3, #1]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	f040 86b7 	bne.w	800791e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	699a      	ldr	r2, [r3, #24]
 8006bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d908      	bls.n	8006bde <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006bdc:	e007      	b.n	8006bee <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	7b1b      	ldrb	r3, [r3, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d13a      	bne.n	8006c74 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6959      	ldr	r1, [r3, #20]
 8006c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	88da      	ldrh	r2, [r3, #6]
 8006c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c20:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c24:	6800      	ldr	r0, [r0, #0]
 8006c26:	f001 fc9c 	bl	8008562 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	461a      	mov	r2, r3
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	011a      	lsls	r2, r3, #4
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	801a      	strh	r2, [r3, #0]
 8006c70:	f000 be1f 	b.w	80078b2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	78db      	ldrb	r3, [r3, #3]
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	f040 8462 	bne.w	800754a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6a1a      	ldr	r2, [r3, #32]
 8006c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	f240 83df 	bls.w	8007462 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cca:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	441a      	add	r2, r3
 8006ce8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006cec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cf4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6a1a      	ldr	r2, [r3, #32]
 8006d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d10:	1ad2      	subs	r2, r2, r3
 8006d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 81c7 	beq.w	80070d4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	785b      	ldrb	r3, [r3, #1]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d177      	bne.n	8006e52 <USB_EPStartXfer+0x2ce>
 8006d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	461a      	mov	r2, r3
 8006d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d82:	4413      	add	r3, r2
 8006d84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	011a      	lsls	r2, r3, #4
 8006d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d96:	4413      	add	r3, r2
 8006d98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dac:	801a      	strh	r2, [r3, #0]
 8006dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db2:	2b3e      	cmp	r3, #62	@ 0x3e
 8006db4:	d921      	bls.n	8006dfa <USB_EPStartXfer+0x276>
 8006db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d104      	bne.n	8006dd6 <USB_EPStartXfer+0x252>
 8006dcc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	029b      	lsls	r3, r3, #10
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	4313      	orrs	r3, r2
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df6:	801a      	strh	r2, [r3, #0]
 8006df8:	e050      	b.n	8006e9c <USB_EPStartXfer+0x318>
 8006dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10a      	bne.n	8006e18 <USB_EPStartXfer+0x294>
 8006e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e14:	801a      	strh	r2, [r3, #0]
 8006e16:	e041      	b.n	8006e9c <USB_EPStartXfer+0x318>
 8006e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e1c:	085b      	lsrs	r3, r3, #1
 8006e1e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d004      	beq.n	8006e38 <USB_EPStartXfer+0x2b4>
 8006e2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006e32:	3301      	adds	r3, #1
 8006e34:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	029b      	lsls	r3, r3, #10
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	e024      	b.n	8006e9c <USB_EPStartXfer+0x318>
 8006e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	785b      	ldrb	r3, [r3, #1]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d11c      	bne.n	8006e9c <USB_EPStartXfer+0x318>
 8006e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	461a      	mov	r2, r3
 8006e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e76:	4413      	add	r3, r2
 8006e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	011a      	lsls	r2, r3, #4
 8006e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	895b      	ldrh	r3, [r3, #10]
 8006ea8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6959      	ldr	r1, [r3, #20]
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ec2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ec6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006eca:	6800      	ldr	r0, [r0, #0]
 8006ecc:	f001 fb49 	bl	8008562 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	695a      	ldr	r2, [r3, #20]
 8006edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee0:	441a      	add	r2, r3
 8006ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6a1a      	ldr	r2, [r3, #32]
 8006efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d90f      	bls.n	8006f2a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6a1a      	ldr	r2, [r3, #32]
 8006f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f1a:	1ad2      	subs	r2, r2, r3
 8006f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	621a      	str	r2, [r3, #32]
 8006f28:	e00e      	b.n	8006f48 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2200      	movs	r2, #0
 8006f46:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	785b      	ldrb	r3, [r3, #1]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d177      	bne.n	8007048 <USB_EPStartXfer+0x4c4>
 8006f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	61bb      	str	r3, [r7, #24]
 8006f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	4413      	add	r3, r2
 8006f7a:	61bb      	str	r3, [r7, #24]
 8006f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	011a      	lsls	r2, r3, #4
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	801a      	strh	r2, [r3, #0]
 8006fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006faa:	d921      	bls.n	8006ff0 <USB_EPStartXfer+0x46c>
 8006fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb0:	095b      	lsrs	r3, r3, #5
 8006fb2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fba:	f003 031f 	and.w	r3, r3, #31
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d104      	bne.n	8006fcc <USB_EPStartXfer+0x448>
 8006fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	029b      	lsls	r3, r3, #10
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	801a      	strh	r2, [r3, #0]
 8006fee:	e056      	b.n	800709e <USB_EPStartXfer+0x51a>
 8006ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10a      	bne.n	800700e <USB_EPStartXfer+0x48a>
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007006:	b29a      	uxth	r2, r3
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	801a      	strh	r2, [r3, #0]
 800700c:	e047      	b.n	800709e <USB_EPStartXfer+0x51a>
 800700e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007012:	085b      	lsrs	r3, r3, #1
 8007014:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d004      	beq.n	800702e <USB_EPStartXfer+0x4aa>
 8007024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007028:	3301      	adds	r3, #1
 800702a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	b29a      	uxth	r2, r3
 8007034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007038:	b29b      	uxth	r3, r3
 800703a:	029b      	lsls	r3, r3, #10
 800703c:	b29b      	uxth	r3, r3
 800703e:	4313      	orrs	r3, r2
 8007040:	b29a      	uxth	r2, r3
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	801a      	strh	r2, [r3, #0]
 8007046:	e02a      	b.n	800709e <USB_EPStartXfer+0x51a>
 8007048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	785b      	ldrb	r3, [r3, #1]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d122      	bne.n	800709e <USB_EPStartXfer+0x51a>
 8007058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800705c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	623b      	str	r3, [r7, #32]
 8007064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007068:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007072:	b29b      	uxth	r3, r3
 8007074:	461a      	mov	r2, r3
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	4413      	add	r3, r2
 800707a:	623b      	str	r3, [r7, #32]
 800707c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	011a      	lsls	r2, r3, #4
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	4413      	add	r3, r2
 800708e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007092:	61fb      	str	r3, [r7, #28]
 8007094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007098:	b29a      	uxth	r2, r3
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800709e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	891b      	ldrh	r3, [r3, #8]
 80070aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6959      	ldr	r1, [r3, #20]
 80070ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070be:	b29b      	uxth	r3, r3
 80070c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80070c4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80070c8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80070cc:	6800      	ldr	r0, [r0, #0]
 80070ce:	f001 fa48 	bl	8008562 <USB_WritePMA>
 80070d2:	e3ee      	b.n	80078b2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	785b      	ldrb	r3, [r3, #1]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d177      	bne.n	80071d4 <USB_EPStartXfer+0x650>
 80070e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070fe:	b29b      	uxth	r3, r3
 8007100:	461a      	mov	r2, r3
 8007102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007104:	4413      	add	r3, r2
 8007106:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	011a      	lsls	r2, r3, #4
 8007116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007118:	4413      	add	r3, r2
 800711a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800711e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	b29b      	uxth	r3, r3
 8007126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800712a:	b29a      	uxth	r2, r3
 800712c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800712e:	801a      	strh	r2, [r3, #0]
 8007130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007134:	2b3e      	cmp	r3, #62	@ 0x3e
 8007136:	d921      	bls.n	800717c <USB_EPStartXfer+0x5f8>
 8007138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713c:	095b      	lsrs	r3, r3, #5
 800713e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007146:	f003 031f 	and.w	r3, r3, #31
 800714a:	2b00      	cmp	r3, #0
 800714c:	d104      	bne.n	8007158 <USB_EPStartXfer+0x5d4>
 800714e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007152:	3b01      	subs	r3, #1
 8007154:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	b29a      	uxth	r2, r3
 800715e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007162:	b29b      	uxth	r3, r3
 8007164:	029b      	lsls	r3, r3, #10
 8007166:	b29b      	uxth	r3, r3
 8007168:	4313      	orrs	r3, r2
 800716a:	b29b      	uxth	r3, r3
 800716c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007174:	b29a      	uxth	r2, r3
 8007176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007178:	801a      	strh	r2, [r3, #0]
 800717a:	e056      	b.n	800722a <USB_EPStartXfer+0x6a6>
 800717c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10a      	bne.n	800719a <USB_EPStartXfer+0x616>
 8007184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	b29b      	uxth	r3, r3
 800718a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800718e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007192:	b29a      	uxth	r2, r3
 8007194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007196:	801a      	strh	r2, [r3, #0]
 8007198:	e047      	b.n	800722a <USB_EPStartXfer+0x6a6>
 800719a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719e:	085b      	lsrs	r3, r3, #1
 80071a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80071a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d004      	beq.n	80071ba <USB_EPStartXfer+0x636>
 80071b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071b4:	3301      	adds	r3, #1
 80071b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80071ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29a      	uxth	r2, r3
 80071c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	029b      	lsls	r3, r3, #10
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	4313      	orrs	r3, r2
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071d0:	801a      	strh	r2, [r3, #0]
 80071d2:	e02a      	b.n	800722a <USB_EPStartXfer+0x6a6>
 80071d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	785b      	ldrb	r3, [r3, #1]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d122      	bne.n	800722a <USB_EPStartXfer+0x6a6>
 80071e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80071f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071fe:	b29b      	uxth	r3, r3
 8007200:	461a      	mov	r2, r3
 8007202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007204:	4413      	add	r3, r2
 8007206:	653b      	str	r3, [r7, #80]	@ 0x50
 8007208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	011a      	lsls	r2, r3, #4
 8007216:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007218:	4413      	add	r3, r2
 800721a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800721e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007224:	b29a      	uxth	r2, r3
 8007226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007228:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800722a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800722e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	891b      	ldrh	r3, [r3, #8]
 8007236:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800723a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6959      	ldr	r1, [r3, #20]
 8007246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800724a:	b29b      	uxth	r3, r3
 800724c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007250:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007254:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007258:	6800      	ldr	r0, [r0, #0]
 800725a:	f001 f982 	bl	8008562 <USB_WritePMA>
            ep->xfer_buff += len;
 800725e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695a      	ldr	r2, [r3, #20]
 800726a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726e:	441a      	add	r2, r3
 8007270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800727c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6a1a      	ldr	r2, [r3, #32]
 8007288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	429a      	cmp	r2, r3
 8007296:	d90f      	bls.n	80072b8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6a1a      	ldr	r2, [r3, #32]
 80072a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a8:	1ad2      	subs	r2, r2, r3
 80072aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	621a      	str	r2, [r3, #32]
 80072b6:	e00e      	b.n	80072d6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80072b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80072c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2200      	movs	r2, #0
 80072d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80072e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	785b      	ldrb	r3, [r3, #1]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d177      	bne.n	80073e2 <USB_EPStartXfer+0x85e>
 80072f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800730c:	b29b      	uxth	r3, r3
 800730e:	461a      	mov	r2, r3
 8007310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007312:	4413      	add	r3, r2
 8007314:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	011a      	lsls	r2, r3, #4
 8007324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007326:	4413      	add	r3, r2
 8007328:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800732c:	637b      	str	r3, [r7, #52]	@ 0x34
 800732e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b29b      	uxth	r3, r3
 8007334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007338:	b29a      	uxth	r2, r3
 800733a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800733c:	801a      	strh	r2, [r3, #0]
 800733e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007342:	2b3e      	cmp	r3, #62	@ 0x3e
 8007344:	d921      	bls.n	800738a <USB_EPStartXfer+0x806>
 8007346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007354:	f003 031f 	and.w	r3, r3, #31
 8007358:	2b00      	cmp	r3, #0
 800735a:	d104      	bne.n	8007366 <USB_EPStartXfer+0x7e2>
 800735c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007360:	3b01      	subs	r3, #1
 8007362:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	b29a      	uxth	r2, r3
 800736c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007370:	b29b      	uxth	r3, r3
 8007372:	029b      	lsls	r3, r3, #10
 8007374:	b29b      	uxth	r3, r3
 8007376:	4313      	orrs	r3, r2
 8007378:	b29b      	uxth	r3, r3
 800737a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800737e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007382:	b29a      	uxth	r2, r3
 8007384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007386:	801a      	strh	r2, [r3, #0]
 8007388:	e050      	b.n	800742c <USB_EPStartXfer+0x8a8>
 800738a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10a      	bne.n	80073a8 <USB_EPStartXfer+0x824>
 8007392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29b      	uxth	r3, r3
 8007398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800739c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a4:	801a      	strh	r2, [r3, #0]
 80073a6:	e041      	b.n	800742c <USB_EPStartXfer+0x8a8>
 80073a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ac:	085b      	lsrs	r3, r3, #1
 80073ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80073b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d004      	beq.n	80073c8 <USB_EPStartXfer+0x844>
 80073be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c2:	3301      	adds	r3, #1
 80073c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80073c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ca:	881b      	ldrh	r3, [r3, #0]
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	029b      	lsls	r3, r3, #10
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	4313      	orrs	r3, r2
 80073da:	b29a      	uxth	r2, r3
 80073dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073de:	801a      	strh	r2, [r3, #0]
 80073e0:	e024      	b.n	800742c <USB_EPStartXfer+0x8a8>
 80073e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	785b      	ldrb	r3, [r3, #1]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d11c      	bne.n	800742c <USB_EPStartXfer+0x8a8>
 80073f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007400:	b29b      	uxth	r3, r3
 8007402:	461a      	mov	r2, r3
 8007404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007406:	4413      	add	r3, r2
 8007408:	643b      	str	r3, [r7, #64]	@ 0x40
 800740a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	011a      	lsls	r2, r3, #4
 8007418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800741a:	4413      	add	r3, r2
 800741c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007426:	b29a      	uxth	r2, r3
 8007428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800742a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800742c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	895b      	ldrh	r3, [r3, #10]
 8007438:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800743c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6959      	ldr	r1, [r3, #20]
 8007448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744c:	b29b      	uxth	r3, r3
 800744e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007452:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007456:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800745a:	6800      	ldr	r0, [r0, #0]
 800745c:	f001 f881 	bl	8008562 <USB_WritePMA>
 8007460:	e227      	b.n	80078b2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007476:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	b29b      	uxth	r3, r3
 8007490:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007498:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800749c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	441a      	add	r2, r3
 80074b6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80074ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80074ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	461a      	mov	r2, r3
 80074ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074ee:	4413      	add	r3, r2
 80074f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	011a      	lsls	r2, r3, #4
 8007500:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007502:	4413      	add	r3, r2
 8007504:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007508:	65bb      	str	r3, [r7, #88]	@ 0x58
 800750a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750e:	b29a      	uxth	r2, r3
 8007510:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007512:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	891b      	ldrh	r3, [r3, #8]
 8007520:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6959      	ldr	r1, [r3, #20]
 8007530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007534:	b29b      	uxth	r3, r3
 8007536:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800753a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800753e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007542:	6800      	ldr	r0, [r0, #0]
 8007544:	f001 f80d 	bl	8008562 <USB_WritePMA>
 8007548:	e1b3      	b.n	80078b2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800754a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6a1a      	ldr	r2, [r3, #32]
 8007556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755a:	1ad2      	subs	r2, r2, r3
 800755c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	b29b      	uxth	r3, r3
 8007586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 80c6 	beq.w	800771c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	673b      	str	r3, [r7, #112]	@ 0x70
 800759c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	785b      	ldrb	r3, [r3, #1]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d177      	bne.n	800769c <USB_EPStartXfer+0xb18>
 80075ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	461a      	mov	r2, r3
 80075ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075cc:	4413      	add	r3, r2
 80075ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	011a      	lsls	r2, r3, #4
 80075de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075e0:	4413      	add	r3, r2
 80075e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80075e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075f6:	801a      	strh	r2, [r3, #0]
 80075f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80075fe:	d921      	bls.n	8007644 <USB_EPStartXfer+0xac0>
 8007600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007604:	095b      	lsrs	r3, r3, #5
 8007606:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800760a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760e:	f003 031f 	and.w	r3, r3, #31
 8007612:	2b00      	cmp	r3, #0
 8007614:	d104      	bne.n	8007620 <USB_EPStartXfer+0xa9c>
 8007616:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800761a:	3b01      	subs	r3, #1
 800761c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007620:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29a      	uxth	r2, r3
 8007626:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800762a:	b29b      	uxth	r3, r3
 800762c:	029b      	lsls	r3, r3, #10
 800762e:	b29b      	uxth	r3, r3
 8007630:	4313      	orrs	r3, r2
 8007632:	b29b      	uxth	r3, r3
 8007634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800763c:	b29a      	uxth	r2, r3
 800763e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007640:	801a      	strh	r2, [r3, #0]
 8007642:	e050      	b.n	80076e6 <USB_EPStartXfer+0xb62>
 8007644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10a      	bne.n	8007662 <USB_EPStartXfer+0xade>
 800764c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	b29b      	uxth	r3, r3
 8007652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800765a:	b29a      	uxth	r2, r3
 800765c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800765e:	801a      	strh	r2, [r3, #0]
 8007660:	e041      	b.n	80076e6 <USB_EPStartXfer+0xb62>
 8007662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007666:	085b      	lsrs	r3, r3, #1
 8007668:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800766c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <USB_EPStartXfer+0xafe>
 8007678:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800767c:	3301      	adds	r3, #1
 800767e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007682:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	b29a      	uxth	r2, r3
 8007688:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800768c:	b29b      	uxth	r3, r3
 800768e:	029b      	lsls	r3, r3, #10
 8007690:	b29b      	uxth	r3, r3
 8007692:	4313      	orrs	r3, r2
 8007694:	b29a      	uxth	r2, r3
 8007696:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007698:	801a      	strh	r2, [r3, #0]
 800769a:	e024      	b.n	80076e6 <USB_EPStartXfer+0xb62>
 800769c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d11c      	bne.n	80076e6 <USB_EPStartXfer+0xb62>
 80076ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	461a      	mov	r2, r3
 80076be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076c0:	4413      	add	r3, r2
 80076c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80076c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	011a      	lsls	r2, r3, #4
 80076d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076d4:	4413      	add	r3, r2
 80076d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80076da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80076e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	895b      	ldrh	r3, [r3, #10]
 80076f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6959      	ldr	r1, [r3, #20]
 8007702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007706:	b29b      	uxth	r3, r3
 8007708:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800770c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007710:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007714:	6800      	ldr	r0, [r0, #0]
 8007716:	f000 ff24 	bl	8008562 <USB_WritePMA>
 800771a:	e0ca      	b.n	80078b2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800771c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	785b      	ldrb	r3, [r3, #1]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d177      	bne.n	800781c <USB_EPStartXfer+0xc98>
 800772c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007730:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007746:	b29b      	uxth	r3, r3
 8007748:	461a      	mov	r2, r3
 800774a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800774c:	4413      	add	r3, r2
 800774e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	011a      	lsls	r2, r3, #4
 800775e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007760:	4413      	add	r3, r2
 8007762:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007766:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007768:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	b29b      	uxth	r3, r3
 800776e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007772:	b29a      	uxth	r2, r3
 8007774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007776:	801a      	strh	r2, [r3, #0]
 8007778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800777c:	2b3e      	cmp	r3, #62	@ 0x3e
 800777e:	d921      	bls.n	80077c4 <USB_EPStartXfer+0xc40>
 8007780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007784:	095b      	lsrs	r3, r3, #5
 8007786:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800778a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778e:	f003 031f 	and.w	r3, r3, #31
 8007792:	2b00      	cmp	r3, #0
 8007794:	d104      	bne.n	80077a0 <USB_EPStartXfer+0xc1c>
 8007796:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800779a:	3b01      	subs	r3, #1
 800779c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80077a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	029b      	lsls	r3, r3, #10
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	4313      	orrs	r3, r2
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077bc:	b29a      	uxth	r2, r3
 80077be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077c0:	801a      	strh	r2, [r3, #0]
 80077c2:	e05c      	b.n	800787e <USB_EPStartXfer+0xcfa>
 80077c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <USB_EPStartXfer+0xc5e>
 80077cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077da:	b29a      	uxth	r2, r3
 80077dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077de:	801a      	strh	r2, [r3, #0]
 80077e0:	e04d      	b.n	800787e <USB_EPStartXfer+0xcfa>
 80077e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e6:	085b      	lsrs	r3, r3, #1
 80077e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80077ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d004      	beq.n	8007802 <USB_EPStartXfer+0xc7e>
 80077f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80077fc:	3301      	adds	r3, #1
 80077fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007802:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	b29a      	uxth	r2, r3
 8007808:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800780c:	b29b      	uxth	r3, r3
 800780e:	029b      	lsls	r3, r3, #10
 8007810:	b29b      	uxth	r3, r3
 8007812:	4313      	orrs	r3, r2
 8007814:	b29a      	uxth	r2, r3
 8007816:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007818:	801a      	strh	r2, [r3, #0]
 800781a:	e030      	b.n	800787e <USB_EPStartXfer+0xcfa>
 800781c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d128      	bne.n	800787e <USB_EPStartXfer+0xcfa>
 800782c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007830:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800783a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007848:	b29b      	uxth	r3, r3
 800784a:	461a      	mov	r2, r3
 800784c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007850:	4413      	add	r3, r2
 8007852:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	011a      	lsls	r2, r3, #4
 8007864:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007868:	4413      	add	r3, r2
 800786a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800786e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007876:	b29a      	uxth	r2, r3
 8007878:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800787c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800787e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	891b      	ldrh	r3, [r3, #8]
 800788a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800788e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6959      	ldr	r1, [r3, #20]
 800789a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800789e:	b29b      	uxth	r3, r3
 80078a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80078a4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80078a8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80078ac:	6800      	ldr	r0, [r0, #0]
 80078ae:	f000 fe58 	bl	8008562 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80078b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	881b      	ldrh	r3, [r3, #0]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078d8:	817b      	strh	r3, [r7, #10]
 80078da:	897b      	ldrh	r3, [r7, #10]
 80078dc:	f083 0310 	eor.w	r3, r3, #16
 80078e0:	817b      	strh	r3, [r7, #10]
 80078e2:	897b      	ldrh	r3, [r7, #10]
 80078e4:	f083 0320 	eor.w	r3, r3, #32
 80078e8:	817b      	strh	r3, [r7, #10]
 80078ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	441a      	add	r2, r3
 8007904:	897b      	ldrh	r3, [r7, #10]
 8007906:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800790a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800790e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007916:	b29b      	uxth	r3, r3
 8007918:	8013      	strh	r3, [r2, #0]
 800791a:	f000 bcde 	b.w	80082da <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800791e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	7b1b      	ldrb	r3, [r3, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	f040 80bb 	bne.w	8007aa6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	699a      	ldr	r2, [r3, #24]
 800793c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	429a      	cmp	r2, r3
 800794a:	d917      	bls.n	800797c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800794c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800795c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	699a      	ldr	r2, [r3, #24]
 8007968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800796c:	1ad2      	subs	r2, r2, r3
 800796e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	619a      	str	r2, [r3, #24]
 800797a:	e00e      	b.n	800799a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800797c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800798c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2200      	movs	r2, #0
 8007998:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800799a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	461a      	mov	r2, r3
 80079ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80079be:	4413      	add	r3, r2
 80079c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	011a      	lsls	r2, r3, #4
 80079d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80079d6:	4413      	add	r3, r2
 80079d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80079e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079f2:	801a      	strh	r2, [r3, #0]
 80079f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80079fa:	d924      	bls.n	8007a46 <USB_EPStartXfer+0xec2>
 80079fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a00:	095b      	lsrs	r3, r3, #5
 8007a02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0a:	f003 031f 	and.w	r3, r3, #31
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d104      	bne.n	8007a1c <USB_EPStartXfer+0xe98>
 8007a12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007a16:	3b01      	subs	r3, #1
 8007a18:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	029b      	lsls	r3, r3, #10
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a40:	801a      	strh	r2, [r3, #0]
 8007a42:	f000 bc10 	b.w	8008266 <USB_EPStartXfer+0x16e2>
 8007a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10c      	bne.n	8007a68 <USB_EPStartXfer+0xee4>
 8007a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a64:	801a      	strh	r2, [r3, #0]
 8007a66:	e3fe      	b.n	8008266 <USB_EPStartXfer+0x16e2>
 8007a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6c:	085b      	lsrs	r3, r3, #1
 8007a6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d004      	beq.n	8007a88 <USB_EPStartXfer+0xf04>
 8007a7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007a82:	3301      	adds	r3, #1
 8007a84:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	029b      	lsls	r3, r3, #10
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007aa2:	801a      	strh	r2, [r3, #0]
 8007aa4:	e3df      	b.n	8008266 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	78db      	ldrb	r3, [r3, #3]
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	f040 8218 	bne.w	8007ee8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	785b      	ldrb	r3, [r3, #1]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f040 809d 	bne.w	8007c04 <USB_EPStartXfer+0x1080>
 8007aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ace:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007adc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	461a      	mov	r2, r3
 8007aea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007aee:	4413      	add	r3, r2
 8007af0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	011a      	lsls	r2, r3, #4
 8007b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b06:	4413      	add	r3, r2
 8007b08:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b22:	801a      	strh	r2, [r3, #0]
 8007b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b32:	d92b      	bls.n	8007b8c <USB_EPStartXfer+0x1008>
 8007b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	095b      	lsrs	r3, r3, #5
 8007b42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	f003 031f 	and.w	r3, r3, #31
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d104      	bne.n	8007b64 <USB_EPStartXfer+0xfe0>
 8007b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	029b      	lsls	r3, r3, #10
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	4313      	orrs	r3, r2
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b88:	801a      	strh	r2, [r3, #0]
 8007b8a:	e070      	b.n	8007c6e <USB_EPStartXfer+0x10ea>
 8007b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10c      	bne.n	8007bb6 <USB_EPStartXfer+0x1032>
 8007b9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007bb2:	801a      	strh	r2, [r3, #0]
 8007bb4:	e05b      	b.n	8007c6e <USB_EPStartXfer+0x10ea>
 8007bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	085b      	lsrs	r3, r3, #1
 8007bc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	f003 0301 	and.w	r3, r3, #1
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d004      	beq.n	8007be6 <USB_EPStartXfer+0x1062>
 8007bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007be0:	3301      	adds	r3, #1
 8007be2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007be6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	029b      	lsls	r3, r3, #10
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c00:	801a      	strh	r2, [r3, #0]
 8007c02:	e034      	b.n	8007c6e <USB_EPStartXfer+0x10ea>
 8007c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	785b      	ldrb	r3, [r3, #1]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d12c      	bne.n	8007c6e <USB_EPStartXfer+0x10ea>
 8007c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	461a      	mov	r2, r3
 8007c34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c38:	4413      	add	r3, r2
 8007c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	011a      	lsls	r2, r3, #4
 8007c4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c50:	4413      	add	r3, r2
 8007c52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007c6c:	801a      	strh	r2, [r3, #0]
 8007c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	785b      	ldrb	r3, [r3, #1]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f040 809d 	bne.w	8007dc8 <USB_EPStartXfer+0x1244>
 8007c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	461a      	mov	r2, r3
 8007cae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	011a      	lsls	r2, r3, #4
 8007cc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cca:	4413      	add	r3, r2
 8007ccc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007cd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ce6:	801a      	strh	r2, [r3, #0]
 8007ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cf6:	d92b      	bls.n	8007d50 <USB_EPStartXfer+0x11cc>
 8007cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	095b      	lsrs	r3, r3, #5
 8007d06:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	f003 031f 	and.w	r3, r3, #31
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d104      	bne.n	8007d28 <USB_EPStartXfer+0x11a4>
 8007d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d22:	3b01      	subs	r3, #1
 8007d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	b29a      	uxth	r2, r3
 8007d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	029b      	lsls	r3, r3, #10
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d4c:	801a      	strh	r2, [r3, #0]
 8007d4e:	e069      	b.n	8007e24 <USB_EPStartXfer+0x12a0>
 8007d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10c      	bne.n	8007d7a <USB_EPStartXfer+0x11f6>
 8007d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d76:	801a      	strh	r2, [r3, #0]
 8007d78:	e054      	b.n	8007e24 <USB_EPStartXfer+0x12a0>
 8007d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	085b      	lsrs	r3, r3, #1
 8007d88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d004      	beq.n	8007daa <USB_EPStartXfer+0x1226>
 8007da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007da4:	3301      	adds	r3, #1
 8007da6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007daa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dae:	881b      	ldrh	r3, [r3, #0]
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	029b      	lsls	r3, r3, #10
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dc4:	801a      	strh	r2, [r3, #0]
 8007dc6:	e02d      	b.n	8007e24 <USB_EPStartXfer+0x12a0>
 8007dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	785b      	ldrb	r3, [r3, #1]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d125      	bne.n	8007e24 <USB_EPStartXfer+0x12a0>
 8007dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ddc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	461a      	mov	r2, r3
 8007dea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007dee:	4413      	add	r3, r2
 8007df0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	011a      	lsls	r2, r3, #4
 8007e02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007e06:	4413      	add	r3, r2
 8007e08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e22:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 8218 	beq.w	8008266 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d005      	beq.n	8007e6e <USB_EPStartXfer+0x12ea>
 8007e62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10d      	bne.n	8007e8a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e6e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f040 81f5 	bne.w	8008266 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e7c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f040 81ee 	bne.w	8008266 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eb0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	441a      	add	r2, r3
 8007ece:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007ed2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ed6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ede:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	8013      	strh	r3, [r2, #0]
 8007ee6:	e1be      	b.n	8008266 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	78db      	ldrb	r3, [r3, #3]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	f040 81b4 	bne.w	8008262 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	699a      	ldr	r2, [r3, #24]
 8007f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d917      	bls.n	8007f46 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	699a      	ldr	r2, [r3, #24]
 8007f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f36:	1ad2      	subs	r2, r2, r3
 8007f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	619a      	str	r2, [r3, #24]
 8007f44:	e00e      	b.n	8007f64 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2200      	movs	r2, #0
 8007f62:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	785b      	ldrb	r3, [r3, #1]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f040 8085 	bne.w	8008080 <USB_EPStartXfer+0x14fc>
 8007f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	461a      	mov	r2, r3
 8007f96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	011a      	lsls	r2, r3, #4
 8007fae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007fbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007fce:	801a      	strh	r2, [r3, #0]
 8007fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fd6:	d923      	bls.n	8008020 <USB_EPStartXfer+0x149c>
 8007fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fdc:	095b      	lsrs	r3, r3, #5
 8007fde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe6:	f003 031f 	and.w	r3, r3, #31
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d104      	bne.n	8007ff8 <USB_EPStartXfer+0x1474>
 8007fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007ff8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008004:	b29b      	uxth	r3, r3
 8008006:	029b      	lsls	r3, r3, #10
 8008008:	b29b      	uxth	r3, r3
 800800a:	4313      	orrs	r3, r2
 800800c:	b29b      	uxth	r3, r3
 800800e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008016:	b29a      	uxth	r2, r3
 8008018:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800801c:	801a      	strh	r2, [r3, #0]
 800801e:	e060      	b.n	80080e2 <USB_EPStartXfer+0x155e>
 8008020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10c      	bne.n	8008042 <USB_EPStartXfer+0x14be>
 8008028:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	b29b      	uxth	r3, r3
 8008030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008038:	b29a      	uxth	r2, r3
 800803a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800803e:	801a      	strh	r2, [r3, #0]
 8008040:	e04f      	b.n	80080e2 <USB_EPStartXfer+0x155e>
 8008042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008046:	085b      	lsrs	r3, r3, #1
 8008048:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800804c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	d004      	beq.n	8008062 <USB_EPStartXfer+0x14de>
 8008058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800805c:	3301      	adds	r3, #1
 800805e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	b29a      	uxth	r2, r3
 800806a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800806e:	b29b      	uxth	r3, r3
 8008070:	029b      	lsls	r3, r3, #10
 8008072:	b29b      	uxth	r3, r3
 8008074:	4313      	orrs	r3, r2
 8008076:	b29a      	uxth	r2, r3
 8008078:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800807c:	801a      	strh	r2, [r3, #0]
 800807e:	e030      	b.n	80080e2 <USB_EPStartXfer+0x155e>
 8008080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	785b      	ldrb	r3, [r3, #1]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d128      	bne.n	80080e2 <USB_EPStartXfer+0x155e>
 8008090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008094:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800809e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	461a      	mov	r2, r3
 80080b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080b4:	4413      	add	r3, r2
 80080b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80080ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	011a      	lsls	r2, r3, #4
 80080c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080cc:	4413      	add	r3, r2
 80080ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80080d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80080d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080da:	b29a      	uxth	r2, r3
 80080dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80080e0:	801a      	strh	r2, [r3, #0]
 80080e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	785b      	ldrb	r3, [r3, #1]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f040 8085 	bne.w	800820c <USB_EPStartXfer+0x1688>
 8008102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008106:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008114:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800811e:	b29b      	uxth	r3, r3
 8008120:	461a      	mov	r2, r3
 8008122:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008126:	4413      	add	r3, r2
 8008128:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800812c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	011a      	lsls	r2, r3, #4
 800813a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800813e:	4413      	add	r3, r2
 8008140:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008144:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008148:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	b29b      	uxth	r3, r3
 8008150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008154:	b29a      	uxth	r2, r3
 8008156:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800815a:	801a      	strh	r2, [r3, #0]
 800815c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008160:	2b3e      	cmp	r3, #62	@ 0x3e
 8008162:	d923      	bls.n	80081ac <USB_EPStartXfer+0x1628>
 8008164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008168:	095b      	lsrs	r3, r3, #5
 800816a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800816e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008172:	f003 031f 	and.w	r3, r3, #31
 8008176:	2b00      	cmp	r3, #0
 8008178:	d104      	bne.n	8008184 <USB_EPStartXfer+0x1600>
 800817a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800817e:	3b01      	subs	r3, #1
 8008180:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008184:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	b29a      	uxth	r2, r3
 800818c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008190:	b29b      	uxth	r3, r3
 8008192:	029b      	lsls	r3, r3, #10
 8008194:	b29b      	uxth	r3, r3
 8008196:	4313      	orrs	r3, r2
 8008198:	b29b      	uxth	r3, r3
 800819a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800819e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081a8:	801a      	strh	r2, [r3, #0]
 80081aa:	e05c      	b.n	8008266 <USB_EPStartXfer+0x16e2>
 80081ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10c      	bne.n	80081ce <USB_EPStartXfer+0x164a>
 80081b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081ca:	801a      	strh	r2, [r3, #0]
 80081cc:	e04b      	b.n	8008266 <USB_EPStartXfer+0x16e2>
 80081ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d2:	085b      	lsrs	r3, r3, #1
 80081d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80081d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d004      	beq.n	80081ee <USB_EPStartXfer+0x166a>
 80081e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081e8:	3301      	adds	r3, #1
 80081ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80081ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081f2:	881b      	ldrh	r3, [r3, #0]
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	029b      	lsls	r3, r3, #10
 80081fe:	b29b      	uxth	r3, r3
 8008200:	4313      	orrs	r3, r2
 8008202:	b29a      	uxth	r2, r3
 8008204:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008208:	801a      	strh	r2, [r3, #0]
 800820a:	e02c      	b.n	8008266 <USB_EPStartXfer+0x16e2>
 800820c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	785b      	ldrb	r3, [r3, #1]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d124      	bne.n	8008266 <USB_EPStartXfer+0x16e2>
 800821c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008220:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800822a:	b29b      	uxth	r3, r3
 800822c:	461a      	mov	r2, r3
 800822e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008232:	4413      	add	r3, r2
 8008234:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800823c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	011a      	lsls	r2, r3, #4
 8008246:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800824a:	4413      	add	r3, r2
 800824c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008250:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008258:	b29a      	uxth	r2, r3
 800825a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800825e:	801a      	strh	r2, [r3, #0]
 8008260:	e001      	b.n	8008266 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e03a      	b.n	80082dc <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800826a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	b29b      	uxth	r3, r3
 8008284:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800828c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008290:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008294:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008298:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800829c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80082a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80082a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80082a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	441a      	add	r2, r3
 80082c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80082c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b085      	sub	sp, #20
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	785b      	ldrb	r3, [r3, #1]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d020      	beq.n	800833a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	b29b      	uxth	r3, r3
 8008306:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800830a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800830e:	81bb      	strh	r3, [r7, #12]
 8008310:	89bb      	ldrh	r3, [r7, #12]
 8008312:	f083 0310 	eor.w	r3, r3, #16
 8008316:	81bb      	strh	r3, [r7, #12]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	441a      	add	r2, r3
 8008322:	89bb      	ldrh	r3, [r7, #12]
 8008324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800832c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008334:	b29b      	uxth	r3, r3
 8008336:	8013      	strh	r3, [r2, #0]
 8008338:	e01f      	b.n	800837a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	b29b      	uxth	r3, r3
 8008348:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800834c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008350:	81fb      	strh	r3, [r7, #14]
 8008352:	89fb      	ldrh	r3, [r7, #14]
 8008354:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008358:	81fb      	strh	r3, [r7, #14]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	441a      	add	r2, r3
 8008364:	89fb      	ldrh	r3, [r7, #14]
 8008366:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800836a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800836e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008376:	b29b      	uxth	r3, r3
 8008378:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	bc80      	pop	{r7}
 8008384:	4770      	bx	lr

08008386 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008386:	b480      	push	{r7}
 8008388:	b087      	sub	sp, #28
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	7b1b      	ldrb	r3, [r3, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	f040 809d 	bne.w	80084d4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	785b      	ldrb	r3, [r3, #1]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d04c      	beq.n	800843c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	823b      	strh	r3, [r7, #16]
 80083b0:	8a3b      	ldrh	r3, [r7, #16]
 80083b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d01b      	beq.n	80083f2 <USB_EPClearStall+0x6c>
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	881b      	ldrh	r3, [r3, #0]
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083d0:	81fb      	strh	r3, [r7, #14]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	441a      	add	r2, r3
 80083dc:	89fb      	ldrh	r3, [r7, #14]
 80083de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	78db      	ldrb	r3, [r3, #3]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d06c      	beq.n	80084d4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	b29b      	uxth	r3, r3
 8008408:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800840c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008410:	81bb      	strh	r3, [r7, #12]
 8008412:	89bb      	ldrh	r3, [r7, #12]
 8008414:	f083 0320 	eor.w	r3, r3, #32
 8008418:	81bb      	strh	r3, [r7, #12]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	441a      	add	r2, r3
 8008424:	89bb      	ldrh	r3, [r7, #12]
 8008426:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800842a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800842e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008436:	b29b      	uxth	r3, r3
 8008438:	8013      	strh	r3, [r2, #0]
 800843a:	e04b      	b.n	80084d4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	82fb      	strh	r3, [r7, #22]
 800844a:	8afb      	ldrh	r3, [r7, #22]
 800844c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d01b      	beq.n	800848c <USB_EPClearStall+0x106>
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800846a:	82bb      	strh	r3, [r7, #20]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	441a      	add	r2, r3
 8008476:	8abb      	ldrh	r3, [r7, #20]
 8008478:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800847c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008480:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008484:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008488:	b29b      	uxth	r3, r3
 800848a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	b29b      	uxth	r3, r3
 800849a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800849e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084a2:	827b      	strh	r3, [r7, #18]
 80084a4:	8a7b      	ldrh	r3, [r7, #18]
 80084a6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80084aa:	827b      	strh	r3, [r7, #18]
 80084ac:	8a7b      	ldrh	r3, [r7, #18]
 80084ae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80084b2:	827b      	strh	r3, [r7, #18]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	441a      	add	r2, r3
 80084be:	8a7b      	ldrh	r3, [r7, #18]
 80084c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	371c      	adds	r7, #28
 80084da:	46bd      	mov	sp, r7
 80084dc:	bc80      	pop	{r7}
 80084de:	4770      	bx	lr

080084e0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80084ec:	78fb      	ldrb	r3, [r7, #3]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d103      	bne.n	80084fa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2280      	movs	r2, #128	@ 0x80
 80084f6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	bc80      	pop	{r7}
 8008504:	4770      	bx	lr

08008506 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	bc80      	pop	{r7}
 8008518:	4770      	bx	lr

0800851a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800851a:	b480      	push	{r7}
 800851c:	b083      	sub	sp, #12
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	bc80      	pop	{r7}
 800852c:	4770      	bx	lr

0800852e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800852e:	b480      	push	{r7}
 8008530:	b085      	sub	sp, #20
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800853c:	b29b      	uxth	r3, r3
 800853e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008540:	68fb      	ldr	r3, [r7, #12]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	bc80      	pop	{r7}
 800854a:	4770      	bx	lr

0800854c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	bc80      	pop	{r7}
 8008560:	4770      	bx	lr

08008562 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008562:	b480      	push	{r7}
 8008564:	b08b      	sub	sp, #44	@ 0x2c
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	4611      	mov	r1, r2
 800856e:	461a      	mov	r2, r3
 8008570:	460b      	mov	r3, r1
 8008572:	80fb      	strh	r3, [r7, #6]
 8008574:	4613      	mov	r3, r2
 8008576:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008578:	88bb      	ldrh	r3, [r7, #4]
 800857a:	3301      	adds	r3, #1
 800857c:	085b      	lsrs	r3, r3, #1
 800857e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008588:	88fb      	ldrh	r3, [r7, #6]
 800858a:	005a      	lsls	r2, r3, #1
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008594:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	627b      	str	r3, [r7, #36]	@ 0x24
 800859a:	e01f      	b.n	80085dc <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	3301      	adds	r3, #1
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	b21b      	sxth	r3, r3
 80085aa:	021b      	lsls	r3, r3, #8
 80085ac:	b21a      	sxth	r2, r3
 80085ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	b21b      	sxth	r3, r3
 80085b6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	8a7a      	ldrh	r2, [r7, #18]
 80085bc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	3302      	adds	r3, #2
 80085c2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	3302      	adds	r3, #2
 80085c8:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	3301      	adds	r3, #1
 80085ce:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	3301      	adds	r3, #1
 80085d4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80085d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d8:	3b01      	subs	r3, #1
 80085da:	627b      	str	r3, [r7, #36]	@ 0x24
 80085dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1dc      	bne.n	800859c <USB_WritePMA+0x3a>
  }
}
 80085e2:	bf00      	nop
 80085e4:	bf00      	nop
 80085e6:	372c      	adds	r7, #44	@ 0x2c
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bc80      	pop	{r7}
 80085ec:	4770      	bx	lr

080085ee <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b08b      	sub	sp, #44	@ 0x2c
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	60f8      	str	r0, [r7, #12]
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	4611      	mov	r1, r2
 80085fa:	461a      	mov	r2, r3
 80085fc:	460b      	mov	r3, r1
 80085fe:	80fb      	strh	r3, [r7, #6]
 8008600:	4613      	mov	r3, r2
 8008602:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008604:	88bb      	ldrh	r3, [r7, #4]
 8008606:	085b      	lsrs	r3, r3, #1
 8008608:	b29b      	uxth	r3, r3
 800860a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008614:	88fb      	ldrh	r3, [r7, #6]
 8008616:	005a      	lsls	r2, r3, #1
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	4413      	add	r3, r2
 800861c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008620:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	627b      	str	r3, [r7, #36]	@ 0x24
 8008626:	e01b      	b.n	8008660 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	b29b      	uxth	r3, r3
 800862e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008630:	6a3b      	ldr	r3, [r7, #32]
 8008632:	3302      	adds	r3, #2
 8008634:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	b2da      	uxtb	r2, r3
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	3301      	adds	r3, #1
 8008642:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	0a1b      	lsrs	r3, r3, #8
 8008648:	b2da      	uxtb	r2, r3
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	3301      	adds	r3, #1
 8008652:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	3302      	adds	r3, #2
 8008658:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800865a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865c:	3b01      	subs	r3, #1
 800865e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e0      	bne.n	8008628 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008666:	88bb      	ldrh	r3, [r7, #4]
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	b29b      	uxth	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d007      	beq.n	8008682 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008672:	6a3b      	ldr	r3, [r7, #32]
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	b29b      	uxth	r3, r3
 8008678:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	b2da      	uxtb	r2, r3
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	701a      	strb	r2, [r3, #0]
  }
}
 8008682:	bf00      	nop
 8008684:	372c      	adds	r7, #44	@ 0x2c
 8008686:	46bd      	mov	sp, r7
 8008688:	bc80      	pop	{r7}
 800868a:	4770      	bx	lr

0800868c <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	460b      	mov	r3, r1
 8008696:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	7c1b      	ldrb	r3, [r3, #16]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d11c      	bne.n	80086de <USBD_CDC_Init+0x52>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80086a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086a8:	2202      	movs	r2, #2
 80086aa:	2181      	movs	r1, #129	@ 0x81
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f001 fddd 	bl	800a26c <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80086b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086b6:	2202      	movs	r2, #2
 80086b8:	2101      	movs	r1, #1
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f001 fdd6 	bl	800a26c <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_OUT_PACKET_SIZE);
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80086c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086c4:	2202      	movs	r2, #2
 80086c6:	2183      	movs	r1, #131	@ 0x83
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f001 fdcf 	bl	800a26c <USBD_LL_OpenEP>
                   CDC_IN_EP+2,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80086ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086d2:	2202      	movs	r2, #2
 80086d4:	2103      	movs	r1, #3
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f001 fdc8 	bl	800a26c <USBD_LL_OpenEP>
 80086dc:	e017      	b.n	800870e <USBD_CDC_Init+0x82>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80086de:	2340      	movs	r3, #64	@ 0x40
 80086e0:	2202      	movs	r2, #2
 80086e2:	2181      	movs	r1, #129	@ 0x81
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 fdc1 	bl	800a26c <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80086ea:	2340      	movs	r3, #64	@ 0x40
 80086ec:	2202      	movs	r2, #2
 80086ee:	2101      	movs	r1, #1
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 fdbb 	bl	800a26c <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80086f6:	2340      	movs	r3, #64	@ 0x40
 80086f8:	2202      	movs	r2, #2
 80086fa:	2183      	movs	r1, #131	@ 0x83
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f001 fdb5 	bl	800a26c <USBD_LL_OpenEP>
                   CDC_IN_EP+2,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8008702:	2340      	movs	r3, #64	@ 0x40
 8008704:	2202      	movs	r2, #2
 8008706:	2103      	movs	r1, #3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 fdaf 	bl	800a26c <USBD_LL_OpenEP>
                   CDC_OUT_EP+2,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800870e:	2308      	movs	r3, #8
 8008710:	2203      	movs	r2, #3
 8008712:	2182      	movs	r1, #130	@ 0x82
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 fda9 	bl	800a26c <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);

  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800871a:	2308      	movs	r3, #8
 800871c:	2203      	movs	r2, #3
 800871e:	2184      	movs	r1, #132	@ 0x84
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 fda3 	bl	800a26c <USBD_LL_OpenEP>
                 CDC_CMD_EP+2,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8008726:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800872a:	f001 ff69 	bl	800a600 <USBD_static_malloc>
 800872e:	4602      	mov	r2, r0
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
  
  if(pdev->pClassData == NULL)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800873c:	2b00      	cmp	r3, #0
 800873e:	d102      	bne.n	8008746 <USBD_CDC_Init+0xba>
  {
    ret = 1; 
 8008740:	2301      	movs	r3, #1
 8008742:	73fb      	strb	r3, [r7, #15]
 8008744:	e037      	b.n	80087b6 <USBD_CDC_Init+0x12a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800874c:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	2200      	movs	r2, #0
 800875c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState =0;
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2200      	movs	r2, #0
 8008764:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	7c1b      	ldrb	r3, [r3, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d112      	bne.n	8008796 <USBD_CDC_Init+0x10a>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008776:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800877a:	2101      	movs	r1, #1
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f001 fef1 	bl	800a564 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_HS_OUT_PACKET_SIZE);
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008788:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800878c:	2103      	movs	r1, #3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f001 fee8 	bl	800a564 <USBD_LL_PrepareReceive>
 8008794:	e00f      	b.n	80087b6 <USBD_CDC_Init+0x12a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800879c:	2340      	movs	r3, #64	@ 0x40
 800879e:	2101      	movs	r1, #1
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f001 fedf 	bl	800a564 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087ac:	2340      	movs	r3, #64	@ 0x40
 80087ae:	2103      	movs	r1, #3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f001 fed7 	bl	800a564 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80087cc:	2300      	movs	r3, #0
 80087ce:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 80087d0:	2181      	movs	r1, #129	@ 0x81
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f001 fd88 	bl	800a2e8 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 80087d8:	2101      	movs	r1, #1
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f001 fd84 	bl	800a2e8 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 80087e0:	2182      	movs	r1, #130	@ 0x82
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f001 fd80 	bl	800a2e8 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 80087e8:	2183      	movs	r1, #131	@ 0x83
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f001 fd7c 	bl	800a2e8 <USBD_LL_CloseEP>
              CDC_IN_EP+2);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 80087f0:	2103      	movs	r1, #3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f001 fd78 	bl	800a2e8 <USBD_LL_CloseEP>
              CDC_OUT_EP+2);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 80087f8:	2184      	movs	r1, #132	@ 0x84
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f001 fd74 	bl	800a2e8 <USBD_LL_CloseEP>
              CDC_CMD_EP+2);
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00e      	beq.n	8008828 <USBD_CDC_DeInit+0x68>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800881a:	4618      	mov	r0, r3
 800881c:	f001 fefc 	bl	800a618 <USBD_static_free>
    pdev->pClassData = NULL;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
  }
  
  return ret;
 8008828:	7bfb      	ldrb	r3, [r7, #15]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
	...

08008834 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8008834:	b590      	push	{r4, r7, lr}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008844:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800884e:	2b00      	cmp	r3, #0
 8008850:	d03d      	beq.n	80088ce <USBD_CDC_Setup+0x9a>
 8008852:	2b20      	cmp	r3, #32
 8008854:	d147      	bne.n	80088e6 <USBD_CDC_Setup+0xb2>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	88db      	ldrh	r3, [r3, #6]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d02b      	beq.n	80088b6 <USBD_CDC_Setup+0x82>
    {
      if (req->bmRequest & 0x80)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	b25b      	sxtb	r3, r3
 8008864:	2b00      	cmp	r3, #0
 8008866:	da13      	bge.n	8008890 <USBD_CDC_Setup+0x5c>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800886e:	689c      	ldr	r4, [r3, #8]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	7858      	ldrb	r0, [r3, #1]
                                                          (uint8_t *)hcdc->data,
 8008874:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	88da      	ldrh	r2, [r3, #6]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	889b      	ldrh	r3, [r3, #4]
 800887e:	47a0      	blx	r4
                                                          req->wLength, 
                                                          req->wIndex);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hcdc->data,
 8008880:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	88db      	ldrh	r3, [r3, #6]
 8008886:	461a      	mov	r2, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 f832 	bl	80098f2 <USBD_CtlSendData>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0,
                                                        req->wIndex);
    }
    break;
 800888e:	e02b      	b.n	80088e8 <USBD_CDC_Setup+0xb4>
        hcdc->CmdOpCode = req->bRequest;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	785a      	ldrb	r2, [r3, #1]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = req->wLength;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	88db      	ldrh	r3, [r3, #6]
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
                           (uint8_t *)hcdc->data,
 80088a6:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	88db      	ldrh	r3, [r3, #6]
 80088ac:	461a      	mov	r2, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f001 f84d 	bl	800994e <USBD_CtlPrepareRx>
    break;
 80088b4:	e018      	b.n	80088e8 <USBD_CDC_Setup+0xb4>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80088bc:	689c      	ldr	r4, [r3, #8]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	7858      	ldrb	r0, [r3, #1]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	889b      	ldrh	r3, [r3, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	6839      	ldr	r1, [r7, #0]
 80088ca:	47a0      	blx	r4
    break;
 80088cc:	e00c      	b.n	80088e8 <USBD_CDC_Setup+0xb4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	785b      	ldrb	r3, [r3, #1]
 80088d2:	2b0a      	cmp	r3, #10
 80088d4:	d001      	beq.n	80088da <USBD_CDC_Setup+0xa6>
 80088d6:	2b0b      	cmp	r3, #11
                        &ifalt,
                        1);
      break;
      
    case USB_REQ_SET_INTERFACE :
      break;
 80088d8:	e005      	b.n	80088e6 <USBD_CDC_Setup+0xb2>
      USBD_CtlSendData (pdev,
 80088da:	2201      	movs	r2, #1
 80088dc:	4905      	ldr	r1, [pc, #20]	@ (80088f4 <USBD_CDC_Setup+0xc0>)
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f001 f807 	bl	80098f2 <USBD_CtlSendData>
      break;
 80088e4:	bf00      	nop
    }
 
  default: 
    break;
 80088e6:	bf00      	nop
  }
  return USBD_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd90      	pop	{r4, r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20002768 	.word	0x20002768

080088f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800890a:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008912:	2b00      	cmp	r3, #0
 8008914:	d005      	beq.n	8008922 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    return USBD_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	e000      	b.n	8008924 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8008922:	2302      	movs	r3, #2
  }
}
 8008924:	4618      	mov	r0, r3
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	bc80      	pop	{r7}
 800892c:	4770      	bx	lr

0800892e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800892e:	b580      	push	{r7, lr}
 8008930:	b084      	sub	sp, #16
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	460b      	mov	r3, r1
 8008938:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008940:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008942:	78fb      	ldrb	r3, [r7, #3]
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f001 fe46 	bl	800a5d8 <USBD_LL_GetRxDataSize>
 800894c:	4602      	mov	r2, r0
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800895a:	2b00      	cmp	r3, #0
 800895c:	d012      	beq.n	8008984 <USBD_CDC_DataOut+0x56>
  {    
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength, (epnum == CDC_OUT_EP) ? 0 : 2);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	f502 7103 	add.w	r1, r2, #524	@ 0x20c
 8008972:	78fa      	ldrb	r2, [r7, #3]
 8008974:	2a01      	cmp	r2, #1
 8008976:	d101      	bne.n	800897c <USBD_CDC_DataOut+0x4e>
 8008978:	2200      	movs	r2, #0
 800897a:	e000      	b.n	800897e <USBD_CDC_DataOut+0x50>
 800897c:	2202      	movs	r2, #2
 800897e:	4798      	blx	r3

    return USBD_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	e000      	b.n	8008986 <USBD_CDC_DataOut+0x58>
  }
  else
  {
    return USBD_FAIL;
 8008984:	2302      	movs	r3, #2
  }
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800898e:	b590      	push	{r4, r7, lr}
 8008990:	b085      	sub	sp, #20
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800899c:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d018      	beq.n	80089da <USBD_CDC_EP0_RxReady+0x4c>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80089ae:	2bff      	cmp	r3, #255	@ 0xff
 80089b0:	d013      	beq.n	80089da <USBD_CDC_EP0_RxReady+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80089b8:	689c      	ldr	r4, [r3, #8]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f893 0200 	ldrb.w	r0, [r3, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 80089c0:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength, 
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80089c8:	461a      	mov	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 80089d0:	47a0      	blx	r4
                                                      pdev->request.wIndex);
      hcdc->CmdOpCode = 0xFF; 
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	22ff      	movs	r2, #255	@ 0xff
 80089d6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
      
  }
  return USBD_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd90      	pop	{r4, r7, pc}

080089e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	228d      	movs	r2, #141	@ 0x8d
 80089f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80089f2:	4b03      	ldr	r3, [pc, #12]	@ (8008a00 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bc80      	pop	{r7}
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	200000e0 	.word	0x200000e0

08008a04 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	228d      	movs	r2, #141	@ 0x8d
 8008a10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008a12:	4b03      	ldr	r3, [pc, #12]	@ (8008a20 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bc80      	pop	{r7}
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	20000050 	.word	0x20000050

08008a24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	228d      	movs	r2, #141	@ 0x8d
 8008a30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008a32:	4b03      	ldr	r3, [pc, #12]	@ (8008a40 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bc80      	pop	{r7}
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	20000170 	.word	0x20000170

08008a44 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	220a      	movs	r2, #10
 8008a50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008a52:	4b03      	ldr	r3, [pc, #12]	@ (8008a60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bc80      	pop	{r7}
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	2000000c 	.word	0x2000000c

08008a64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008a6e:	2302      	movs	r3, #2
 8008a70:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d005      	beq.n	8008a84 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    ret = USBD_OK;    
 8008a80:	2300      	movs	r3, #0
 8008a82:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bc80      	pop	{r7}
 8008a8e:	4770      	bx	lr

08008a90 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b087      	sub	sp, #28
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008aa4:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;  
 8008aae:	88fa      	ldrh	r2, [r7, #6]
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  
  return USBD_OK;  
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	371c      	adds	r7, #28
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bc80      	pop	{r7}
 8008ac0:	4770      	bx	lr

08008ac2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b085      	sub	sp, #20
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008ad2:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  
  return USBD_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bc80      	pop	{r7}
 8008ae6:	4770      	bx	lr

08008ae8 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint16_t index)
{      
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	807b      	strh	r3, [r7, #2]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008afa:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d01c      	beq.n	8008b40 <USBD_CDC_TransmitPacket+0x58>
  {
    if(hcdc->TxState == 0)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d115      	bne.n	8008b3c <USBD_CDC_TransmitPacket+0x54>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
      /* Transmit next packet */      
      USBD_LL_Transmit(pdev,
 8008b18:	887b      	ldrh	r3, [r7, #2]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d801      	bhi.n	8008b22 <USBD_CDC_TransmitPacket+0x3a>
 8008b1e:	2181      	movs	r1, #129	@ 0x81
 8008b20:	e000      	b.n	8008b24 <USBD_CDC_TransmitPacket+0x3c>
 8008b22:	2183      	movs	r1, #131	@ 0x83
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (index < 2) ? CDC_IN_EP : (CDC_IN_EP+2),
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev,
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 fcdc 	bl	800a4f0 <USBD_LL_Transmit>
      
      return USBD_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	e002      	b.n	8008b42 <USBD_CDC_TransmitPacket+0x5a>
    }
    else
    {
      return USBD_BUSY;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e000      	b.n	8008b42 <USBD_CDC_TransmitPacket+0x5a>
    }
  }
  else
  {
    return USBD_FAIL;
 8008b40:	2302      	movs	r3, #2
  }
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev, uint16_t index)
{      
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	807b      	strh	r3, [r7, #2]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008b5c:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d021      	beq.n	8008bac <USBD_CDC_ReceivePacket+0x62>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	7c1b      	ldrb	r3, [r3, #16]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10e      	bne.n	8008b8e <USBD_CDC_ReceivePacket+0x44>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008b70:	887b      	ldrh	r3, [r7, #2]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d801      	bhi.n	8008b7a <USBD_CDC_ReceivePacket+0x30>
 8008b76:	2101      	movs	r1, #1
 8008b78:	e000      	b.n	8008b7c <USBD_CDC_ReceivePacket+0x32>
 8008b7a:	2103      	movs	r1, #3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f001 fcec 	bl	800a564 <USBD_LL_PrepareReceive>
 8008b8c:	e00c      	b.n	8008ba8 <USBD_CDC_ReceivePacket+0x5e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008b8e:	887b      	ldrh	r3, [r7, #2]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d801      	bhi.n	8008b98 <USBD_CDC_ReceivePacket+0x4e>
 8008b94:	2101      	movs	r1, #1
 8008b96:	e000      	b.n	8008b9a <USBD_CDC_ReceivePacket+0x50>
 8008b98:	2103      	movs	r1, #3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ba0:	2340      	movs	r3, #64	@ 0x40
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f001 fcde 	bl	800a564 <USBD_LL_PrepareReceive>
                             (index < 2) ? CDC_OUT_EP : (CDC_OUT_EP+2),
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	e000      	b.n	8008bae <USBD_CDC_ReceivePacket+0x64>
  }
  else
  {
    return USBD_FAIL;
 8008bac:	2302      	movs	r3, #2
  }
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	60b9      	str	r1, [r7, #8]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e01a      	b.n	8008c04 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d003      	beq.n	8008be0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
  pdev->id = id;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	79fa      	ldrb	r2, [r7, #7]
 8008bfa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f001 fa87 	bl	800a110 <USBD_LL_Init>
  
  return USBD_OK; 
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d006      	beq.n	8008c2e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    status = USBD_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]
 8008c2c:	e001      	b.n	8008c32 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8008c2e:	2302      	movs	r3, #2
 8008c30:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bc80      	pop	{r7}
 8008c3c:	4770      	bx	lr

08008c3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b082      	sub	sp, #8
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f001 fade 	bl	800a208 <USBD_LL_Start>
  
  return USBD_OK;  
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8008c56:	b480      	push	{r7}
 8008c58:	b083      	sub	sp, #12
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bc80      	pop	{r7}
 8008c68:	4770      	bx	lr

08008c6a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	460b      	mov	r3, r1
 8008c74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008c76:	2302      	movs	r3, #2
 8008c78:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00c      	beq.n	8008c9e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	78fa      	ldrb	r2, [r7, #3]
 8008c8e:	4611      	mov	r1, r2
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	4798      	blx	r3
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	78fa      	ldrb	r2, [r7, #3]
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	4798      	blx	r3
  return USBD_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 fd62 	bl	80097aa <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8008d02:	f003 031f 	and.w	r3, r3, #31
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d016      	beq.n	8008d38 <USBD_LL_SetupStage+0x6a>
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	dc1c      	bgt.n	8008d48 <USBD_LL_SetupStage+0x7a>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <USBD_LL_SetupStage+0x4a>
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d008      	beq.n	8008d28 <USBD_LL_SetupStage+0x5a>
 8008d16:	e017      	b.n	8008d48 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f987 	bl	8009034 <USBD_StdDevReq>
    break;
 8008d26:	e01a      	b.n	8008d5e <USBD_LL_SetupStage+0x90>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f9cf 	bl	80090d4 <USBD_StdItfReq>
    break;
 8008d36:	e012      	b.n	8008d5e <USBD_LL_SetupStage+0x90>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f9fa 	bl	800913a <USBD_StdEPReq>
    break;
 8008d46:	e00a      	b.n	8008d5e <USBD_LL_SetupStage+0x90>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8008d4e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f001 fafc 	bl	800a354 <USBD_LL_StallEP>
    break;
 8008d5c:	bf00      	nop
  }  
  return USBD_OK;  
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	460b      	mov	r3, r1
 8008d72:	607a      	str	r2, [r7, #4]
 8008d74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8008d76:	7afb      	ldrb	r3, [r7, #11]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d138      	bne.n	8008dee <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8008d82:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f8d3 31f4 	ldr.w	r3, [r3, #500]	@ 0x1f4
 8008d8a:	2b03      	cmp	r3, #3
 8008d8c:	d142      	bne.n	8008e14 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	689a      	ldr	r2, [r3, #8]
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d914      	bls.n	8008dc4 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	689a      	ldr	r2, [r3, #8]
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	1ad2      	subs	r2, r2, r3
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	68da      	ldr	r2, [r3, #12]
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	4293      	cmp	r3, r2
 8008db2:	bf28      	it	cs
 8008db4:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	461a      	mov	r2, r3
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 fde4 	bl	800998a <USBD_CtlContinueRx>
 8008dc2:	e027      	b.n	8008e14 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00a      	beq.n	8008de6 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d105      	bne.n	8008de6 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f000 fde1 	bl	80099ae <USBD_CtlSendStatus>
 8008dec:	e012      	b.n	8008e14 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00c      	beq.n	8008e14 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8008e00:	2b03      	cmp	r3, #3
 8008e02:	d107      	bne.n	8008e14 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	7afa      	ldrb	r2, [r7, #11]
 8008e0e:	4611      	mov	r1, r2
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	4798      	blx	r3
  }  
  return USBD_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3718      	adds	r7, #24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b086      	sub	sp, #24
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	60f8      	str	r0, [r7, #12]
 8008e26:	460b      	mov	r3, r1
 8008e28:	607a      	str	r2, [r7, #4]
 8008e2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8008e2c:	7afb      	ldrb	r3, [r7, #11]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d16c      	bne.n	8008f0c <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3314      	adds	r3, #20
 8008e36:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	@ 0x1f4
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d157      	bne.n	8008ef2 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	689a      	ldr	r2, [r3, #8]
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d915      	bls.n	8008e7a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	689a      	ldr	r2, [r3, #8]
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	1ad2      	subs	r2, r2, r3
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	461a      	mov	r2, r3
 8008e64:	6879      	ldr	r1, [r7, #4]
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 fd5f 	bl	800992a <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2100      	movs	r1, #0
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f001 fb76 	bl	800a564 <USBD_LL_PrepareReceive>
 8008e78:	e03b      	b.n	8008ef2 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	68d2      	ldr	r2, [r2, #12]
 8008e82:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e86:	fb01 f202 	mul.w	r2, r1, r2
 8008e8a:	1a9b      	subs	r3, r3, r2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d11c      	bne.n	8008eca <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d316      	bcc.n	8008eca <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8d3 31f8 	ldr.w	r3, [r3, #504]	@ 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d20f      	bcs.n	8008eca <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8008eaa:	2200      	movs	r2, #0
 8008eac:	2100      	movs	r1, #0
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f000 fd3b 	bl	800992a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f001 fb4e 	bl	800a564 <USBD_LL_PrepareReceive>
 8008ec8:	e013      	b.n	8008ef2 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00a      	beq.n	8008eec <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008edc:	2b03      	cmp	r3, #3
 8008ede:	d105      	bne.n	8008eec <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f000 fd71 	bl	80099d4 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d11a      	bne.n	8008f32 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f7ff feaa 	bl	8008c56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
 8008f0a:	e012      	b.n	8008f32 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008f12:	695b      	ldr	r3, [r3, #20]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00c      	beq.n	8008f32 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8008f1e:	2b03      	cmp	r3, #3
 8008f20:	d107      	bne.n	8008f32 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	7afa      	ldrb	r2, [r7, #11]
 8008f2c:	4611      	mov	r1, r2
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	4798      	blx	r3
  }  
  return USBD_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3718      	adds	r7, #24
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8008f44:	2340      	movs	r3, #64	@ 0x40
 8008f46:	2200      	movs	r2, #0
 8008f48:	2100      	movs	r1, #0
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f001 f98e 	bl	800a26c <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2240      	movs	r2, #64	@ 0x40
 8008f54:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8008f58:	2340      	movs	r3, #64	@ 0x40
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	2180      	movs	r1, #128	@ 0x80
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f001 f984 	bl	800a26c <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2240      	movs	r2, #64	@ 0x40
 8008f68:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
  
  if (pdev->pClassData) 
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d009      	beq.n	8008f90 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	6852      	ldr	r2, [r2, #4]
 8008f88:	b2d2      	uxtb	r2, r2
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	4798      	blx	r3
 
  
  return USBD_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b083      	sub	sp, #12
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	78fa      	ldrb	r2, [r7, #3]
 8008faa:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bc80      	pop	{r7}
 8008fb6:	4770      	bx	lr

08008fb8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 21fc 	ldrb.w	r2, [r3, #508]	@ 0x1fc
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2204      	movs	r2, #4
 8008fd0:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
  return USBD_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bc80      	pop	{r7}
 8008fde:	4770      	bx	lr

08008fe0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 21fd 	ldrb.w	r2, [r3, #509]	@ 0x1fd
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
  return USBD_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bc80      	pop	{r7}
 8008ffe:	4770      	bx	lr

08009000 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 800900e:	2b03      	cmp	r3, #3
 8009010:	d10b      	bne.n	800902a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009018:	69db      	ldr	r3, [r3, #28]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d005      	beq.n	800902a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009024:	69db      	ldr	r3, [r3, #28]
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800903e:	2300      	movs	r3, #0
 8009040:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	785b      	ldrb	r3, [r3, #1]
 8009046:	2b09      	cmp	r3, #9
 8009048:	d839      	bhi.n	80090be <USBD_StdDevReq+0x8a>
 800904a:	a201      	add	r2, pc, #4	@ (adr r2, 8009050 <USBD_StdDevReq+0x1c>)
 800904c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009050:	080090a1 	.word	0x080090a1
 8009054:	080090b5 	.word	0x080090b5
 8009058:	080090bf 	.word	0x080090bf
 800905c:	080090ab 	.word	0x080090ab
 8009060:	080090bf 	.word	0x080090bf
 8009064:	08009083 	.word	0x08009083
 8009068:	08009079 	.word	0x08009079
 800906c:	080090bf 	.word	0x080090bf
 8009070:	08009097 	.word	0x08009097
 8009074:	0800908d 	.word	0x0800908d
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f93a 	bl	80092f4 <USBD_GetDescriptor>
    break;
 8009080:	e022      	b.n	80090c8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fa29 	bl	80094dc <USBD_SetAddress>
    break;
 800908a:	e01d      	b.n	80090c8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fa64 	bl	800955c <USBD_SetConfig>
    break;
 8009094:	e018      	b.n	80090c8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fae7 	bl	800966c <USBD_GetConfig>
    break;
 800909e:	e013      	b.n	80090c8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fb14 	bl	80096d0 <USBD_GetStatus>
    break;
 80090a8:	e00e      	b.n	80090c8 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fb39 	bl	8009724 <USBD_SetFeature>
    break;
 80090b2:	e009      	b.n	80090c8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fb4f 	bl	800975a <USBD_ClrFeature>
    break;
 80090bc:	e004      	b.n	80090c8 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fbab 	bl	800981c <USBD_CtlError>
    break;
 80090c6:	bf00      	nop
  }
  
  return ret;
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop

080090d4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80090de:	2300      	movs	r3, #0
 80090e0:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d11b      	bne.n	8009124 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	889b      	ldrh	r3, [r3, #4]
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b03      	cmp	r3, #3
 80090f4:	d811      	bhi.n	800911a <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	6839      	ldr	r1, [r7, #0]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	88db      	ldrh	r3, [r3, #6]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d110      	bne.n	800912e <USBD_StdItfReq+0x5a>
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10d      	bne.n	800912e <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fc4b 	bl	80099ae <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8009118:	e009      	b.n	800912e <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fb7d 	bl	800981c <USBD_CtlError>
    break;
 8009122:	e004      	b.n	800912e <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fb78 	bl	800981c <USBD_CtlError>
    break;
 800912c:	e000      	b.n	8009130 <USBD_StdItfReq+0x5c>
    break;
 800912e:	bf00      	nop
  }
  return USBD_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8009144:	2300      	movs	r3, #0
 8009146:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	889b      	ldrh	r3, [r3, #4]
 800914c:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009156:	2b20      	cmp	r3, #32
 8009158:	d108      	bne.n	800916c <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	4798      	blx	r3
    
    return USBD_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	e0be      	b.n	80092ea <USBD_StdEPReq+0x1b0>
  }
  
  switch (req->bRequest) 
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	785b      	ldrb	r3, [r3, #1]
 8009170:	2b03      	cmp	r3, #3
 8009172:	d007      	beq.n	8009184 <USBD_StdEPReq+0x4a>
 8009174:	2b03      	cmp	r3, #3
 8009176:	f300 80b6 	bgt.w	80092e6 <USBD_StdEPReq+0x1ac>
 800917a:	2b00      	cmp	r3, #0
 800917c:	d06d      	beq.n	800925a <USBD_StdEPReq+0x120>
 800917e:	2b01      	cmp	r3, #1
 8009180:	d035      	beq.n	80091ee <USBD_StdEPReq+0xb4>
      break;
    }
    break;
    
  default:
    break;
 8009182:	e0b0      	b.n	80092e6 <USBD_StdEPReq+0x1ac>
    switch (pdev->dev_state) 
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 800918a:	2b02      	cmp	r3, #2
 800918c:	d002      	beq.n	8009194 <USBD_StdEPReq+0x5a>
 800918e:	2b03      	cmp	r3, #3
 8009190:	d00c      	beq.n	80091ac <USBD_StdEPReq+0x72>
 8009192:	e025      	b.n	80091e0 <USBD_StdEPReq+0xa6>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8009194:	7bbb      	ldrb	r3, [r7, #14]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d027      	beq.n	80091ea <USBD_StdEPReq+0xb0>
 800919a:	7bbb      	ldrb	r3, [r7, #14]
 800919c:	2b80      	cmp	r3, #128	@ 0x80
 800919e:	d024      	beq.n	80091ea <USBD_StdEPReq+0xb0>
        USBD_LL_StallEP(pdev , ep_addr);
 80091a0:	7bbb      	ldrb	r3, [r7, #14]
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f001 f8d5 	bl	800a354 <USBD_LL_StallEP>
      break;	
 80091aa:	e01e      	b.n	80091ea <USBD_StdEPReq+0xb0>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	885b      	ldrh	r3, [r3, #2]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10a      	bne.n	80091ca <USBD_StdEPReq+0x90>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80091b4:	7bbb      	ldrb	r3, [r7, #14]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d007      	beq.n	80091ca <USBD_StdEPReq+0x90>
 80091ba:	7bbb      	ldrb	r3, [r7, #14]
 80091bc:	2b80      	cmp	r3, #128	@ 0x80
 80091be:	d004      	beq.n	80091ca <USBD_StdEPReq+0x90>
          USBD_LL_StallEP(pdev , ep_addr);
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f001 f8c5 	bl	800a354 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 fbe8 	bl	80099ae <USBD_CtlSendStatus>
      break;
 80091de:	e005      	b.n	80091ec <USBD_StdEPReq+0xb2>
      USBD_CtlError(pdev , req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fb1a 	bl	800981c <USBD_CtlError>
      break;    
 80091e8:	e000      	b.n	80091ec <USBD_StdEPReq+0xb2>
      break;	
 80091ea:	bf00      	nop
    break;
 80091ec:	e07c      	b.n	80092e8 <USBD_StdEPReq+0x1ae>
    switch (pdev->dev_state) 
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d002      	beq.n	80091fe <USBD_StdEPReq+0xc4>
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d00c      	beq.n	8009216 <USBD_StdEPReq+0xdc>
 80091fc:	e024      	b.n	8009248 <USBD_StdEPReq+0x10e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80091fe:	7bbb      	ldrb	r3, [r7, #14]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d026      	beq.n	8009252 <USBD_StdEPReq+0x118>
 8009204:	7bbb      	ldrb	r3, [r7, #14]
 8009206:	2b80      	cmp	r3, #128	@ 0x80
 8009208:	d023      	beq.n	8009252 <USBD_StdEPReq+0x118>
        USBD_LL_StallEP(pdev , ep_addr);
 800920a:	7bbb      	ldrb	r3, [r7, #14]
 800920c:	4619      	mov	r1, r3
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f001 f8a0 	bl	800a354 <USBD_LL_StallEP>
      break;	
 8009214:	e01d      	b.n	8009252 <USBD_StdEPReq+0x118>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	885b      	ldrh	r3, [r3, #2]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d11b      	bne.n	8009256 <USBD_StdEPReq+0x11c>
        if ((ep_addr & 0x7F) != 0x00) 
 800921e:	7bbb      	ldrb	r3, [r7, #14]
 8009220:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00b      	beq.n	8009240 <USBD_StdEPReq+0x106>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f001 f8c7 	bl	800a3c0 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	6839      	ldr	r1, [r7, #0]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fbb4 	bl	80099ae <USBD_CtlSendStatus>
      break;
 8009246:	e006      	b.n	8009256 <USBD_StdEPReq+0x11c>
      USBD_CtlError(pdev , req);
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fae6 	bl	800981c <USBD_CtlError>
      break;    
 8009250:	e002      	b.n	8009258 <USBD_StdEPReq+0x11e>
      break;	
 8009252:	bf00      	nop
 8009254:	e048      	b.n	80092e8 <USBD_StdEPReq+0x1ae>
      break;
 8009256:	bf00      	nop
    break;
 8009258:	e046      	b.n	80092e8 <USBD_StdEPReq+0x1ae>
    switch (pdev->dev_state) 
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 8009260:	2b02      	cmp	r3, #2
 8009262:	d002      	beq.n	800926a <USBD_StdEPReq+0x130>
 8009264:	2b03      	cmp	r3, #3
 8009266:	d00b      	beq.n	8009280 <USBD_StdEPReq+0x146>
 8009268:	e036      	b.n	80092d8 <USBD_StdEPReq+0x19e>
      if ((ep_addr & 0x7F) != 0x00) 
 800926a:	7bbb      	ldrb	r3, [r7, #14]
 800926c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009270:	2b00      	cmp	r3, #0
 8009272:	d036      	beq.n	80092e2 <USBD_StdEPReq+0x1a8>
        USBD_LL_StallEP(pdev , ep_addr);
 8009274:	7bbb      	ldrb	r3, [r7, #14]
 8009276:	4619      	mov	r1, r3
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f001 f86b 	bl	800a354 <USBD_LL_StallEP>
      break;	
 800927e:	e030      	b.n	80092e2 <USBD_StdEPReq+0x1a8>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8009280:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009284:	2b00      	cmp	r3, #0
 8009286:	da08      	bge.n	800929a <USBD_StdEPReq+0x160>
 8009288:	7bbb      	ldrb	r3, [r7, #14]
 800928a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800928e:	3301      	adds	r3, #1
 8009290:	011b      	lsls	r3, r3, #4
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	4413      	add	r3, r2
 8009296:	3304      	adds	r3, #4
 8009298:	e007      	b.n	80092aa <USBD_StdEPReq+0x170>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800929a:	7bbb      	ldrb	r3, [r7, #14]
 800929c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80092a0:	3310      	adds	r3, #16
 80092a2:	011b      	lsls	r3, r3, #4
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	4413      	add	r3, r2
 80092a8:	3304      	adds	r3, #4
 80092aa:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80092ac:	7bbb      	ldrb	r3, [r7, #14]
 80092ae:	4619      	mov	r1, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f001 f8bb 	bl	800a42c <USBD_LL_IsStallEP>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d003      	beq.n	80092c4 <USBD_StdEPReq+0x18a>
        pep->status = 0x0001;     
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2201      	movs	r2, #1
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	e002      	b.n	80092ca <USBD_StdEPReq+0x190>
        pep->status = 0x0000;  
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	2200      	movs	r2, #0
 80092c8:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 80092ca:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 80092cc:	2202      	movs	r2, #2
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fb0e 	bl	80098f2 <USBD_CtlSendData>
      break;
 80092d6:	e005      	b.n	80092e4 <USBD_StdEPReq+0x1aa>
      USBD_CtlError(pdev , req);
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fa9e 	bl	800981c <USBD_CtlError>
      break;
 80092e0:	e000      	b.n	80092e4 <USBD_StdEPReq+0x1aa>
      break;	
 80092e2:	bf00      	nop
    break;
 80092e4:	e000      	b.n	80092e8 <USBD_StdEPReq+0x1ae>
    break;
 80092e6:	bf00      	nop
  }
  return ret;
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
	...

080092f4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	885b      	ldrh	r3, [r3, #2]
 8009302:	0a1b      	lsrs	r3, r3, #8
 8009304:	b29b      	uxth	r3, r3
 8009306:	3b01      	subs	r3, #1
 8009308:	2b06      	cmp	r3, #6
 800930a:	f200 80c9 	bhi.w	80094a0 <USBD_GetDescriptor+0x1ac>
 800930e:	a201      	add	r2, pc, #4	@ (adr r2, 8009314 <USBD_GetDescriptor+0x20>)
 8009310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009314:	08009331 	.word	0x08009331
 8009318:	08009349 	.word	0x08009349
 800931c:	08009389 	.word	0x08009389
 8009320:	080094a1 	.word	0x080094a1
 8009324:	080094a1 	.word	0x080094a1
 8009328:	0800944d 	.word	0x0800944d
 800932c:	08009473 	.word	0x08009473
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	7c12      	ldrb	r2, [r2, #16]
 800933c:	f107 010a 	add.w	r1, r7, #10
 8009340:	4610      	mov	r0, r2
 8009342:	4798      	blx	r3
 8009344:	60f8      	str	r0, [r7, #12]
    break;
 8009346:	e0b0      	b.n	80094aa <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	7c1b      	ldrb	r3, [r3, #16]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10d      	bne.n	800936c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009358:	f107 020a 	add.w	r2, r7, #10
 800935c:	4610      	mov	r0, r2
 800935e:	4798      	blx	r3
 8009360:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	3301      	adds	r3, #1
 8009366:	2202      	movs	r2, #2
 8009368:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800936a:	e09e      	b.n	80094aa <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009374:	f107 020a 	add.w	r2, r7, #10
 8009378:	4610      	mov	r0, r2
 800937a:	4798      	blx	r3
 800937c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	3301      	adds	r3, #1
 8009382:	2202      	movs	r2, #2
 8009384:	701a      	strb	r2, [r3, #0]
    break;
 8009386:	e090      	b.n	80094aa <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	885b      	ldrh	r3, [r3, #2]
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b05      	cmp	r3, #5
 8009390:	d856      	bhi.n	8009440 <USBD_GetDescriptor+0x14c>
 8009392:	a201      	add	r2, pc, #4	@ (adr r2, 8009398 <USBD_GetDescriptor+0xa4>)
 8009394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009398:	080093b1 	.word	0x080093b1
 800939c:	080093c9 	.word	0x080093c9
 80093a0:	080093e1 	.word	0x080093e1
 80093a4:	080093f9 	.word	0x080093f9
 80093a8:	08009411 	.word	0x08009411
 80093ac:	08009429 	.word	0x08009429
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	7c12      	ldrb	r2, [r2, #16]
 80093bc:	f107 010a 	add.w	r1, r7, #10
 80093c0:	4610      	mov	r0, r2
 80093c2:	4798      	blx	r3
 80093c4:	60f8      	str	r0, [r7, #12]
      break;
 80093c6:	e040      	b.n	800944a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	7c12      	ldrb	r2, [r2, #16]
 80093d4:	f107 010a 	add.w	r1, r7, #10
 80093d8:	4610      	mov	r0, r2
 80093da:	4798      	blx	r3
 80093dc:	60f8      	str	r0, [r7, #12]
      break;
 80093de:	e034      	b.n	800944a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	7c12      	ldrb	r2, [r2, #16]
 80093ec:	f107 010a 	add.w	r1, r7, #10
 80093f0:	4610      	mov	r0, r2
 80093f2:	4798      	blx	r3
 80093f4:	60f8      	str	r0, [r7, #12]
      break;
 80093f6:	e028      	b.n	800944a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	7c12      	ldrb	r2, [r2, #16]
 8009404:	f107 010a 	add.w	r1, r7, #10
 8009408:	4610      	mov	r0, r2
 800940a:	4798      	blx	r3
 800940c:	60f8      	str	r0, [r7, #12]
      break;
 800940e:	e01c      	b.n	800944a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	7c12      	ldrb	r2, [r2, #16]
 800941c:	f107 010a 	add.w	r1, r7, #10
 8009420:	4610      	mov	r0, r2
 8009422:	4798      	blx	r3
 8009424:	60f8      	str	r0, [r7, #12]
      break;
 8009426:	e010      	b.n	800944a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	7c12      	ldrb	r2, [r2, #16]
 8009434:	f107 010a 	add.w	r1, r7, #10
 8009438:	4610      	mov	r0, r2
 800943a:	4798      	blx	r3
 800943c:	60f8      	str	r0, [r7, #12]
      break;
 800943e:	e004      	b.n	800944a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f9ea 	bl	800981c <USBD_CtlError>
      return;
 8009448:	e044      	b.n	80094d4 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 800944a:	e02e      	b.n	80094aa <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	7c1b      	ldrb	r3, [r3, #16]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d109      	bne.n	8009468 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800945a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800945c:	f107 020a 	add.w	r2, r7, #10
 8009460:	4610      	mov	r0, r2
 8009462:	4798      	blx	r3
 8009464:	60f8      	str	r0, [r7, #12]
      break;
 8009466:	e020      	b.n	80094aa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f9d6 	bl	800981c <USBD_CtlError>
      return;
 8009470:	e030      	b.n	80094d4 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	7c1b      	ldrb	r3, [r3, #16]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10d      	bne.n	8009496 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009482:	f107 020a 	add.w	r2, r7, #10
 8009486:	4610      	mov	r0, r2
 8009488:	4798      	blx	r3
 800948a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3301      	adds	r3, #1
 8009490:	2207      	movs	r2, #7
 8009492:	701a      	strb	r2, [r3, #0]
      break; 
 8009494:	e009      	b.n	80094aa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009496:	6839      	ldr	r1, [r7, #0]
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f9bf 	bl	800981c <USBD_CtlError>
      return;
 800949e:	e019      	b.n	80094d4 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f9ba 	bl	800981c <USBD_CtlError>
    return;
 80094a8:	e014      	b.n	80094d4 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 80094aa:	897b      	ldrh	r3, [r7, #10]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d011      	beq.n	80094d4 <USBD_GetDescriptor+0x1e0>
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	88db      	ldrh	r3, [r3, #6]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00d      	beq.n	80094d4 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	88da      	ldrh	r2, [r3, #6]
 80094bc:	897b      	ldrh	r3, [r7, #10]
 80094be:	4293      	cmp	r3, r2
 80094c0:	bf28      	it	cs
 80094c2:	4613      	movcs	r3, r2
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 80094c8:	897b      	ldrh	r3, [r7, #10]
 80094ca:	461a      	mov	r2, r3
 80094cc:	68f9      	ldr	r1, [r7, #12]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fa0f 	bl	80098f2 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop

080094dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	889b      	ldrh	r3, [r3, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d12c      	bne.n	8009548 <USBD_SetAddress+0x6c>
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	88db      	ldrh	r3, [r3, #6]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d128      	bne.n	8009548 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	885b      	ldrh	r3, [r3, #2]
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009500:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 8009508:	2b03      	cmp	r3, #3
 800950a:	d104      	bne.n	8009516 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f984 	bl	800981c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8009514:	e01d      	b.n	8009552 <USBD_SetAddress+0x76>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	7bfa      	ldrb	r2, [r7, #15]
 800951a:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800951e:	7bfb      	ldrb	r3, [r7, #15]
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 ffae 	bl	800a484 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fa40 	bl	80099ae <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d004      	beq.n	800953e <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2202      	movs	r2, #2
 8009538:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800953c:	e009      	b.n	8009552 <USBD_SetAddress+0x76>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8009546:	e004      	b.n	8009552 <USBD_SetAddress+0x76>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f966 	bl	800981c <USBD_CtlError>
  } 
}
 8009550:	bf00      	nop
 8009552:	bf00      	nop
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	885b      	ldrh	r3, [r3, #2]
 800956a:	b2da      	uxtb	r2, r3
 800956c:	4b3e      	ldr	r3, [pc, #248]	@ (8009668 <USBD_SetConfig+0x10c>)
 800956e:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8009570:	4b3d      	ldr	r3, [pc, #244]	@ (8009668 <USBD_SetConfig+0x10c>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d904      	bls.n	8009582 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f94e 	bl	800981c <USBD_CtlError>
 8009580:	e06f      	b.n	8009662 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 8009588:	2b02      	cmp	r3, #2
 800958a:	d002      	beq.n	8009592 <USBD_SetConfig+0x36>
 800958c:	2b03      	cmp	r3, #3
 800958e:	d023      	beq.n	80095d8 <USBD_SetConfig+0x7c>
 8009590:	e062      	b.n	8009658 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8009592:	4b35      	ldr	r3, [pc, #212]	@ (8009668 <USBD_SetConfig+0x10c>)
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d01a      	beq.n	80095d0 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800959a:	4b33      	ldr	r3, [pc, #204]	@ (8009668 <USBD_SetConfig+0x10c>)
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2203      	movs	r2, #3
 80095a8:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80095ac:	4b2e      	ldr	r3, [pc, #184]	@ (8009668 <USBD_SetConfig+0x10c>)
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	4619      	mov	r1, r3
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7ff fb59 	bl	8008c6a <USBD_SetClassConfig>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d104      	bne.n	80095c8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f92b 	bl	800981c <USBD_CtlError>
          return;
 80095c6:	e04c      	b.n	8009662 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f9f0 	bl	80099ae <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 80095ce:	e048      	b.n	8009662 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f9ec 	bl	80099ae <USBD_CtlSendStatus>
      break;
 80095d6:	e044      	b.n	8009662 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80095d8:	4b23      	ldr	r3, [pc, #140]	@ (8009668 <USBD_SetConfig+0x10c>)
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d112      	bne.n	8009606 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2202      	movs	r2, #2
 80095e4:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
        pdev->dev_config = cfgidx;          
 80095e8:	4b1f      	ldr	r3, [pc, #124]	@ (8009668 <USBD_SetConfig+0x10c>)
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	461a      	mov	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80095f2:	4b1d      	ldr	r3, [pc, #116]	@ (8009668 <USBD_SetConfig+0x10c>)
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	4619      	mov	r1, r3
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7ff fb55 	bl	8008ca8 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f9d5 	bl	80099ae <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8009604:	e02d      	b.n	8009662 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8009606:	4b18      	ldr	r3, [pc, #96]	@ (8009668 <USBD_SetConfig+0x10c>)
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	429a      	cmp	r2, r3
 8009612:	d01d      	beq.n	8009650 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	b2db      	uxtb	r3, r3
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f7ff fb43 	bl	8008ca8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009622:	4b11      	ldr	r3, [pc, #68]	@ (8009668 <USBD_SetConfig+0x10c>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800962c:	4b0e      	ldr	r3, [pc, #56]	@ (8009668 <USBD_SetConfig+0x10c>)
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	4619      	mov	r1, r3
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f7ff fb19 	bl	8008c6a <USBD_SetClassConfig>
 8009638:	4603      	mov	r3, r0
 800963a:	2b02      	cmp	r3, #2
 800963c:	d104      	bne.n	8009648 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f8eb 	bl	800981c <USBD_CtlError>
          return;
 8009646:	e00c      	b.n	8009662 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f9b0 	bl	80099ae <USBD_CtlSendStatus>
      break;
 800964e:	e008      	b.n	8009662 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f9ac 	bl	80099ae <USBD_CtlSendStatus>
      break;
 8009656:	e004      	b.n	8009662 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f8de 	bl	800981c <USBD_CtlError>
      break;
 8009660:	bf00      	nop
    }
  }
}
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	20002769 	.word	0x20002769

0800966c <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	88db      	ldrh	r3, [r3, #6]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d004      	beq.n	8009688 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 f8cb 	bl	800981c <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009686:	e01f      	b.n	80096c8 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 800968e:	2b02      	cmp	r3, #2
 8009690:	d002      	beq.n	8009698 <USBD_GetConfig+0x2c>
 8009692:	2b03      	cmp	r3, #3
 8009694:	d00b      	beq.n	80096ae <USBD_GetConfig+0x42>
 8009696:	e012      	b.n	80096be <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 80096a2:	2201      	movs	r2, #1
 80096a4:	4619      	mov	r1, r3
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f923 	bl	80098f2 <USBD_CtlSendData>
      break;
 80096ac:	e00c      	b.n	80096c8 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 80096b2:	2201      	movs	r2, #1
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f91b 	bl	80098f2 <USBD_CtlSendData>
      break;
 80096bc:	e004      	b.n	80096c8 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 f8ab 	bl	800981c <USBD_CtlError>
      break;
 80096c6:	bf00      	nop
}
 80096c8:	bf00      	nop
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 80096e0:	3b02      	subs	r3, #2
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d815      	bhi.n	8009712 <USBD_GetStatus+0x42>
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
#else
    pdev->dev_config_status = 0;                                   
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	60da      	str	r2, [r3, #12]
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d005      	beq.n	8009702 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	f043 0202 	orr.w	r2, r3, #2
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8009706:	2202      	movs	r2, #2
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f8f1 	bl	80098f2 <USBD_CtlSendData>
                      2);
    break;
 8009710:	e004      	b.n	800971c <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f881 	bl	800981c <USBD_CtlError>
    break;
 800971a:	bf00      	nop
  }
}
 800971c:	bf00      	nop
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	885b      	ldrh	r3, [r3, #2]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d10d      	bne.n	8009752 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    pdev->pClass->Setup (pdev, req);   
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f92e 	bl	80099ae <USBD_CtlSendStatus>
  }

}
 8009752:	bf00      	nop
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b082      	sub	sp, #8
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 800976a:	3b02      	subs	r3, #2
 800976c:	2b01      	cmp	r3, #1
 800976e:	d812      	bhi.n	8009796 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	885b      	ldrh	r3, [r3, #2]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d113      	bne.n	80097a0 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      pdev->pClass->Setup (pdev, req);   
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	6839      	ldr	r1, [r7, #0]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f90d 	bl	80099ae <USBD_CtlSendStatus>
    }
    break;
 8009794:	e004      	b.n	80097a0 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f83f 	bl	800981c <USBD_CtlError>
    break;
 800979e:	e000      	b.n	80097a2 <USBD_ClrFeature+0x48>
    break;
 80097a0:	bf00      	nop
  }
}
 80097a2:	bf00      	nop
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b083      	sub	sp, #12
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	781a      	ldrb	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	785a      	ldrb	r2, [r3, #1]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	3302      	adds	r3, #2
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	461a      	mov	r2, r3
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	3303      	adds	r3, #3
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	021b      	lsls	r3, r3, #8
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	4413      	add	r3, r2
 80097d8:	b29a      	uxth	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	3304      	adds	r3, #4
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	461a      	mov	r2, r3
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	3305      	adds	r3, #5
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	021b      	lsls	r3, r3, #8
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	4413      	add	r3, r2
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	3306      	adds	r3, #6
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	3307      	adds	r3, #7
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	021b      	lsls	r3, r3, #8
 8009808:	b29b      	uxth	r3, r3
 800980a:	4413      	add	r3, r2
 800980c:	b29a      	uxth	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	80da      	strh	r2, [r3, #6]

}
 8009812:	bf00      	nop
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	bc80      	pop	{r7}
 800981a:	4770      	bx	lr

0800981c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8009826:	2180      	movs	r1, #128	@ 0x80
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fd93 	bl	800a354 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800982e:	2100      	movs	r1, #0
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 fd8f 	bl	800a354 <USBD_LL_StallEP>
}
 8009836:	bf00      	nop
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b086      	sub	sp, #24
 8009842:	af00      	add	r7, sp, #0
 8009844:	60f8      	str	r0, [r7, #12]
 8009846:	60b9      	str	r1, [r7, #8]
 8009848:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800984a:	2300      	movs	r3, #0
 800984c:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d033      	beq.n	80098bc <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f000 f835 	bl	80098c4 <USBD_GetLen>
 800985a:	4603      	mov	r3, r0
 800985c:	3301      	adds	r3, #1
 800985e:	b29b      	uxth	r3, r3
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	b29a      	uxth	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	881a      	ldrh	r2, [r3, #0]
 800986c:	7dfb      	ldrb	r3, [r7, #23]
 800986e:	1c59      	adds	r1, r3, #1
 8009870:	75f9      	strb	r1, [r7, #23]
 8009872:	4619      	mov	r1, r3
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	440b      	add	r3, r1
 8009878:	b2d2      	uxtb	r2, r2
 800987a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800987c:	7dfb      	ldrb	r3, [r7, #23]
 800987e:	1c5a      	adds	r2, r3, #1
 8009880:	75fa      	strb	r2, [r7, #23]
 8009882:	461a      	mov	r2, r3
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	4413      	add	r3, r2
 8009888:	2203      	movs	r2, #3
 800988a:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 800988c:	e012      	b.n	80098b4 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	1c5a      	adds	r2, r3, #1
 8009892:	60fa      	str	r2, [r7, #12]
 8009894:	7dfa      	ldrb	r2, [r7, #23]
 8009896:	1c51      	adds	r1, r2, #1
 8009898:	75f9      	strb	r1, [r7, #23]
 800989a:	4611      	mov	r1, r2
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	440a      	add	r2, r1
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80098a4:	7dfb      	ldrb	r3, [r7, #23]
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	75fa      	strb	r2, [r7, #23]
 80098aa:	461a      	mov	r2, r3
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	4413      	add	r3, r2
 80098b0:	2200      	movs	r2, #0
 80098b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1e8      	bne.n	800988e <USBD_GetString+0x50>
    }
  } 
}
 80098bc:	bf00      	nop
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 80098d0:	e005      	b.n	80098de <USBD_GetLen+0x1a>
    {
        len++;
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
 80098d4:	3301      	adds	r3, #1
 80098d6:	73fb      	strb	r3, [r7, #15]
        buf++;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	3301      	adds	r3, #1
 80098dc:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1f5      	bne.n	80098d2 <USBD_GetLen+0xe>
    }

    return len;
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3714      	adds	r7, #20
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bc80      	pop	{r7}
 80098f0:	4770      	bx	lr

080098f2 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b084      	sub	sp, #16
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	60f8      	str	r0, [r7, #12]
 80098fa:	60b9      	str	r1, [r7, #8]
 80098fc:	4613      	mov	r3, r2
 80098fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2202      	movs	r2, #2
 8009904:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
  pdev->ep_in[0].total_length = len;
 8009908:	88fa      	ldrh	r2, [r7, #6]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 800990e:	88fa      	ldrh	r2, [r7, #6]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8009914:	88fb      	ldrh	r3, [r7, #6]
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	2100      	movs	r1, #0
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 fde8 	bl	800a4f0 <USBD_LL_Transmit>
  
  return USBD_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	4613      	mov	r3, r2
 8009936:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8009938:	88fb      	ldrh	r3, [r7, #6]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	2100      	movs	r1, #0
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f000 fdd6 	bl	800a4f0 <USBD_LL_Transmit>
  
  return USBD_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b084      	sub	sp, #16
 8009952:	af00      	add	r7, sp, #0
 8009954:	60f8      	str	r0, [r7, #12]
 8009956:	60b9      	str	r1, [r7, #8]
 8009958:	4613      	mov	r3, r2
 800995a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2203      	movs	r2, #3
 8009960:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
  pdev->ep_out[0].total_length = len;
 8009964:	88fa      	ldrh	r2, [r7, #6]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  pdev->ep_out[0].rem_length   = len;
 800996c:	88fa      	ldrh	r2, [r7, #6]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8009974:	88fb      	ldrh	r3, [r7, #6]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	2100      	movs	r1, #0
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 fdf2 	bl	800a564 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	60f8      	str	r0, [r7, #12]
 8009992:	60b9      	str	r1, [r7, #8]
 8009994:	4613      	mov	r3, r2
 8009996:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8009998:	88fb      	ldrh	r3, [r7, #6]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	2100      	movs	r1, #0
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 fde0 	bl	800a564 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b082      	sub	sp, #8
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2204      	movs	r2, #4
 80099ba:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80099be:	2300      	movs	r3, #0
 80099c0:	2200      	movs	r2, #0
 80099c2:	2100      	movs	r1, #0
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fd93 	bl	800a4f0 <USBD_LL_Transmit>
  
  return USBD_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2205      	movs	r2, #5
 80099e0:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80099e4:	2300      	movs	r3, #0
 80099e6:	2200      	movs	r2, #0
 80099e8:	2100      	movs	r1, #0
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fdba 	bl	800a564 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
	...

080099fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8009a00:	2200      	movs	r2, #0
 8009a02:	4908      	ldr	r1, [pc, #32]	@ (8009a24 <MX_USB_DEVICE_Init+0x28>)
 8009a04:	4808      	ldr	r0, [pc, #32]	@ (8009a28 <MX_USB_DEVICE_Init+0x2c>)
 8009a06:	f7ff f8d6 	bl	8008bb6 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8009a0a:	4908      	ldr	r1, [pc, #32]	@ (8009a2c <MX_USB_DEVICE_Init+0x30>)
 8009a0c:	4806      	ldr	r0, [pc, #24]	@ (8009a28 <MX_USB_DEVICE_Init+0x2c>)
 8009a0e:	f7ff f8fd 	bl	8008c0c <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8009a12:	4907      	ldr	r1, [pc, #28]	@ (8009a30 <MX_USB_DEVICE_Init+0x34>)
 8009a14:	4804      	ldr	r0, [pc, #16]	@ (8009a28 <MX_USB_DEVICE_Init+0x2c>)
 8009a16:	f7ff f825 	bl	8008a64 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8009a1a:	4803      	ldr	r0, [pc, #12]	@ (8009a28 <MX_USB_DEVICE_Init+0x2c>)
 8009a1c:	f7ff f90f 	bl	8008c3e <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a20:	bf00      	nop
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	20000210 	.word	0x20000210
 8009a28:	2000276c 	.word	0x2000276c
 8009a2c:	20000018 	.word	0x20000018
 8009a30:	20000200 	.word	0x20000200

08009a34 <__NVIC_ClearPendingIRQ>:
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	db0c      	blt.n	8009a60 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a46:	79fb      	ldrb	r3, [r7, #7]
 8009a48:	f003 021f 	and.w	r2, r3, #31
 8009a4c:	4907      	ldr	r1, [pc, #28]	@ (8009a6c <__NVIC_ClearPendingIRQ+0x38>)
 8009a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a52:	095b      	lsrs	r3, r3, #5
 8009a54:	2001      	movs	r0, #1
 8009a56:	fa00 f202 	lsl.w	r2, r0, r2
 8009a5a:	3360      	adds	r3, #96	@ 0x60
 8009a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bc80      	pop	{r7}
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	e000e100 	.word	0xe000e100

08009a70 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a74:	2200      	movs	r2, #0
 8009a76:	4905      	ldr	r1, [pc, #20]	@ (8009a8c <CDC_Init_FS+0x1c>)
 8009a78:	4805      	ldr	r0, [pc, #20]	@ (8009a90 <CDC_Init_FS+0x20>)
 8009a7a:	f7ff f809 	bl	8008a90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a7e:	4905      	ldr	r1, [pc, #20]	@ (8009a94 <CDC_Init_FS+0x24>)
 8009a80:	4803      	ldr	r0, [pc, #12]	@ (8009a90 <CDC_Init_FS+0x20>)
 8009a82:	f7ff f81e 	bl	8008ac2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a86:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	20002b90 	.word	0x20002b90
 8009a90:	2000276c 	.word	0x2000276c
 8009a94:	20002990 	.word	0x20002990

08009a98 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bc80      	pop	{r7}
 8009aa4:	4770      	bx	lr
	...

08009aa8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length, uint16_t index)
{
 8009aa8:	b590      	push	{r4, r7, lr}
 8009aaa:	b08b      	sub	sp, #44	@ 0x2c
 8009aac:	af04      	add	r7, sp, #16
 8009aae:	60b9      	str	r1, [r7, #8]
 8009ab0:	4611      	mov	r1, r2
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73fb      	strb	r3, [r7, #15]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	81bb      	strh	r3, [r7, #12]
 8009abc:	4613      	mov	r3, r2
 8009abe:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	2b23      	cmp	r3, #35	@ 0x23
 8009ac4:	f200 80ec 	bhi.w	8009ca0 <CDC_Control_FS+0x1f8>
 8009ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad0 <CDC_Control_FS+0x28>)
 8009aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ace:	bf00      	nop
 8009ad0:	08009ca1 	.word	0x08009ca1
 8009ad4:	08009ca1 	.word	0x08009ca1
 8009ad8:	08009ca1 	.word	0x08009ca1
 8009adc:	08009ca1 	.word	0x08009ca1
 8009ae0:	08009ca1 	.word	0x08009ca1
 8009ae4:	08009ca1 	.word	0x08009ca1
 8009ae8:	08009ca1 	.word	0x08009ca1
 8009aec:	08009ca1 	.word	0x08009ca1
 8009af0:	08009ca1 	.word	0x08009ca1
 8009af4:	08009ca1 	.word	0x08009ca1
 8009af8:	08009ca1 	.word	0x08009ca1
 8009afc:	08009ca1 	.word	0x08009ca1
 8009b00:	08009ca1 	.word	0x08009ca1
 8009b04:	08009ca1 	.word	0x08009ca1
 8009b08:	08009ca1 	.word	0x08009ca1
 8009b0c:	08009ca1 	.word	0x08009ca1
 8009b10:	08009ca1 	.word	0x08009ca1
 8009b14:	08009ca1 	.word	0x08009ca1
 8009b18:	08009ca1 	.word	0x08009ca1
 8009b1c:	08009ca1 	.word	0x08009ca1
 8009b20:	08009ca1 	.word	0x08009ca1
 8009b24:	08009ca1 	.word	0x08009ca1
 8009b28:	08009ca1 	.word	0x08009ca1
 8009b2c:	08009ca1 	.word	0x08009ca1
 8009b30:	08009ca1 	.word	0x08009ca1
 8009b34:	08009ca1 	.word	0x08009ca1
 8009b38:	08009ca1 	.word	0x08009ca1
 8009b3c:	08009ca1 	.word	0x08009ca1
 8009b40:	08009ca1 	.word	0x08009ca1
 8009b44:	08009ca1 	.word	0x08009ca1
 8009b48:	08009ca1 	.word	0x08009ca1
 8009b4c:	08009ca1 	.word	0x08009ca1
 8009b50:	08009b61 	.word	0x08009b61
 8009b54:	08009ca1 	.word	0x08009ca1
 8009b58:	08009ca1 	.word	0x08009ca1
 8009b5c:	08009ca1 	.word	0x08009ca1
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    {
      uart_ctx_t * const uart_ctx = (index < 2) ? &ctx.uart1 : &ctx.uart2;
 8009b60:	88fb      	ldrh	r3, [r7, #6]
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d801      	bhi.n	8009b6a <CDC_Control_FS+0xc2>
 8009b66:	4b51      	ldr	r3, [pc, #324]	@ (8009cac <CDC_Control_FS+0x204>)
 8009b68:	e000      	b.n	8009b6c <CDC_Control_FS+0xc4>
 8009b6a:	4b51      	ldr	r3, [pc, #324]	@ (8009cb0 <CDC_Control_FS+0x208>)
 8009b6c:	617b      	str	r3, [r7, #20]

      USBD_CDC_LineCodingTypeDef *line_coding = (USBD_CDC_LineCodingTypeDef *)pbuf;
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	613b      	str	r3, [r7, #16]
      if (line_coding->bitrate == 0 || line_coding->datatype == 0) {
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f000 8093 	beq.w	8009ca2 <CDC_Control_FS+0x1fa>
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	799b      	ldrb	r3, [r3, #6]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f000 808e 	beq.w	8009ca2 <CDC_Control_FS+0x1fa>
       *    dwDTERate   -> line_coding->bitrate
       *    bCharFormat -> line_coding->format
       *    bParityType -> line_coding->paritytype
       *    bDataBits   -> line_coding->datatype
       */      
      uart_ctx->huart->Init.BaudRate = line_coding->bitrate;
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	693a      	ldr	r2, [r7, #16]
 8009b8c:	6812      	ldr	r2, [r2, #0]
 8009b8e:	605a      	str	r2, [r3, #4]
      uart_ctx->huart->Init.WordLength = (line_coding->datatype == 8) ? UART_WORDLENGTH_8B : UART_WORDLENGTH_9B;
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	799b      	ldrb	r3, [r3, #6]
 8009b94:	2b08      	cmp	r3, #8
 8009b96:	d101      	bne.n	8009b9c <CDC_Control_FS+0xf4>
 8009b98:	2200      	movs	r2, #0
 8009b9a:	e001      	b.n	8009ba0 <CDC_Control_FS+0xf8>
 8009b9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	609a      	str	r2, [r3, #8]
      uart_ctx->huart->Init.StopBits = (line_coding->format == 0) ? UART_STOPBITS_1 : UART_STOPBITS_2;
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	791b      	ldrb	r3, [r3, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d101      	bne.n	8009bb2 <CDC_Control_FS+0x10a>
 8009bae:	2200      	movs	r2, #0
 8009bb0:	e001      	b.n	8009bb6 <CDC_Control_FS+0x10e>
 8009bb2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	60da      	str	r2, [r3, #12]
      uart_ctx->huart->Init.Parity = (line_coding->paritytype == 0) ? UART_PARITY_NONE : (line_coding->paritytype == 1) ? UART_PARITY_ODD : UART_PARITY_EVEN;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	795b      	ldrb	r3, [r3, #5]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d009      	beq.n	8009bd8 <CDC_Control_FS+0x130>
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	795b      	ldrb	r3, [r3, #5]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d102      	bne.n	8009bd2 <CDC_Control_FS+0x12a>
 8009bcc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009bd0:	e003      	b.n	8009bda <CDC_Control_FS+0x132>
 8009bd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bd6:	e000      	b.n	8009bda <CDC_Control_FS+0x132>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	6852      	ldr	r2, [r2, #4]
 8009bde:	6113      	str	r3, [r2, #16]
      uart_ctx->huart->Init.Mode = UART_MODE_TX_RX;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	220c      	movs	r2, #12
 8009be6:	615a      	str	r2, [r3, #20]
      uart_ctx->huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	619a      	str	r2, [r3, #24]
      uart_ctx->huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	61da      	str	r2, [r3, #28]
        
      __HAL_UART_DISABLE(uart_ctx->huart);
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68da      	ldr	r2, [r3, #12]
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c0a:	60da      	str	r2, [r3, #12]
      if (HAL_UART_Init(uart_ctx->huart) != HAL_OK) {
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fb f94e 	bl	8004eb2 <HAL_UART_Init>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d004      	beq.n	8009c26 <CDC_Control_FS+0x17e>
        _Error_Handler(__FILE__, __LINE__);
 8009c1c:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8009c20:	4824      	ldr	r0, [pc, #144]	@ (8009cb4 <CDC_Control_FS+0x20c>)
 8009c22:	f7f7 f927 	bl	8000e74 <_Error_Handler>
      }

      __HAL_UART_ENABLE_IT(uart_ctx->huart, UART_IT_IDLE);
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f042 0210 	orr.w	r2, r2, #16
 8009c38:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE(uart_ctx->huart);
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68da      	ldr	r2, [r3, #12]
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c4c:	60da      	str	r2, [r3, #12]
      NVIC_ClearPendingIRQ(uart_ctx->irq_num);
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7ff feed 	bl	8009a34 <__NVIC_ClearPendingIRQ>

      HAL_UART_DMAStop(uart_ctx->huart);
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fb fa0d 	bl	800507e <HAL_UART_DMAStop>
      HAL_UART_Receive_DMA(uart_ctx->huart, (uint8_t *)uart_ctx->buf.data[0], DBL_BUF_TOTAL_LEN);
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	6858      	ldr	r0, [r3, #4]
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	3314      	adds	r3, #20
 8009c6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c70:	4619      	mov	r1, r3
 8009c72:	f7fb f9df 	bl	8005034 <HAL_UART_Receive_DMA>

      SEGGER_RTT_printf(0, "LINE_CODING: UART=%s, bitrate=%d, format=%d, parity=%d, datatype=%d\n",
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	6819      	ldr	r1, [r3, #0]
        uart_ctx->name, line_coding->bitrate, line_coding->format, line_coding->paritytype, line_coding->datatype);
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	791b      	ldrb	r3, [r3, #4]
      SEGGER_RTT_printf(0, "LINE_CODING: UART=%s, bitrate=%d, format=%d, parity=%d, datatype=%d\n",
 8009c82:	4618      	mov	r0, r3
        uart_ctx->name, line_coding->bitrate, line_coding->format, line_coding->paritytype, line_coding->datatype);
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	795b      	ldrb	r3, [r3, #5]
      SEGGER_RTT_printf(0, "LINE_CODING: UART=%s, bitrate=%d, format=%d, parity=%d, datatype=%d\n",
 8009c88:	461c      	mov	r4, r3
        uart_ctx->name, line_coding->bitrate, line_coding->format, line_coding->paritytype, line_coding->datatype);
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	799b      	ldrb	r3, [r3, #6]
      SEGGER_RTT_printf(0, "LINE_CODING: UART=%s, bitrate=%d, format=%d, parity=%d, datatype=%d\n",
 8009c8e:	9302      	str	r3, [sp, #8]
 8009c90:	9401      	str	r4, [sp, #4]
 8009c92:	9000      	str	r0, [sp, #0]
 8009c94:	460b      	mov	r3, r1
 8009c96:	4908      	ldr	r1, [pc, #32]	@ (8009cb8 <CDC_Control_FS+0x210>)
 8009c98:	2000      	movs	r0, #0
 8009c9a:	f7f6 ff3f 	bl	8000b1c <SEGGER_RTT_printf>
    }
    break;
 8009c9e:	e000      	b.n	8009ca2 <CDC_Control_FS+0x1fa>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009ca0:	bf00      	nop
  }

  return (USBD_OK);
 8009ca2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	371c      	adds	r7, #28
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd90      	pop	{r4, r7, pc}
 8009cac:	2000055c 	.word	0x2000055c
 8009cb0:	20001584 	.word	0x20001584
 8009cb4:	0800a71c 	.word	0x0800a71c
 8009cb8:	0800a73c 	.word	0x0800a73c

08009cbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len, uint16_t index)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009cca:	68f9      	ldr	r1, [r7, #12]
 8009ccc:	481c      	ldr	r0, [pc, #112]	@ (8009d40 <CDC_Receive_FS+0x84>)
 8009cce:	f7fe fef8 	bl	8008ac2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS, index);
 8009cd2:	88fb      	ldrh	r3, [r7, #6]
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	481a      	ldr	r0, [pc, #104]	@ (8009d40 <CDC_Receive_FS+0x84>)
 8009cd8:	f7fe ff37 	bl	8008b4a <USBD_CDC_ReceivePacket>


	switch (index) {
 8009cdc:	88fb      	ldrh	r3, [r7, #6]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d002      	beq.n	8009ce8 <CDC_Receive_FS+0x2c>
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d007      	beq.n	8009cf6 <CDC_Receive_FS+0x3a>
 8009ce6:	e00d      	b.n	8009d04 <CDC_Receive_FS+0x48>
	  case 0:
		USB_CDC_RxHandler_0(UserRxBufferFS, *Len);
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4619      	mov	r1, r3
 8009cee:	4815      	ldr	r0, [pc, #84]	@ (8009d44 <CDC_Receive_FS+0x88>)
 8009cf0:	f7f7 f8d4 	bl	8000e9c <USB_CDC_RxHandler_0>
		break;
 8009cf4:	e006      	b.n	8009d04 <CDC_Receive_FS+0x48>
	  case 2:
		USB_CDC_RxHandler_2(UserRxBufferFS, *Len);
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	4811      	ldr	r0, [pc, #68]	@ (8009d44 <CDC_Receive_FS+0x88>)
 8009cfe:	f7f7 f8e3 	bl	8000ec8 <USB_CDC_RxHandler_2>
		break;
 8009d02:	bf00      	nop
	}
	memset(UserRxBufferFS, '\0', *Len);
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	480d      	ldr	r0, [pc, #52]	@ (8009d44 <CDC_Receive_FS+0x88>)
 8009d0e:	f000 fc97 	bl	800a640 <memset>

#if defined(LOOPBACK_TEST)
  CDC_Transmit_FS(Buf, *Len, index);
#else
  // SEGGER_RTT_printf(0, "[%s] Tx: %c\n", (index < 2) ? "uart1" : "uart2", Buf[0]);
  HAL_UART_Transmit_DMA((index < 2) ? ctx.uart1.huart : ctx.uart2.huart, Buf, *Len);
 8009d12:	88fb      	ldrh	r3, [r7, #6]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d802      	bhi.n	8009d1e <CDC_Receive_FS+0x62>
 8009d18:	4b0b      	ldr	r3, [pc, #44]	@ (8009d48 <CDC_Receive_FS+0x8c>)
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	e003      	b.n	8009d26 <CDC_Receive_FS+0x6a>
 8009d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8009d48 <CDC_Receive_FS+0x8c>)
 8009d20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	6812      	ldr	r2, [r2, #0]
 8009d2a:	b292      	uxth	r2, r2
 8009d2c:	68f9      	ldr	r1, [r7, #12]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fb f910 	bl	8004f54 <HAL_UART_Transmit_DMA>
#endif
  return (USBD_OK);
 8009d34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	2000276c 	.word	0x2000276c
 8009d44:	20002990 	.word	0x20002990
 8009d48:	2000055c 	.word	0x2000055c

08009d4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len, uint16_t index)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	807b      	strh	r3, [r7, #2]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	803b      	strh	r3, [r7, #0]
  uint8_t result = USBD_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 7 */
  int i;
  int rest_len;
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009d60:	4b2f      	ldr	r3, [pc, #188]	@ (8009e20 <CDC_Transmit_FS+0xd4>)
 8009d62:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8009d66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <CDC_Transmit_FS+0x2a>
    return USBD_BUSY;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e050      	b.n	8009e18 <CDC_Transmit_FS+0xcc>
  }

  rest_len = Len;
 8009d76:	887b      	ldrh	r3, [r7, #2]
 8009d78:	60fb      	str	r3, [r7, #12]
  for (i = 0; result == USBD_OK && i <= Len; rest_len = Len - i) {
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	613b      	str	r3, [r7, #16]
 8009d7e:	e043      	b.n	8009e08 <CDC_Transmit_FS+0xbc>
    
    if (rest_len >= USB_FS_MAX_PACKET_SIZE) {
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2b3f      	cmp	r3, #63	@ 0x3f
 8009d84:	dd15      	ble.n	8009db2 <CDC_Transmit_FS+0x66>
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &Buf[i], USB_FS_MAX_PACKET_SIZE);
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	2240      	movs	r2, #64	@ 0x40
 8009d8e:	4619      	mov	r1, r3
 8009d90:	4823      	ldr	r0, [pc, #140]	@ (8009e20 <CDC_Transmit_FS+0xd4>)
 8009d92:	f7fe fe7d 	bl	8008a90 <USBD_CDC_SetTxBuffer>
      i += USB_FS_MAX_PACKET_SIZE;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	3340      	adds	r3, #64	@ 0x40
 8009d9a:	613b      	str	r3, [r7, #16]
      do {
        result = USBD_CDC_TransmitPacket(&hUsbDeviceFS, index);
 8009d9c:	883b      	ldrh	r3, [r7, #0]
 8009d9e:	4619      	mov	r1, r3
 8009da0:	481f      	ldr	r0, [pc, #124]	@ (8009e20 <CDC_Transmit_FS+0xd4>)
 8009da2:	f7fe fea1 	bl	8008ae8 <USBD_CDC_TransmitPacket>
 8009da6:	4603      	mov	r3, r0
 8009da8:	75fb      	strb	r3, [r7, #23]
      } while (result == USBD_BUSY);
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d0f5      	beq.n	8009d9c <CDC_Transmit_FS+0x50>
 8009db0:	e026      	b.n	8009e00 <CDC_Transmit_FS+0xb4>

    } else if (rest_len == 0) {
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10f      	bne.n	8009dd8 <CDC_Transmit_FS+0x8c>
      // It's necessary to send zero-length packet to compliance USB protocol.
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &Buf[0], 0);
 8009db8:	2200      	movs	r2, #0
 8009dba:	6879      	ldr	r1, [r7, #4]
 8009dbc:	4818      	ldr	r0, [pc, #96]	@ (8009e20 <CDC_Transmit_FS+0xd4>)
 8009dbe:	f7fe fe67 	bl	8008a90 <USBD_CDC_SetTxBuffer>
      do {
        result = USBD_CDC_TransmitPacket(&hUsbDeviceFS, index);
 8009dc2:	883b      	ldrh	r3, [r7, #0]
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	4816      	ldr	r0, [pc, #88]	@ (8009e20 <CDC_Transmit_FS+0xd4>)
 8009dc8:	f7fe fe8e 	bl	8008ae8 <USBD_CDC_TransmitPacket>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	75fb      	strb	r3, [r7, #23]
      } while (result == USBD_BUSY);
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d0f5      	beq.n	8009dc2 <CDC_Transmit_FS+0x76>
      break;
 8009dd6:	e01e      	b.n	8009e16 <CDC_Transmit_FS+0xca>

    } else {
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &Buf[i], rest_len);
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	4413      	add	r3, r2
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	b292      	uxth	r2, r2
 8009de2:	4619      	mov	r1, r3
 8009de4:	480e      	ldr	r0, [pc, #56]	@ (8009e20 <CDC_Transmit_FS+0xd4>)
 8009de6:	f7fe fe53 	bl	8008a90 <USBD_CDC_SetTxBuffer>
      do {
        result = USBD_CDC_TransmitPacket(&hUsbDeviceFS, index);
 8009dea:	883b      	ldrh	r3, [r7, #0]
 8009dec:	4619      	mov	r1, r3
 8009dee:	480c      	ldr	r0, [pc, #48]	@ (8009e20 <CDC_Transmit_FS+0xd4>)
 8009df0:	f7fe fe7a 	bl	8008ae8 <USBD_CDC_TransmitPacket>
 8009df4:	4603      	mov	r3, r0
 8009df6:	75fb      	strb	r3, [r7, #23]
      } while (result == USBD_BUSY);
 8009df8:	7dfb      	ldrb	r3, [r7, #23]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d0f5      	beq.n	8009dea <CDC_Transmit_FS+0x9e>
      break;
 8009dfe:	e00a      	b.n	8009e16 <CDC_Transmit_FS+0xca>
  for (i = 0; result == USBD_OK && i <= Len; rest_len = Len - i) {
 8009e00:	887a      	ldrh	r2, [r7, #2]
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	7dfb      	ldrb	r3, [r7, #23]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d103      	bne.n	8009e16 <CDC_Transmit_FS+0xca>
 8009e0e:	887b      	ldrh	r3, [r7, #2]
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	ddb4      	ble.n	8009d80 <CDC_Transmit_FS+0x34>

    }
  }

  /* USER CODE END 7 */
  return result;
 8009e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3718      	adds	r7, #24
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	2000276c 	.word	0x2000276c

08009e24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	6039      	str	r1, [r7, #0]
 8009e2e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	2212      	movs	r2, #18
 8009e34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009e36:	4b03      	ldr	r3, [pc, #12]	@ (8009e44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bc80      	pop	{r7}
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	2000022c 	.word	0x2000022c

08009e48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	4603      	mov	r3, r0
 8009e50:	6039      	str	r1, [r7, #0]
 8009e52:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	2204      	movs	r2, #4
 8009e58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e5a:	4b03      	ldr	r3, [pc, #12]	@ (8009e68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bc80      	pop	{r7}
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	20000240 	.word	0x20000240

08009e6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	4603      	mov	r3, r0
 8009e74:	6039      	str	r1, [r7, #0]
 8009e76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e78:	79fb      	ldrb	r3, [r7, #7]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d105      	bne.n	8009e8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	4907      	ldr	r1, [pc, #28]	@ (8009ea0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e82:	4808      	ldr	r0, [pc, #32]	@ (8009ea4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e84:	f7ff fcdb 	bl	800983e <USBD_GetString>
 8009e88:	e004      	b.n	8009e94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e8a:	683a      	ldr	r2, [r7, #0]
 8009e8c:	4904      	ldr	r1, [pc, #16]	@ (8009ea0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e8e:	4805      	ldr	r0, [pc, #20]	@ (8009ea4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e90:	f7ff fcd5 	bl	800983e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e94:	4b02      	ldr	r3, [pc, #8]	@ (8009ea0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	20002d90 	.word	0x20002d90
 8009ea4:	0800a784 	.word	0x0800a784

08009ea8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	6039      	str	r1, [r7, #0]
 8009eb2:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009eb4:	683a      	ldr	r2, [r7, #0]
 8009eb6:	4904      	ldr	r1, [pc, #16]	@ (8009ec8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009eb8:	4804      	ldr	r0, [pc, #16]	@ (8009ecc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009eba:	f7ff fcc0 	bl	800983e <USBD_GetString>
  return USBD_StrDesc;
 8009ebe:	4b02      	ldr	r3, [pc, #8]	@ (8009ec8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	20002d90 	.word	0x20002d90
 8009ecc:	0800a790 	.word	0x0800a790

08009ed0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	6039      	str	r1, [r7, #0]
 8009eda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009edc:	79fb      	ldrb	r3, [r7, #7]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d105      	bne.n	8009eee <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	4907      	ldr	r1, [pc, #28]	@ (8009f04 <USBD_FS_SerialStrDescriptor+0x34>)
 8009ee6:	4808      	ldr	r0, [pc, #32]	@ (8009f08 <USBD_FS_SerialStrDescriptor+0x38>)
 8009ee8:	f7ff fca9 	bl	800983e <USBD_GetString>
 8009eec:	e004      	b.n	8009ef8 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	4904      	ldr	r1, [pc, #16]	@ (8009f04 <USBD_FS_SerialStrDescriptor+0x34>)
 8009ef2:	4805      	ldr	r0, [pc, #20]	@ (8009f08 <USBD_FS_SerialStrDescriptor+0x38>)
 8009ef4:	f7ff fca3 	bl	800983e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ef8:	4b02      	ldr	r3, [pc, #8]	@ (8009f04 <USBD_FS_SerialStrDescriptor+0x34>)
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	20002d90 	.word	0x20002d90
 8009f08:	0800a798 	.word	0x0800a798

08009f0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	4603      	mov	r3, r0
 8009f14:	6039      	str	r1, [r7, #0]
 8009f16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009f18:	79fb      	ldrb	r3, [r7, #7]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d105      	bne.n	8009f2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	4907      	ldr	r1, [pc, #28]	@ (8009f40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f22:	4808      	ldr	r0, [pc, #32]	@ (8009f44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f24:	f7ff fc8b 	bl	800983e <USBD_GetString>
 8009f28:	e004      	b.n	8009f34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	4904      	ldr	r1, [pc, #16]	@ (8009f40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f2e:	4805      	ldr	r0, [pc, #20]	@ (8009f44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f30:	f7ff fc85 	bl	800983e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f34:	4b02      	ldr	r3, [pc, #8]	@ (8009f40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	20002d90 	.word	0x20002d90
 8009f44:	0800a7a8 	.word	0x0800a7a8

08009f48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	4603      	mov	r3, r0
 8009f50:	6039      	str	r1, [r7, #0]
 8009f52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f54:	79fb      	ldrb	r3, [r7, #7]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d105      	bne.n	8009f66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	4907      	ldr	r1, [pc, #28]	@ (8009f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f5e:	4808      	ldr	r0, [pc, #32]	@ (8009f80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f60:	f7ff fc6d 	bl	800983e <USBD_GetString>
 8009f64:	e004      	b.n	8009f70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	4904      	ldr	r1, [pc, #16]	@ (8009f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f6a:	4805      	ldr	r0, [pc, #20]	@ (8009f80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f6c:	f7ff fc67 	bl	800983e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f70:	4b02      	ldr	r3, [pc, #8]	@ (8009f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	20002d90 	.word	0x20002d90
 8009f80:	0800a7b4 	.word	0x0800a7b4

08009f84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a0d      	ldr	r2, [pc, #52]	@ (8009fc8 <HAL_PCD_MspInit+0x44>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d113      	bne.n	8009fbe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009f96:	4b0d      	ldr	r3, [pc, #52]	@ (8009fcc <HAL_PCD_MspInit+0x48>)
 8009f98:	69db      	ldr	r3, [r3, #28]
 8009f9a:	4a0c      	ldr	r2, [pc, #48]	@ (8009fcc <HAL_PCD_MspInit+0x48>)
 8009f9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009fa0:	61d3      	str	r3, [r2, #28]
 8009fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8009fcc <HAL_PCD_MspInit+0x48>)
 8009fa4:	69db      	ldr	r3, [r3, #28]
 8009fa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009faa:	60fb      	str	r3, [r7, #12]
 8009fac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009fae:	2200      	movs	r2, #0
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	2014      	movs	r0, #20
 8009fb4:	f7f7 fd4f 	bl	8001a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009fb8:	2014      	movs	r0, #20
 8009fba:	f7f7 fd68 	bl	8001a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009fbe:	bf00      	nop
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	40005c00 	.word	0x40005c00
 8009fcc:	40021000 	.word	0x40021000

08009fd0 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	f7fe fe71 	bl	8008cce <USBD_LL_SetupStage>
}
 8009fec:	bf00      	nop
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a006:	78fa      	ldrb	r2, [r7, #3]
 800a008:	6879      	ldr	r1, [r7, #4]
 800a00a:	4613      	mov	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4413      	add	r3, r2
 800a010:	00db      	lsls	r3, r3, #3
 800a012:	440b      	add	r3, r1
 800a014:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	78fb      	ldrb	r3, [r7, #3]
 800a01c:	4619      	mov	r1, r3
 800a01e:	f7fe fea3 	bl	8008d68 <USBD_LL_DataOutStage>
}
 800a022:	bf00      	nop
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b082      	sub	sp, #8
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	460b      	mov	r3, r1
 800a034:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a03c:	78fa      	ldrb	r2, [r7, #3]
 800a03e:	6879      	ldr	r1, [r7, #4]
 800a040:	4613      	mov	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	00db      	lsls	r3, r3, #3
 800a048:	440b      	add	r3, r1
 800a04a:	3324      	adds	r3, #36	@ 0x24
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	78fb      	ldrb	r3, [r7, #3]
 800a050:	4619      	mov	r1, r3
 800a052:	f7fe fee4 	bl	8008e1e <USBD_LL_DataInStage>
}
 800a056:	bf00      	nop
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b082      	sub	sp, #8
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fe ffc7 	bl	8009000 <USBD_LL_SOF>
}
 800a072:	bf00      	nop
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a082:	2301      	movs	r3, #1
 800a084:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	799b      	ldrb	r3, [r3, #6]
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d102      	bne.n	800a094 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800a08e:	2301      	movs	r3, #1
 800a090:	73fb      	strb	r3, [r7, #15]
    break;
 800a092:	e002      	b.n	800a09a <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;
 800a094:	2301      	movs	r3, #1
 800a096:	73fb      	strb	r3, [r7, #15]
    break;    
 800a098:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0a0:	7bfa      	ldrb	r2, [r7, #15]
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fe ff78 	bl	8008f9a <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7fe ff43 	bl	8008f3c <USBD_LL_Reset>
}
 800a0b6:	bf00      	nop
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
	...

0800a0c0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fe ff72 	bl	8008fb8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	7a9b      	ldrb	r3, [r3, #10]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d005      	beq.n	800a0e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0dc:	4b04      	ldr	r3, [pc, #16]	@ (800a0f0 <HAL_PCD_SuspendCallback+0x30>)
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	4a03      	ldr	r2, [pc, #12]	@ (800a0f0 <HAL_PCD_SuspendCallback+0x30>)
 800a0e2:	f043 0306 	orr.w	r3, r3, #6
 800a0e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a0e8:	bf00      	nop
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	e000ed00 	.word	0xe000ed00

0800a0f4 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a102:	4618      	mov	r0, r3
 800a104:	f7fe ff6c 	bl	8008fe0 <USBD_LL_Resume>
}
 800a108:	bf00      	nop
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a118:	4a38      	ldr	r2, [pc, #224]	@ (800a1fc <USBD_LL_Init+0xec>)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a36      	ldr	r2, [pc, #216]	@ (800a1fc <USBD_LL_Init+0xec>)
 800a124:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220

  hpcd_USB_FS.Instance = USB;
 800a128:	4b34      	ldr	r3, [pc, #208]	@ (800a1fc <USBD_LL_Init+0xec>)
 800a12a:	4a35      	ldr	r2, [pc, #212]	@ (800a200 <USBD_LL_Init+0xf0>)
 800a12c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a12e:	4b33      	ldr	r3, [pc, #204]	@ (800a1fc <USBD_LL_Init+0xec>)
 800a130:	2208      	movs	r2, #8
 800a132:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a134:	4b31      	ldr	r3, [pc, #196]	@ (800a1fc <USBD_LL_Init+0xec>)
 800a136:	2202      	movs	r2, #2
 800a138:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.ep0_mps = PCD_EP0MPS_08;
 800a13a:	4b30      	ldr	r3, [pc, #192]	@ (800a1fc <USBD_LL_Init+0xec>)
 800a13c:	2203      	movs	r2, #3
 800a13e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a140:	4b2e      	ldr	r3, [pc, #184]	@ (800a1fc <USBD_LL_Init+0xec>)
 800a142:	2200      	movs	r2, #0
 800a144:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a146:	4b2d      	ldr	r3, [pc, #180]	@ (800a1fc <USBD_LL_Init+0xec>)
 800a148:	2200      	movs	r2, #0
 800a14a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a14c:	4b2b      	ldr	r3, [pc, #172]	@ (800a1fc <USBD_LL_Init+0xec>)
 800a14e:	2200      	movs	r2, #0
 800a150:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a152:	482a      	ldr	r0, [pc, #168]	@ (800a1fc <USBD_LL_Init+0xec>)
 800a154:	f7f8 fabc 	bl	80026d0 <HAL_PCD_Init>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d004      	beq.n	800a168 <USBD_LL_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a15e:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 800a162:	4828      	ldr	r0, [pc, #160]	@ (800a204 <USBD_LL_Init+0xf4>)
 800a164:	f7f6 fe86 	bl	8000e74 <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x28);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a16e:	2328      	movs	r3, #40	@ 0x28
 800a170:	2200      	movs	r2, #0
 800a172:	2100      	movs	r1, #0
 800a174:	f7f9 ffca 	bl	800410c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x60);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a17e:	2360      	movs	r3, #96	@ 0x60
 800a180:	2200      	movs	r2, #0
 800a182:	2180      	movs	r1, #128	@ 0x80
 800a184:	f7f9 ffc2 	bl	800410c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a18e:	23c0      	movs	r3, #192	@ 0xc0
 800a190:	2200      	movs	r2, #0
 800a192:	2181      	movs	r1, #129	@ 0x81
 800a194:	f7f9 ffba 	bl	800410c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a19e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	f7f9 ffb1 	bl	800410c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a1b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	2182      	movs	r1, #130	@ 0x82
 800a1b8:	f7f9 ffa8 	bl	800410c <HAL_PCDEx_PMAConfig>

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81+2 , PCD_SNG_BUF, 0x180);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a1c2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	2183      	movs	r1, #131	@ 0x83
 800a1ca:	f7f9 ff9f 	bl	800410c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01+2 , PCD_SNG_BUF, 0x1C0);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a1d4:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2103      	movs	r1, #3
 800a1dc:	f7f9 ff96 	bl	800410c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82+2 , PCD_SNG_BUF, 0x1D0);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a1e6:	f44f 73e8 	mov.w	r3, #464	@ 0x1d0
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	2184      	movs	r1, #132	@ 0x84
 800a1ee:	f7f9 ff8d 	bl	800410c <HAL_PCDEx_PMAConfig>

  return USBD_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	20002f90 	.word	0x20002f90
 800a200:	40005c00 	.word	0x40005c00
 800a204:	0800a7c4 	.word	0x0800a7c4

0800a208 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a214:	2300      	movs	r3, #0
 800a216:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800a21e:	4618      	mov	r0, r3
 800a220:	f7f8 fb4c 	bl	80028bc <HAL_PCD_Start>
 800a224:	4603      	mov	r3, r0
 800a226:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a228:	7bbb      	ldrb	r3, [r7, #14]
 800a22a:	2b03      	cmp	r3, #3
 800a22c:	d816      	bhi.n	800a25c <USBD_LL_Start+0x54>
 800a22e:	a201      	add	r2, pc, #4	@ (adr r2, 800a234 <USBD_LL_Start+0x2c>)
 800a230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a234:	0800a245 	.word	0x0800a245
 800a238:	0800a24b 	.word	0x0800a24b
 800a23c:	0800a251 	.word	0x0800a251
 800a240:	0800a257 	.word	0x0800a257
    case HAL_OK :
      usb_status = USBD_OK;
 800a244:	2300      	movs	r3, #0
 800a246:	73fb      	strb	r3, [r7, #15]
    break;
 800a248:	e00b      	b.n	800a262 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a24a:	2302      	movs	r3, #2
 800a24c:	73fb      	strb	r3, [r7, #15]
    break;
 800a24e:	e008      	b.n	800a262 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a250:	2301      	movs	r3, #1
 800a252:	73fb      	strb	r3, [r7, #15]
    break;
 800a254:	e005      	b.n	800a262 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a256:	2302      	movs	r3, #2
 800a258:	73fb      	strb	r3, [r7, #15]
    break;
 800a25a:	e002      	b.n	800a262 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a25c:	2302      	movs	r3, #2
 800a25e:	73fb      	strb	r3, [r7, #15]
    break;
 800a260:	bf00      	nop
  }
  return usb_status;
 800a262:	7bfb      	ldrb	r3, [r7, #15]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	4608      	mov	r0, r1
 800a276:	4611      	mov	r1, r2
 800a278:	461a      	mov	r2, r3
 800a27a:	4603      	mov	r3, r0
 800a27c:	70fb      	strb	r3, [r7, #3]
 800a27e:	460b      	mov	r3, r1
 800a280:	70bb      	strb	r3, [r7, #2]
 800a282:	4613      	mov	r3, r2
 800a284:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a286:	2300      	movs	r3, #0
 800a288:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a28a:	2300      	movs	r3, #0
 800a28c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a294:	78bb      	ldrb	r3, [r7, #2]
 800a296:	883a      	ldrh	r2, [r7, #0]
 800a298:	78f9      	ldrb	r1, [r7, #3]
 800a29a:	f7f8 fc89 	bl	8002bb0 <HAL_PCD_EP_Open>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a2a2:	7bbb      	ldrb	r3, [r7, #14]
 800a2a4:	2b03      	cmp	r3, #3
 800a2a6:	d817      	bhi.n	800a2d8 <USBD_LL_OpenEP+0x6c>
 800a2a8:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b0 <USBD_LL_OpenEP+0x44>)
 800a2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ae:	bf00      	nop
 800a2b0:	0800a2c1 	.word	0x0800a2c1
 800a2b4:	0800a2c7 	.word	0x0800a2c7
 800a2b8:	0800a2cd 	.word	0x0800a2cd
 800a2bc:	0800a2d3 	.word	0x0800a2d3
    case HAL_OK :
      usb_status = USBD_OK;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2c4:	e00b      	b.n	800a2de <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ca:	e008      	b.n	800a2de <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d0:	e005      	b.n	800a2de <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2d2:	2302      	movs	r3, #2
 800a2d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d6:	e002      	b.n	800a2de <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a2d8:	2302      	movs	r3, #2
 800a2da:	73fb      	strb	r3, [r7, #15]
    break;
 800a2dc:	bf00      	nop
  }
  return usb_status;
 800a2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800a302:	78fa      	ldrb	r2, [r7, #3]
 800a304:	4611      	mov	r1, r2
 800a306:	4618      	mov	r0, r3
 800a308:	f7f8 fcaf 	bl	8002c6a <HAL_PCD_EP_Close>
 800a30c:	4603      	mov	r3, r0
 800a30e:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800a310:	7bbb      	ldrb	r3, [r7, #14]
 800a312:	2b03      	cmp	r3, #3
 800a314:	d816      	bhi.n	800a344 <USBD_LL_CloseEP+0x5c>
 800a316:	a201      	add	r2, pc, #4	@ (adr r2, 800a31c <USBD_LL_CloseEP+0x34>)
 800a318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31c:	0800a32d 	.word	0x0800a32d
 800a320:	0800a333 	.word	0x0800a333
 800a324:	0800a339 	.word	0x0800a339
 800a328:	0800a33f 	.word	0x0800a33f
    case HAL_OK :
      usb_status = USBD_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	73fb      	strb	r3, [r7, #15]
    break;
 800a330:	e00b      	b.n	800a34a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a332:	2302      	movs	r3, #2
 800a334:	73fb      	strb	r3, [r7, #15]
    break;
 800a336:	e008      	b.n	800a34a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a338:	2301      	movs	r3, #1
 800a33a:	73fb      	strb	r3, [r7, #15]
    break;
 800a33c:	e005      	b.n	800a34a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a33e:	2302      	movs	r3, #2
 800a340:	73fb      	strb	r3, [r7, #15]
    break;
 800a342:	e002      	b.n	800a34a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a344:	2302      	movs	r3, #2
 800a346:	73fb      	strb	r3, [r7, #15]
    break;
 800a348:	bf00      	nop
  }
  return usb_status;  
 800a34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	460b      	mov	r3, r1
 800a35e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800a36e:	78fa      	ldrb	r2, [r7, #3]
 800a370:	4611      	mov	r1, r2
 800a372:	4618      	mov	r0, r3
 800a374:	f7f8 fd40 	bl	8002df8 <HAL_PCD_EP_SetStall>
 800a378:	4603      	mov	r3, r0
 800a37a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a37c:	7bbb      	ldrb	r3, [r7, #14]
 800a37e:	2b03      	cmp	r3, #3
 800a380:	d816      	bhi.n	800a3b0 <USBD_LL_StallEP+0x5c>
 800a382:	a201      	add	r2, pc, #4	@ (adr r2, 800a388 <USBD_LL_StallEP+0x34>)
 800a384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a388:	0800a399 	.word	0x0800a399
 800a38c:	0800a39f 	.word	0x0800a39f
 800a390:	0800a3a5 	.word	0x0800a3a5
 800a394:	0800a3ab 	.word	0x0800a3ab
    case HAL_OK :
      usb_status = USBD_OK;
 800a398:	2300      	movs	r3, #0
 800a39a:	73fb      	strb	r3, [r7, #15]
    break;
 800a39c:	e00b      	b.n	800a3b6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a39e:	2302      	movs	r3, #2
 800a3a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a2:	e008      	b.n	800a3b6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a8:	e005      	b.n	800a3b6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ae:	e002      	b.n	800a3b6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b4:	bf00      	nop
  }
  return usb_status;  
 800a3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800a3da:	78fa      	ldrb	r2, [r7, #3]
 800a3dc:	4611      	mov	r1, r2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7f8 fd6a 	bl	8002eb8 <HAL_PCD_EP_ClrStall>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a3e8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	d816      	bhi.n	800a41c <USBD_LL_ClearStallEP+0x5c>
 800a3ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a3f4 <USBD_LL_ClearStallEP+0x34>)
 800a3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f4:	0800a405 	.word	0x0800a405
 800a3f8:	0800a40b 	.word	0x0800a40b
 800a3fc:	0800a411 	.word	0x0800a411
 800a400:	0800a417 	.word	0x0800a417
    case HAL_OK :
      usb_status = USBD_OK;
 800a404:	2300      	movs	r3, #0
 800a406:	73fb      	strb	r3, [r7, #15]
    break;
 800a408:	e00b      	b.n	800a422 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a40a:	2302      	movs	r3, #2
 800a40c:	73fb      	strb	r3, [r7, #15]
    break;
 800a40e:	e008      	b.n	800a422 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a410:	2301      	movs	r3, #1
 800a412:	73fb      	strb	r3, [r7, #15]
    break;
 800a414:	e005      	b.n	800a422 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a416:	2302      	movs	r3, #2
 800a418:	73fb      	strb	r3, [r7, #15]
    break;
 800a41a:	e002      	b.n	800a422 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a41c:	2302      	movs	r3, #2
 800a41e:	73fb      	strb	r3, [r7, #15]
    break;
 800a420:	bf00      	nop
  }
  return usb_status; 
 800a422:	7bfb      	ldrb	r3, [r7, #15]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	460b      	mov	r3, r1
 800a436:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800a43e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800a440:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a444:	2b00      	cmp	r3, #0
 800a446:	da0b      	bge.n	800a460 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800a448:	78fb      	ldrb	r3, [r7, #3]
 800a44a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a44e:	68f9      	ldr	r1, [r7, #12]
 800a450:	4613      	mov	r3, r2
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	4413      	add	r3, r2
 800a456:	00db      	lsls	r3, r3, #3
 800a458:	440b      	add	r3, r1
 800a45a:	3312      	adds	r3, #18
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	e00b      	b.n	800a478 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800a460:	78fb      	ldrb	r3, [r7, #3]
 800a462:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a466:	68f9      	ldr	r1, [r7, #12]
 800a468:	4613      	mov	r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	4413      	add	r3, r2
 800a46e:	00db      	lsls	r3, r3, #3
 800a470:	440b      	add	r3, r1
 800a472:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a476:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3714      	adds	r7, #20
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bc80      	pop	{r7}
 800a480:	4770      	bx	lr
	...

0800a484 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	460b      	mov	r3, r1
 800a48e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a490:	2300      	movs	r3, #0
 800a492:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a494:	2300      	movs	r3, #0
 800a496:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800a49e:	78fa      	ldrb	r2, [r7, #3]
 800a4a0:	4611      	mov	r1, r2
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7f8 fb60 	bl	8002b68 <HAL_PCD_SetAddress>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a4ac:	7bbb      	ldrb	r3, [r7, #14]
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	d816      	bhi.n	800a4e0 <USBD_LL_SetUSBAddress+0x5c>
 800a4b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4b8 <USBD_LL_SetUSBAddress+0x34>)
 800a4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b8:	0800a4c9 	.word	0x0800a4c9
 800a4bc:	0800a4cf 	.word	0x0800a4cf
 800a4c0:	0800a4d5 	.word	0x0800a4d5
 800a4c4:	0800a4db 	.word	0x0800a4db
    case HAL_OK :
      usb_status = USBD_OK;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a4cc:	e00b      	b.n	800a4e6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4ce:	2302      	movs	r3, #2
 800a4d0:	73fb      	strb	r3, [r7, #15]
    break;
 800a4d2:	e008      	b.n	800a4e6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4d8:	e005      	b.n	800a4e6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4da:	2302      	movs	r3, #2
 800a4dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a4de:	e002      	b.n	800a4e6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e4:	bf00      	nop
  }
  return usb_status;  
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	607a      	str	r2, [r7, #4]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	72fb      	strb	r3, [r7, #11]
 800a500:	4613      	mov	r3, r2
 800a502:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a504:	2300      	movs	r3, #0
 800a506:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a508:	2300      	movs	r3, #0
 800a50a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a512:	893b      	ldrh	r3, [r7, #8]
 800a514:	7af9      	ldrb	r1, [r7, #11]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	f7f8 fc37 	bl	8002d8a <HAL_PCD_EP_Transmit>
 800a51c:	4603      	mov	r3, r0
 800a51e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800a520:	7dbb      	ldrb	r3, [r7, #22]
 800a522:	2b03      	cmp	r3, #3
 800a524:	d816      	bhi.n	800a554 <USBD_LL_Transmit+0x64>
 800a526:	a201      	add	r2, pc, #4	@ (adr r2, 800a52c <USBD_LL_Transmit+0x3c>)
 800a528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52c:	0800a53d 	.word	0x0800a53d
 800a530:	0800a543 	.word	0x0800a543
 800a534:	0800a549 	.word	0x0800a549
 800a538:	0800a54f 	.word	0x0800a54f
    case HAL_OK :
      usb_status = USBD_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	75fb      	strb	r3, [r7, #23]
    break;
 800a540:	e00b      	b.n	800a55a <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a542:	2302      	movs	r3, #2
 800a544:	75fb      	strb	r3, [r7, #23]
    break;
 800a546:	e008      	b.n	800a55a <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a548:	2301      	movs	r3, #1
 800a54a:	75fb      	strb	r3, [r7, #23]
    break;
 800a54c:	e005      	b.n	800a55a <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a54e:	2302      	movs	r3, #2
 800a550:	75fb      	strb	r3, [r7, #23]
    break;
 800a552:	e002      	b.n	800a55a <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800a554:	2302      	movs	r3, #2
 800a556:	75fb      	strb	r3, [r7, #23]
    break;
 800a558:	bf00      	nop
  }
  return usb_status;    
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3718      	adds	r7, #24
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	607a      	str	r2, [r7, #4]
 800a56e:	461a      	mov	r2, r3
 800a570:	460b      	mov	r3, r1
 800a572:	72fb      	strb	r3, [r7, #11]
 800a574:	4613      	mov	r3, r2
 800a576:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a578:	2300      	movs	r3, #0
 800a57a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a586:	893b      	ldrh	r3, [r7, #8]
 800a588:	7af9      	ldrb	r1, [r7, #11]
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	f7f8 fbb5 	bl	8002cfa <HAL_PCD_EP_Receive>
 800a590:	4603      	mov	r3, r0
 800a592:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800a594:	7dbb      	ldrb	r3, [r7, #22]
 800a596:	2b03      	cmp	r3, #3
 800a598:	d816      	bhi.n	800a5c8 <USBD_LL_PrepareReceive+0x64>
 800a59a:	a201      	add	r2, pc, #4	@ (adr r2, 800a5a0 <USBD_LL_PrepareReceive+0x3c>)
 800a59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a0:	0800a5b1 	.word	0x0800a5b1
 800a5a4:	0800a5b7 	.word	0x0800a5b7
 800a5a8:	0800a5bd 	.word	0x0800a5bd
 800a5ac:	0800a5c3 	.word	0x0800a5c3
    case HAL_OK :
      usb_status = USBD_OK;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	75fb      	strb	r3, [r7, #23]
    break;
 800a5b4:	e00b      	b.n	800a5ce <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	75fb      	strb	r3, [r7, #23]
    break;
 800a5ba:	e008      	b.n	800a5ce <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	75fb      	strb	r3, [r7, #23]
    break;
 800a5c0:	e005      	b.n	800a5ce <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5c2:	2302      	movs	r3, #2
 800a5c4:	75fb      	strb	r3, [r7, #23]
    break;
 800a5c6:	e002      	b.n	800a5ce <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	75fb      	strb	r3, [r7, #23]
    break;
 800a5cc:	bf00      	nop
  }
  return usb_status; 
 800a5ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3718      	adds	r7, #24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800a5ea:	78fa      	ldrb	r2, [r7, #3]
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7f8 fbb4 	bl	8002d5c <HAL_PCD_EP_GetRxCount>
 800a5f4:	4603      	mov	r3, r0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
	...

0800a600 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a608:	4b02      	ldr	r3, [pc, #8]	@ (800a614 <USBD_static_malloc+0x14>)
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	370c      	adds	r7, #12
 800a60e:	46bd      	mov	sp, r7
 800a610:	bc80      	pop	{r7}
 800a612:	4770      	bx	lr
 800a614:	20003268 	.word	0x20003268

0800a618 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]

}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	bc80      	pop	{r7}
 800a628:	4770      	bx	lr

0800a62a <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 800a62a:	b480      	push	{r7}
 800a62c:	b083      	sub	sp, #12
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
 800a632:	460b      	mov	r3, r1
 800a634:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a636:	bf00      	nop
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bc80      	pop	{r7}
 800a63e:	4770      	bx	lr

0800a640 <memset>:
 800a640:	4603      	mov	r3, r0
 800a642:	4402      	add	r2, r0
 800a644:	4293      	cmp	r3, r2
 800a646:	d100      	bne.n	800a64a <memset+0xa>
 800a648:	4770      	bx	lr
 800a64a:	f803 1b01 	strb.w	r1, [r3], #1
 800a64e:	e7f9      	b.n	800a644 <memset+0x4>

0800a650 <__libc_init_array>:
 800a650:	b570      	push	{r4, r5, r6, lr}
 800a652:	2600      	movs	r6, #0
 800a654:	4d0c      	ldr	r5, [pc, #48]	@ (800a688 <__libc_init_array+0x38>)
 800a656:	4c0d      	ldr	r4, [pc, #52]	@ (800a68c <__libc_init_array+0x3c>)
 800a658:	1b64      	subs	r4, r4, r5
 800a65a:	10a4      	asrs	r4, r4, #2
 800a65c:	42a6      	cmp	r6, r4
 800a65e:	d109      	bne.n	800a674 <__libc_init_array+0x24>
 800a660:	f000 f828 	bl	800a6b4 <_init>
 800a664:	2600      	movs	r6, #0
 800a666:	4d0a      	ldr	r5, [pc, #40]	@ (800a690 <__libc_init_array+0x40>)
 800a668:	4c0a      	ldr	r4, [pc, #40]	@ (800a694 <__libc_init_array+0x44>)
 800a66a:	1b64      	subs	r4, r4, r5
 800a66c:	10a4      	asrs	r4, r4, #2
 800a66e:	42a6      	cmp	r6, r4
 800a670:	d105      	bne.n	800a67e <__libc_init_array+0x2e>
 800a672:	bd70      	pop	{r4, r5, r6, pc}
 800a674:	f855 3b04 	ldr.w	r3, [r5], #4
 800a678:	4798      	blx	r3
 800a67a:	3601      	adds	r6, #1
 800a67c:	e7ee      	b.n	800a65c <__libc_init_array+0xc>
 800a67e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a682:	4798      	blx	r3
 800a684:	3601      	adds	r6, #1
 800a686:	e7f2      	b.n	800a66e <__libc_init_array+0x1e>
 800a688:	0800a838 	.word	0x0800a838
 800a68c:	0800a838 	.word	0x0800a838
 800a690:	0800a838 	.word	0x0800a838
 800a694:	0800a83c 	.word	0x0800a83c

0800a698 <memcpy>:
 800a698:	440a      	add	r2, r1
 800a69a:	4291      	cmp	r1, r2
 800a69c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6a0:	d100      	bne.n	800a6a4 <memcpy+0xc>
 800a6a2:	4770      	bx	lr
 800a6a4:	b510      	push	{r4, lr}
 800a6a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6aa:	4291      	cmp	r1, r2
 800a6ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6b0:	d1f9      	bne.n	800a6a6 <memcpy+0xe>
 800a6b2:	bd10      	pop	{r4, pc}

0800a6b4 <_init>:
 800a6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b6:	bf00      	nop
 800a6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ba:	bc08      	pop	{r3}
 800a6bc:	469e      	mov	lr, r3
 800a6be:	4770      	bx	lr

0800a6c0 <_fini>:
 800a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c2:	bf00      	nop
 800a6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c6:	bc08      	pop	{r3}
 800a6c8:	469e      	mov	lr, r3
 800a6ca:	4770      	bx	lr
