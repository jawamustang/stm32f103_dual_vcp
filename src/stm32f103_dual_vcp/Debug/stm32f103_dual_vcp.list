
stm32f103_dual_vcp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a554  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800a660  0800a660  0000b660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7c4  0800a7c4  0000c244  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a7c4  0800a7c4  0000c244  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a7c4  0800a7c4  0000c244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7c4  0800a7c4  0000b7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7c8  0800a7c8  0000b7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  0800a7cc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003244  20000244  0800aa10  0000c244  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20003488  0800aa10  0000c488  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c244  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144e1  00000000  00000000  0000c26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e70  00000000  00000000  0002074e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  000245c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9a  00000000  00000000  00025688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af98  00000000  00000000  00026322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172f6  00000000  00000000  000412ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a399  00000000  00000000  000585b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2949  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000419c  00000000  00000000  000e298c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000e6b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000244 	.word	0x20000244
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a648 	.word	0x0800a648

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000248 	.word	0x20000248
 8000148:	0800a648 	.word	0x0800a648

0800014c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8000152:	4b21      	ldr	r3, [pc, #132]	@ (80001d8 <_DoInit+0x8c>)
 8000154:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2203      	movs	r2, #3
 800015a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2203      	movs	r2, #3
 8000160:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4a1d      	ldr	r2, [pc, #116]	@ (80001dc <_DoInit+0x90>)
 8000166:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	4a1d      	ldr	r2, [pc, #116]	@ (80001e0 <_DoInit+0x94>)
 800016c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000174:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	2200      	movs	r2, #0
 800017a:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2200      	movs	r2, #0
 8000180:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2200      	movs	r2, #0
 8000186:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	4a14      	ldr	r2, [pc, #80]	@ (80001dc <_DoInit+0x90>)
 800018c:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4a14      	ldr	r2, [pc, #80]	@ (80001e4 <_DoInit+0x98>)
 8000192:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2210      	movs	r2, #16
 8000198:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2200      	movs	r2, #0
 800019e:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2200      	movs	r2, #0
 80001a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2200      	movs	r2, #0
 80001aa:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3307      	adds	r3, #7
 80001b0:	4a0d      	ldr	r2, [pc, #52]	@ (80001e8 <_DoInit+0x9c>)
 80001b2:	6810      	ldr	r0, [r2, #0]
 80001b4:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	4a0c      	ldr	r2, [pc, #48]	@ (80001ec <_DoInit+0xa0>)
 80001ba:	6810      	ldr	r0, [r2, #0]
 80001bc:	6018      	str	r0, [r3, #0]
 80001be:	8891      	ldrh	r1, [r2, #4]
 80001c0:	7992      	ldrb	r2, [r2, #6]
 80001c2:	8099      	strh	r1, [r3, #4]
 80001c4:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2220      	movs	r2, #32
 80001ca:	719a      	strb	r2, [r3, #6]
}
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000260 	.word	0x20000260
 80001dc:	0800a660 	.word	0x0800a660
 80001e0:	20000308 	.word	0x20000308
 80001e4:	20000508 	.word	0x20000508
 80001e8:	0800a66c 	.word	0x0800a66c
 80001ec:	0800a670 	.word	0x0800a670

080001f0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b088      	sub	sp, #32
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	60f8      	str	r0, [r7, #12]
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	691b      	ldr	r3, [r3, #16]
 800020a:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 800020c:	693a      	ldr	r2, [r7, #16]
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	429a      	cmp	r2, r3
 8000212:	d905      	bls.n	8000220 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000214:	693a      	ldr	r2, [r7, #16]
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	1ad3      	subs	r3, r2, r3
 800021a:	3b01      	subs	r3, #1
 800021c:	61fb      	str	r3, [r7, #28]
 800021e:	e007      	b.n	8000230 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	689a      	ldr	r2, [r3, #8]
 8000224:	6939      	ldr	r1, [r7, #16]
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	1acb      	subs	r3, r1, r3
 800022a:	4413      	add	r3, r2
 800022c:	3b01      	subs	r3, #1
 800022e:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	689a      	ldr	r2, [r3, #8]
 8000234:	697b      	ldr	r3, [r7, #20]
 8000236:	1ad3      	subs	r3, r2, r3
 8000238:	69fa      	ldr	r2, [r7, #28]
 800023a:	4293      	cmp	r3, r2
 800023c:	bf28      	it	cs
 800023e:	4613      	movcs	r3, r2
 8000240:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000242:	69fa      	ldr	r2, [r7, #28]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4293      	cmp	r3, r2
 8000248:	bf28      	it	cs
 800024a:	4613      	movcs	r3, r2
 800024c:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	685a      	ldr	r2, [r3, #4]
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	4413      	add	r3, r2
 8000256:	69fa      	ldr	r2, [r7, #28]
 8000258:	68b9      	ldr	r1, [r7, #8]
 800025a:	4618      	mov	r0, r3
 800025c:	f00a f9e6 	bl	800a62c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000260:	69ba      	ldr	r2, [r7, #24]
 8000262:	69fb      	ldr	r3, [r7, #28]
 8000264:	4413      	add	r3, r2
 8000266:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8000268:	68ba      	ldr	r2, [r7, #8]
 800026a:	69fb      	ldr	r3, [r7, #28]
 800026c:	4413      	add	r3, r2
 800026e:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	69fb      	ldr	r3, [r7, #28]
 8000274:	1ad3      	subs	r3, r2, r3
 8000276:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8000278:	697a      	ldr	r2, [r7, #20]
 800027a:	69fb      	ldr	r3, [r7, #28]
 800027c:	4413      	add	r3, r2
 800027e:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	697a      	ldr	r2, [r7, #20]
 8000286:	429a      	cmp	r2, r3
 8000288:	d101      	bne.n	800028e <_WriteBlocking+0x9e>
      WrOff = 0u;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	697a      	ldr	r2, [r7, #20]
 8000292:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d1b5      	bne.n	8000206 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 800029a:	69bb      	ldr	r3, [r7, #24]
}
 800029c:	4618      	mov	r0, r3
 800029e:	3720      	adds	r7, #32
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	689a      	ldr	r2, [r3, #8]
 80002ba:	69fb      	ldr	r3, [r7, #28]
 80002bc:	1ad3      	subs	r3, r2, r3
 80002be:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80002c0:	69ba      	ldr	r2, [r7, #24]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d90e      	bls.n	80002e6 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	685a      	ldr	r2, [r3, #4]
 80002cc:	69fb      	ldr	r3, [r7, #28]
 80002ce:	4413      	add	r3, r2
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	68b9      	ldr	r1, [r7, #8]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f00a f9a9 	bl	800a62c <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 80002da:	69fa      	ldr	r2, [r7, #28]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	441a      	add	r2, r3
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80002e4:	e01a      	b.n	800031c <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	685a      	ldr	r2, [r3, #4]
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	4413      	add	r3, r2
 80002f2:	697a      	ldr	r2, [r7, #20]
 80002f4:	68b9      	ldr	r1, [r7, #8]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f00a f998 	bl	800a62c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	69bb      	ldr	r3, [r7, #24]
 8000300:	1ad3      	subs	r3, r2, r3
 8000302:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	6858      	ldr	r0, [r3, #4]
 8000308:	68ba      	ldr	r2, [r7, #8]
 800030a:	69bb      	ldr	r3, [r7, #24]
 800030c:	4413      	add	r3, r2
 800030e:	697a      	ldr	r2, [r7, #20]
 8000310:	4619      	mov	r1, r3
 8000312:	f00a f98b 	bl	800a62c <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	697a      	ldr	r2, [r7, #20]
 800031a:	60da      	str	r2, [r3, #12]
}
 800031c:	bf00      	nop
 800031e:	3720      	adds	r7, #32
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8000324:	b480      	push	{r7}
 8000326:	b087      	sub	sp, #28
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000338:	693a      	ldr	r2, [r7, #16]
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	429a      	cmp	r2, r3
 800033e:	d808      	bhi.n	8000352 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689a      	ldr	r2, [r3, #8]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	1ad2      	subs	r2, r2, r3
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	4413      	add	r3, r2
 800034c:	3b01      	subs	r3, #1
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	e004      	b.n	800035c <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000352:	693a      	ldr	r2, [r7, #16]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	1ad3      	subs	r3, r2, r3
 8000358:	3b01      	subs	r3, #1
 800035a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800035c:	697b      	ldr	r3, [r7, #20]
}
 800035e:	4618      	mov	r0, r3
 8000360:	371c      	adds	r7, #28
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	1c5a      	adds	r2, r3, #1
 800037c:	4613      	mov	r3, r2
 800037e:	005b      	lsls	r3, r3, #1
 8000380:	4413      	add	r3, r2
 8000382:	00db      	lsls	r3, r3, #3
 8000384:	4a1f      	ldr	r2, [pc, #124]	@ (8000404 <SEGGER_RTT_WriteNoLock+0x9c>)
 8000386:	4413      	add	r3, r2
 8000388:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	2b02      	cmp	r3, #2
 8000390:	d029      	beq.n	80003e6 <SEGGER_RTT_WriteNoLock+0x7e>
 8000392:	2b02      	cmp	r3, #2
 8000394:	d82e      	bhi.n	80003f4 <SEGGER_RTT_WriteNoLock+0x8c>
 8000396:	2b00      	cmp	r3, #0
 8000398:	d002      	beq.n	80003a0 <SEGGER_RTT_WriteNoLock+0x38>
 800039a:	2b01      	cmp	r3, #1
 800039c:	d013      	beq.n	80003c6 <SEGGER_RTT_WriteNoLock+0x5e>
 800039e:	e029      	b.n	80003f4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80003a0:	6978      	ldr	r0, [r7, #20]
 80003a2:	f7ff ffbf 	bl	8000324 <_GetAvailWriteSpace>
 80003a6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80003a8:	693a      	ldr	r2, [r7, #16]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d202      	bcs.n	80003b6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80003b0:	2300      	movs	r3, #0
 80003b2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80003b4:	e021      	b.n	80003fa <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	69b9      	ldr	r1, [r7, #24]
 80003be:	6978      	ldr	r0, [r7, #20]
 80003c0:	f7ff ff70 	bl	80002a4 <_WriteNoCheck>
    break;
 80003c4:	e019      	b.n	80003fa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80003c6:	6978      	ldr	r0, [r7, #20]
 80003c8:	f7ff ffac 	bl	8000324 <_GetAvailWriteSpace>
 80003cc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	693b      	ldr	r3, [r7, #16]
 80003d2:	4293      	cmp	r3, r2
 80003d4:	bf28      	it	cs
 80003d6:	4613      	movcs	r3, r2
 80003d8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80003da:	69fa      	ldr	r2, [r7, #28]
 80003dc:	69b9      	ldr	r1, [r7, #24]
 80003de:	6978      	ldr	r0, [r7, #20]
 80003e0:	f7ff ff60 	bl	80002a4 <_WriteNoCheck>
    break;
 80003e4:	e009      	b.n	80003fa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	69b9      	ldr	r1, [r7, #24]
 80003ea:	6978      	ldr	r0, [r7, #20]
 80003ec:	f7ff ff00 	bl	80001f0 <_WriteBlocking>
 80003f0:	61f8      	str	r0, [r7, #28]
    break;
 80003f2:	e002      	b.n	80003fa <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80003f4:	2300      	movs	r3, #0
 80003f6:	61fb      	str	r3, [r7, #28]
    break;
 80003f8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80003fa:	69fb      	ldr	r3, [r7, #28]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3720      	adds	r7, #32
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000260 	.word	0x20000260

08000408 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8000414:	4b0d      	ldr	r3, [pc, #52]	@ (800044c <SEGGER_RTT_Write+0x44>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d101      	bne.n	8000420 <SEGGER_RTT_Write+0x18>
 800041c:	f7ff fe96 	bl	800014c <_DoInit>
  SEGGER_RTT_LOCK();
 8000420:	f3ef 8311 	mrs	r3, BASEPRI
 8000424:	f04f 0120 	mov.w	r1, #32
 8000428:	f381 8811 	msr	BASEPRI, r1
 800042c:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	68b9      	ldr	r1, [r7, #8]
 8000432:	68f8      	ldr	r0, [r7, #12]
 8000434:	f7ff ff98 	bl	8000368 <SEGGER_RTT_WriteNoLock>
 8000438:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8000440:	693b      	ldr	r3, [r7, #16]
}
 8000442:	4618      	mov	r0, r3
 8000444:	3718      	adds	r7, #24
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000260 	.word	0x20000260

08000450 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	1c5a      	adds	r2, r3, #1
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	429a      	cmp	r2, r3
 800046c:	d80e      	bhi.n	800048c <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	4413      	add	r3, r2
 8000476:	78fa      	ldrb	r2, [r7, #3]
 8000478:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	1c5a      	adds	r2, r3, #1
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	689a      	ldr	r2, [r3, #8]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	429a      	cmp	r2, r3
 8000496:	d115      	bne.n	80004c4 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	6918      	ldr	r0, [r3, #16]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	6819      	ldr	r1, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	461a      	mov	r2, r3
 80004a6:	f7ff ffaf 	bl	8000408 <SEGGER_RTT_Write>
 80004aa:	4602      	mov	r2, r0
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	689b      	ldr	r3, [r3, #8]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d004      	beq.n	80004be <_StoreChar+0x6e>
      p->ReturnValue = -1;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f04f 32ff 	mov.w	r2, #4294967295
 80004ba:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 80004bc:	e002      	b.n	80004c4 <_StoreChar+0x74>
      p->Cnt = 0u;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
}
 80004c4:	bf00      	nop
 80004c6:	3710      	adds	r7, #16
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	@ 0x28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
 80004d8:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80004de:	2301      	movs	r3, #1
 80004e0:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80004e2:	2301      	movs	r3, #1
 80004e4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80004e6:	e007      	b.n	80004f8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80004e8:	6a3a      	ldr	r2, [r7, #32]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f0:	623b      	str	r3, [r7, #32]
    Width++;
 80004f2:	69fb      	ldr	r3, [r7, #28]
 80004f4:	3301      	adds	r3, #1
 80004f6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80004f8:	6a3a      	ldr	r2, [r7, #32]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d2f3      	bcs.n	80004e8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	69fb      	ldr	r3, [r7, #28]
 8000504:	429a      	cmp	r2, r3
 8000506:	d901      	bls.n	800050c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800050c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	2b00      	cmp	r3, #0
 8000514:	d125      	bne.n	8000562 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8000516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000518:	2b00      	cmp	r3, #0
 800051a:	d022      	beq.n	8000562 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800051c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	2b00      	cmp	r3, #0
 8000524:	d005      	beq.n	8000532 <_PrintUnsigned+0x66>
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d102      	bne.n	8000532 <_PrintUnsigned+0x66>
        c = '0';
 800052c:	2330      	movs	r3, #48	@ 0x30
 800052e:	76fb      	strb	r3, [r7, #27]
 8000530:	e001      	b.n	8000536 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8000532:	2320      	movs	r3, #32
 8000534:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000536:	e00b      	b.n	8000550 <_PrintUnsigned+0x84>
        FieldWidth--;
 8000538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800053a:	3b01      	subs	r3, #1
 800053c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 800053e:	7efb      	ldrb	r3, [r7, #27]
 8000540:	4619      	mov	r1, r3
 8000542:	68f8      	ldr	r0, [r7, #12]
 8000544:	f7ff ff84 	bl	8000450 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	2b00      	cmp	r3, #0
 800054e:	db07      	blt.n	8000560 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000552:	2b00      	cmp	r3, #0
 8000554:	d005      	beq.n	8000562 <_PrintUnsigned+0x96>
 8000556:	69fa      	ldr	r2, [r7, #28]
 8000558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800055a:	429a      	cmp	r2, r3
 800055c:	d3ec      	bcc.n	8000538 <_PrintUnsigned+0x6c>
 800055e:	e000      	b.n	8000562 <_PrintUnsigned+0x96>
          break;
 8000560:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	68db      	ldr	r3, [r3, #12]
 8000566:	2b00      	cmp	r3, #0
 8000568:	db55      	blt.n	8000616 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d903      	bls.n	8000578 <_PrintUnsigned+0xac>
        NumDigits--;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	3b01      	subs	r3, #1
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	e009      	b.n	800058c <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000578:	68ba      	ldr	r2, [r7, #8]
 800057a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000580:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8000582:	697a      	ldr	r2, [r7, #20]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	429a      	cmp	r2, r3
 8000588:	d200      	bcs.n	800058c <_PrintUnsigned+0xc0>
          break;
 800058a:	e005      	b.n	8000598 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 800058c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	fb02 f303 	mul.w	r3, r2, r3
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000596:	e7e8      	b.n	800056a <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8000598:	68ba      	ldr	r2, [r7, #8]
 800059a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800059c:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a0:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005a6:	fb02 f303 	mul.w	r3, r2, r3
 80005aa:	68ba      	ldr	r2, [r7, #8]
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 80005b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000620 <_PrintUnsigned+0x154>)
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f7ff ff48 	bl	8000450 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	db08      	blt.n	80005da <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 80005c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d0:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 80005d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1df      	bne.n	8000598 <_PrintUnsigned+0xcc>
 80005d8:	e000      	b.n	80005dc <_PrintUnsigned+0x110>
        break;
 80005da:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80005dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d017      	beq.n	8000616 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 80005e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d014      	beq.n	8000616 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80005ec:	e00a      	b.n	8000604 <_PrintUnsigned+0x138>
          FieldWidth--;
 80005ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005f0:	3b01      	subs	r3, #1
 80005f2:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 80005f4:	2120      	movs	r1, #32
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f7ff ff2a 	bl	8000450 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	2b00      	cmp	r3, #0
 8000602:	db07      	blt.n	8000614 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000606:	2b00      	cmp	r3, #0
 8000608:	d005      	beq.n	8000616 <_PrintUnsigned+0x14a>
 800060a:	69fa      	ldr	r2, [r7, #28]
 800060c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800060e:	429a      	cmp	r2, r3
 8000610:	d3ed      	bcc.n	80005ee <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000612:	e000      	b.n	8000616 <_PrintUnsigned+0x14a>
            break;
 8000614:	bf00      	nop
}
 8000616:	bf00      	nop
 8000618:	3728      	adds	r7, #40	@ 0x28
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	0800a774 	.word	0x0800a774

08000624 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af02      	add	r7, sp, #8
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
 8000630:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	2b00      	cmp	r3, #0
 8000636:	bfb8      	it	lt
 8000638:	425b      	neglt	r3, r3
 800063a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800063c:	2301      	movs	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000640:	e007      	b.n	8000652 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	693a      	ldr	r2, [r7, #16]
 8000646:	fb92 f3f3 	sdiv	r3, r2, r3
 800064a:	613b      	str	r3, [r7, #16]
    Width++;
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	3301      	adds	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	429a      	cmp	r2, r3
 8000658:	daf3      	bge.n	8000642 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800065a:	683a      	ldr	r2, [r7, #0]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	429a      	cmp	r2, r3
 8000660:	d901      	bls.n	8000666 <_PrintInt+0x42>
    Width = NumDigits;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000666:	6a3b      	ldr	r3, [r7, #32]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00a      	beq.n	8000682 <_PrintInt+0x5e>
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	2b00      	cmp	r3, #0
 8000670:	db04      	blt.n	800067c <_PrintInt+0x58>
 8000672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000674:	f003 0304 	and.w	r3, r3, #4
 8000678:	2b00      	cmp	r3, #0
 800067a:	d002      	beq.n	8000682 <_PrintInt+0x5e>
    FieldWidth--;
 800067c:	6a3b      	ldr	r3, [r7, #32]
 800067e:	3b01      	subs	r3, #1
 8000680:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000684:	f003 0302 	and.w	r3, r3, #2
 8000688:	2b00      	cmp	r3, #0
 800068a:	d002      	beq.n	8000692 <_PrintInt+0x6e>
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d01c      	beq.n	80006cc <_PrintInt+0xa8>
 8000692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	2b00      	cmp	r3, #0
 800069a:	d117      	bne.n	80006cc <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d014      	beq.n	80006cc <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80006a2:	e00a      	b.n	80006ba <_PrintInt+0x96>
        FieldWidth--;
 80006a4:	6a3b      	ldr	r3, [r7, #32]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80006aa:	2120      	movs	r1, #32
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f7ff fecf 	bl	8000450 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db07      	blt.n	80006ca <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80006ba:	6a3b      	ldr	r3, [r7, #32]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d005      	beq.n	80006cc <_PrintInt+0xa8>
 80006c0:	697a      	ldr	r2, [r7, #20]
 80006c2:	6a3b      	ldr	r3, [r7, #32]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d3ed      	bcc.n	80006a4 <_PrintInt+0x80>
 80006c8:	e000      	b.n	80006cc <_PrintInt+0xa8>
          break;
 80006ca:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db4a      	blt.n	800076a <_PrintInt+0x146>
    if (v < 0) {
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	da07      	bge.n	80006ea <_PrintInt+0xc6>
      v = -v;
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	425b      	negs	r3, r3
 80006de:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 80006e0:	212d      	movs	r1, #45	@ 0x2d
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	f7ff feb4 	bl	8000450 <_StoreChar>
 80006e8:	e008      	b.n	80006fc <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80006ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d003      	beq.n	80006fc <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 80006f4:	212b      	movs	r1, #43	@ 0x2b
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f7ff feaa 	bl	8000450 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	2b00      	cmp	r3, #0
 8000702:	db32      	blt.n	800076a <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8000704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	2b00      	cmp	r3, #0
 800070c:	d01f      	beq.n	800074e <_PrintInt+0x12a>
 800070e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d11a      	bne.n	800074e <_PrintInt+0x12a>
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d117      	bne.n	800074e <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 800071e:	6a3b      	ldr	r3, [r7, #32]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d014      	beq.n	800074e <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000724:	e00a      	b.n	800073c <_PrintInt+0x118>
            FieldWidth--;
 8000726:	6a3b      	ldr	r3, [r7, #32]
 8000728:	3b01      	subs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 800072c:	2130      	movs	r1, #48	@ 0x30
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f7ff fe8e 	bl	8000450 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db07      	blt.n	800074c <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800073c:	6a3b      	ldr	r3, [r7, #32]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d005      	beq.n	800074e <_PrintInt+0x12a>
 8000742:	697a      	ldr	r2, [r7, #20]
 8000744:	6a3b      	ldr	r3, [r7, #32]
 8000746:	429a      	cmp	r2, r3
 8000748:	d3ed      	bcc.n	8000726 <_PrintInt+0x102>
 800074a:	e000      	b.n	800074e <_PrintInt+0x12a>
              break;
 800074c:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	2b00      	cmp	r3, #0
 8000754:	db09      	blt.n	800076a <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8000756:	68b9      	ldr	r1, [r7, #8]
 8000758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	68f8      	ldr	r0, [r7, #12]
 8000766:	f7ff feb1 	bl	80004cc <_PrintUnsigned>
      }
    }
  }
}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b0a2      	sub	sp, #136	@ 0x88
 8000778:	af02      	add	r7, sp, #8
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	653b      	str	r3, [r7, #80]	@ 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000786:	2340      	movs	r3, #64	@ 0x40
 8000788:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.Cnt            = 0u;
 800078a:	2300      	movs	r3, #0
 800078c:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	663b      	str	r3, [r7, #96]	@ 0x60
  BufferDesc.ReturnValue    = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	65fb      	str	r3, [r7, #92]	@ 0x5c

  do {
    c = *sFormat;
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    sFormat++;
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 80007a4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	f000 819f 	beq.w	8000aec <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 80007ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80007b2:	2b25      	cmp	r3, #37	@ 0x25
 80007b4:	f040 818d 	bne.w	8000ad2 <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80007b8:	2300      	movs	r3, #0
 80007ba:	673b      	str	r3, [r7, #112]	@ 0x70
      v = 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	67bb      	str	r3, [r7, #120]	@ 0x78
      do {
        c = *sFormat;
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        switch (c) {
 80007c8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80007cc:	3b23      	subs	r3, #35	@ 0x23
 80007ce:	2b0d      	cmp	r3, #13
 80007d0:	d83e      	bhi.n	8000850 <SEGGER_RTT_vprintf+0xdc>
 80007d2:	a201      	add	r2, pc, #4	@ (adr r2, 80007d8 <SEGGER_RTT_vprintf+0x64>)
 80007d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d8:	08000841 	.word	0x08000841
 80007dc:	08000851 	.word	0x08000851
 80007e0:	08000851 	.word	0x08000851
 80007e4:	08000851 	.word	0x08000851
 80007e8:	08000851 	.word	0x08000851
 80007ec:	08000851 	.word	0x08000851
 80007f0:	08000851 	.word	0x08000851
 80007f4:	08000851 	.word	0x08000851
 80007f8:	08000831 	.word	0x08000831
 80007fc:	08000851 	.word	0x08000851
 8000800:	08000811 	.word	0x08000811
 8000804:	08000851 	.word	0x08000851
 8000808:	08000851 	.word	0x08000851
 800080c:	08000821 	.word	0x08000821
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8000810:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	673b      	str	r3, [r7, #112]	@ 0x70
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	3301      	adds	r3, #1
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	e01a      	b.n	8000856 <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8000820:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000822:	f043 0302 	orr.w	r3, r3, #2
 8000826:	673b      	str	r3, [r7, #112]	@ 0x70
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	3301      	adds	r3, #1
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	e012      	b.n	8000856 <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8000830:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	673b      	str	r3, [r7, #112]	@ 0x70
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	3301      	adds	r3, #1
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	e00a      	b.n	8000856 <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8000840:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	673b      	str	r3, [r7, #112]	@ 0x70
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	3301      	adds	r3, #1
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	e002      	b.n	8000856 <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 8000850:	2300      	movs	r3, #0
 8000852:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000854:	bf00      	nop
        }
      } while (v);
 8000856:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1b1      	bne.n	80007c0 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800085c:	2300      	movs	r3, #0
 800085e:	66fb      	str	r3, [r7, #108]	@ 0x6c
      do {
        c = *sFormat;
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c < '0') || (c > '9')) {
 8000868:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800086c:	2b2f      	cmp	r3, #47	@ 0x2f
 800086e:	d912      	bls.n	8000896 <SEGGER_RTT_vprintf+0x122>
 8000870:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000874:	2b39      	cmp	r3, #57	@ 0x39
 8000876:	d80e      	bhi.n	8000896 <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	3301      	adds	r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800087e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000880:	4613      	mov	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	461a      	mov	r2, r3
 800088a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800088e:	4413      	add	r3, r2
 8000890:	3b30      	subs	r3, #48	@ 0x30
 8000892:	66fb      	str	r3, [r7, #108]	@ 0x6c
        c = *sFormat;
 8000894:	e7e4      	b.n	8000860 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8000896:	2300      	movs	r3, #0
 8000898:	677b      	str	r3, [r7, #116]	@ 0x74
      c = *sFormat;
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (c == '.') {
 80008a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80008a8:	d11d      	bne.n	80008e6 <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	3301      	adds	r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          if ((c < '0') || (c > '9')) {
 80008b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80008be:	d912      	bls.n	80008e6 <SEGGER_RTT_vprintf+0x172>
 80008c0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008c4:	2b39      	cmp	r3, #57	@ 0x39
 80008c6:	d80e      	bhi.n	80008e6 <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	3301      	adds	r3, #1
 80008cc:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 80008ce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80008d0:	4613      	mov	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4413      	add	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	461a      	mov	r2, r3
 80008da:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008de:	4413      	add	r3, r2
 80008e0:	3b30      	subs	r3, #48	@ 0x30
 80008e2:	677b      	str	r3, [r7, #116]	@ 0x74
          c = *sFormat;
 80008e4:	e7e4      	b.n	80008b0 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 80008ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008f2:	2b6c      	cmp	r3, #108	@ 0x6c
 80008f4:	d003      	beq.n	80008fe <SEGGER_RTT_vprintf+0x18a>
 80008f6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008fa:	2b68      	cmp	r3, #104	@ 0x68
 80008fc:	d107      	bne.n	800090e <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	3301      	adds	r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if ((c == 'l') || (c == 'h')) {
 800090c:	e7ef      	b.n	80008ee <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800090e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000912:	2b25      	cmp	r3, #37	@ 0x25
 8000914:	f000 80d1 	beq.w	8000aba <SEGGER_RTT_vprintf+0x346>
 8000918:	2b25      	cmp	r3, #37	@ 0x25
 800091a:	f2c0 80d5 	blt.w	8000ac8 <SEGGER_RTT_vprintf+0x354>
 800091e:	2b78      	cmp	r3, #120	@ 0x78
 8000920:	f300 80d2 	bgt.w	8000ac8 <SEGGER_RTT_vprintf+0x354>
 8000924:	2b58      	cmp	r3, #88	@ 0x58
 8000926:	f2c0 80cf 	blt.w	8000ac8 <SEGGER_RTT_vprintf+0x354>
 800092a:	3b58      	subs	r3, #88	@ 0x58
 800092c:	2b20      	cmp	r3, #32
 800092e:	f200 80cb 	bhi.w	8000ac8 <SEGGER_RTT_vprintf+0x354>
 8000932:	a201      	add	r2, pc, #4	@ (adr r2, 8000938 <SEGGER_RTT_vprintf+0x1c4>)
 8000934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000938:	08000a2f 	.word	0x08000a2f
 800093c:	08000ac9 	.word	0x08000ac9
 8000940:	08000ac9 	.word	0x08000ac9
 8000944:	08000ac9 	.word	0x08000ac9
 8000948:	08000ac9 	.word	0x08000ac9
 800094c:	08000ac9 	.word	0x08000ac9
 8000950:	08000ac9 	.word	0x08000ac9
 8000954:	08000ac9 	.word	0x08000ac9
 8000958:	08000ac9 	.word	0x08000ac9
 800095c:	08000ac9 	.word	0x08000ac9
 8000960:	08000ac9 	.word	0x08000ac9
 8000964:	080009bd 	.word	0x080009bd
 8000968:	080009e3 	.word	0x080009e3
 800096c:	08000ac9 	.word	0x08000ac9
 8000970:	08000ac9 	.word	0x08000ac9
 8000974:	08000ac9 	.word	0x08000ac9
 8000978:	08000ac9 	.word	0x08000ac9
 800097c:	08000ac9 	.word	0x08000ac9
 8000980:	08000ac9 	.word	0x08000ac9
 8000984:	08000ac9 	.word	0x08000ac9
 8000988:	08000ac9 	.word	0x08000ac9
 800098c:	08000ac9 	.word	0x08000ac9
 8000990:	08000ac9 	.word	0x08000ac9
 8000994:	08000ac9 	.word	0x08000ac9
 8000998:	08000a95 	.word	0x08000a95
 800099c:	08000ac9 	.word	0x08000ac9
 80009a0:	08000ac9 	.word	0x08000ac9
 80009a4:	08000a55 	.word	0x08000a55
 80009a8:	08000ac9 	.word	0x08000ac9
 80009ac:	08000a09 	.word	0x08000a09
 80009b0:	08000ac9 	.word	0x08000ac9
 80009b4:	08000ac9 	.word	0x08000ac9
 80009b8:	08000a2f 	.word	0x08000a2f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	1d19      	adds	r1, r3, #4
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	6011      	str	r1, [r2, #0]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	67bb      	str	r3, [r7, #120]	@ 0x78
        c0 = (char)v;
 80009ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80009cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        _StoreChar(&BufferDesc, c0);
 80009d0:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80009d4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80009d8:	4611      	mov	r1, r2
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fd38 	bl	8000450 <_StoreChar>
        break;
 80009e0:	e073      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	1d19      	adds	r1, r3, #4
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	6011      	str	r1, [r2, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80009f0:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80009f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009fe:	220a      	movs	r2, #10
 8000a00:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000a02:	f7ff fe0f 	bl	8000624 <_PrintInt>
        break;
 8000a06:	e060      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	1d19      	adds	r1, r3, #4
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	6011      	str	r1, [r2, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8000a16:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000a18:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000a1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a26:	220a      	movs	r2, #10
 8000a28:	f7ff fd50 	bl	80004cc <_PrintUnsigned>
        break;
 8000a2c:	e04d      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	1d19      	adds	r1, r3, #4
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	6011      	str	r1, [r2, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8000a3c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000a3e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000a42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a4c:	2210      	movs	r2, #16
 8000a4e:	f7ff fd3d 	bl	80004cc <_PrintUnsigned>
        break;
 8000a52:	e03a      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	1d19      	adds	r1, r3, #4
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	6011      	str	r1, [r2, #0]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	66bb      	str	r3, [r7, #104]	@ 0x68
          do {
            c = *s;
 8000a62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            s++;
 8000a6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (c == '\0') {
 8000a70:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d00b      	beq.n	8000a90 <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 8000a78:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8000a7c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fce4 	bl	8000450 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8000a88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	dae9      	bge.n	8000a62 <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 8000a8e:	e01c      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
              break;
 8000a90:	bf00      	nop
        break;
 8000a92:	e01a      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	1d19      	adds	r1, r3, #4
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	6011      	str	r1, [r2, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	67bb      	str	r3, [r7, #120]	@ 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8000aa2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000aa4:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	9301      	str	r3, [sp, #4]
 8000aac:	2308      	movs	r3, #8
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	2210      	movs	r2, #16
 8000ab4:	f7ff fd0a 	bl	80004cc <_PrintUnsigned>
        break;
 8000ab8:	e007      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8000aba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000abe:	2125      	movs	r1, #37	@ 0x25
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fcc5 	bl	8000450 <_StoreChar>
        break;
 8000ac6:	e000      	b.n	8000aca <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 8000ac8:	bf00      	nop
      }
      sFormat++;
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	3301      	adds	r3, #1
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	e007      	b.n	8000ae2 <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 8000ad2:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8000ad6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fcb7 	bl	8000450 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8000ae2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	f6bf ae56 	bge.w	8000796 <SEGGER_RTT_vprintf+0x22>
 8000aea:	e000      	b.n	8000aee <SEGGER_RTT_vprintf+0x37a>
      break;
 8000aec:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8000aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	dd0d      	ble.n	8000b10 <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8000af4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d006      	beq.n	8000b08 <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8000afa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	f7ff fc80 	bl	8000408 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8000b08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000b0c:	4413      	add	r3, r2
 8000b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }
  return BufferDesc.ReturnValue;
 8000b10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3780      	adds	r7, #128	@ 0x80
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop

08000b1c <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8000b1c:	b40e      	push	{r1, r2, r3}
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b085      	sub	sp, #20
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	461a      	mov	r2, r3
 8000b32:	69f9      	ldr	r1, [r7, #28]
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff fe1d 	bl	8000774 <SEGGER_RTT_vprintf>
 8000b3a:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b48:	b003      	add	sp, #12
 8000b4a:	4770      	bx	lr

08000b4c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
void MX_DMA_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b52:	4b29      	ldr	r3, [pc, #164]	@ (8000bf8 <MX_DMA_Init+0xac>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a28      	ldr	r2, [pc, #160]	@ (8000bf8 <MX_DMA_Init+0xac>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6153      	str	r3, [r2, #20]
 8000b5e:	4b26      	ldr	r3, [pc, #152]	@ (8000bf8 <MX_DMA_Init+0xac>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000b6a:	4b24      	ldr	r3, [pc, #144]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b6c:	4a24      	ldr	r2, [pc, #144]	@ (8000c00 <MX_DMA_Init+0xb4>)
 8000b6e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000b70:	4b22      	ldr	r3, [pc, #136]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b76:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000b78:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b7a:	2240      	movs	r2, #64	@ 0x40
 8000b7c:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b80:	2280      	movs	r2, #128	@ 0x80
 8000b82:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b96:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000b98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b9c:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000b9e:	4817      	ldr	r0, [pc, #92]	@ (8000bfc <MX_DMA_Init+0xb0>)
 8000ba0:	f000 ff84 	bl	8001aac <HAL_DMA_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_DMA_Init+0x62>
  {
    Error_Handler();
 8000baa:	f000 f98b 	bl	8000ec4 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	200e      	movs	r0, #14
 8000bb4:	f000 ff37 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000bb8:	200e      	movs	r0, #14
 8000bba:	f000 ff50 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	200f      	movs	r0, #15
 8000bc4:	f000 ff2f 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000bc8:	200f      	movs	r0, #15
 8000bca:	f000 ff48 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2010      	movs	r0, #16
 8000bd4:	f000 ff27 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000bd8:	2010      	movs	r0, #16
 8000bda:	f000 ff40 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2011      	movs	r0, #17
 8000be4:	f000 ff1f 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000be8:	2011      	movs	r0, #17
 8000bea:	f000 ff38 	bl	8001a5e <HAL_NVIC_EnableIRQ>

}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	20000518 	.word	0x20000518
 8000c00:	40020008 	.word	0x40020008

08000c04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	4a13      	ldr	r2, [pc, #76]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c10:	f043 0310 	orr.w	r3, r3, #16
 8000c14:	6193      	str	r3, [r2, #24]
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f003 0310 	and.w	r3, r3, #16
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c28:	f043 0320 	orr.w	r3, r3, #32
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 0320 	and.w	r3, r3, #32
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6193      	str	r3, [r2, #24]
 8000c46:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <MX_GPIO_Init+0x58>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40021000 	.word	0x40021000

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int i;
	uart_ctx_t * uart_ctx;
	memset(&ctx, 0, sizeof(ctx_t));
 8000c66:	f242 0254 	movw	r2, #8276	@ 0x2054
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4850      	ldr	r0, [pc, #320]	@ (8000db0 <main+0x150>)
 8000c6e:	f009 fcb1 	bl	800a5d4 <memset>
	ctx.uart1.name = "UART1";
 8000c72:	4b4f      	ldr	r3, [pc, #316]	@ (8000db0 <main+0x150>)
 8000c74:	4a4f      	ldr	r2, [pc, #316]	@ (8000db4 <main+0x154>)
 8000c76:	601a      	str	r2, [r3, #0]
	ctx.uart1.huart = &huart1;
 8000c78:	4b4d      	ldr	r3, [pc, #308]	@ (8000db0 <main+0x150>)
 8000c7a:	4a4f      	ldr	r2, [pc, #316]	@ (8000db8 <main+0x158>)
 8000c7c:	605a      	str	r2, [r3, #4]
	ctx.uart1.hdma_rx = &hdma_usart1_rx;
 8000c7e:	4b4c      	ldr	r3, [pc, #304]	@ (8000db0 <main+0x150>)
 8000c80:	4a4e      	ldr	r2, [pc, #312]	@ (8000dbc <main+0x15c>)
 8000c82:	60da      	str	r2, [r3, #12]
	ctx.uart1.hdma_tx = &hdma_usart1_tx;
 8000c84:	4b4a      	ldr	r3, [pc, #296]	@ (8000db0 <main+0x150>)
 8000c86:	4a4e      	ldr	r2, [pc, #312]	@ (8000dc0 <main+0x160>)
 8000c88:	611a      	str	r2, [r3, #16]
	ctx.uart1.irq_num = USART1_IRQn;
 8000c8a:	4b49      	ldr	r3, [pc, #292]	@ (8000db0 <main+0x150>)
 8000c8c:	2225      	movs	r2, #37	@ 0x25
 8000c8e:	721a      	strb	r2, [r3, #8]
	ctx.uart2.name = "UART2";
 8000c90:	4b47      	ldr	r3, [pc, #284]	@ (8000db0 <main+0x150>)
 8000c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b4a      	ldr	r3, [pc, #296]	@ (8000dc4 <main+0x164>)
 8000c9a:	6293      	str	r3, [r2, #40]	@ 0x28
	ctx.uart2.huart = &huart2;
 8000c9c:	4b44      	ldr	r3, [pc, #272]	@ (8000db0 <main+0x150>)
 8000c9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b48      	ldr	r3, [pc, #288]	@ (8000dc8 <main+0x168>)
 8000ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ctx.uart2.hdma_rx = &hdma_usart2_rx;
 8000ca8:	4b41      	ldr	r3, [pc, #260]	@ (8000db0 <main+0x150>)
 8000caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b46      	ldr	r3, [pc, #280]	@ (8000dcc <main+0x16c>)
 8000cb2:	6353      	str	r3, [r2, #52]	@ 0x34
	ctx.uart2.hdma_tx = &hdma_usart2_tx;
 8000cb4:	4b3e      	ldr	r3, [pc, #248]	@ (8000db0 <main+0x150>)
 8000cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b44      	ldr	r3, [pc, #272]	@ (8000dd0 <main+0x170>)
 8000cbe:	6393      	str	r3, [r2, #56]	@ 0x38
	ctx.uart2.irq_num = USART2_IRQn;
 8000cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8000db0 <main+0x150>)
 8000cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cc6:	2226      	movs	r2, #38	@ 0x26
 8000cc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	ctx.memcpy_dma = &hdma_memtomem_dma1_channel1;
 8000ccc:	4b38      	ldr	r3, [pc, #224]	@ (8000db0 <main+0x150>)
 8000cce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd4 <main+0x174>)
 8000cd6:	6513      	str	r3, [r2, #80]	@ 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd8:	f000 fd48 	bl	800176c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cdc:	f000 f87e 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce0:	f7ff ff90 	bl	8000c04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ce4:	f7ff ff32 	bl	8000b4c <MX_DMA_Init>
  MX_RTC_Init();
 8000ce8:	f000 f8f2 	bl	8000ed0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000cec:	f000 faf2 	bl	80012d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000cf0:	f000 fb1a 	bl	8001328 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000cf4:	f008 fe6a 	bl	80099cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000cf8:	2005      	movs	r0, #5
 8000cfa:	f000 fe89 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn  , 0, 2);
 8000cfe:	2202      	movs	r2, #2
 8000d00:	2100      	movs	r1, #0
 8000d02:	2013      	movs	r0, #19
 8000d04:	f000 fe8f 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn , 0, 3);
 8000d08:	2203      	movs	r2, #3
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2014      	movs	r0, #20
 8000d0e:	f000 fe8a 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(USART1_IRQn          , 0, 1);
 8000d12:	2201      	movs	r2, #1
 8000d14:	2100      	movs	r1, #0
 8000d16:	2025      	movs	r0, #37	@ 0x25
 8000d18:	f000 fe85 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(USART2_IRQn          , 0, 1);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2026      	movs	r0, #38	@ 0x26
 8000d22:	f000 fe80 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn   , 0, 2); // DMA for memory copy.
 8000d26:	2202      	movs	r2, #2
 8000d28:	2100      	movs	r1, #0
 8000d2a:	200b      	movs	r0, #11
 8000d2c:	f000 fe7b 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn   , 1, 1); // UART1 Tx
 8000d30:	2201      	movs	r2, #1
 8000d32:	2101      	movs	r1, #1
 8000d34:	200e      	movs	r0, #14
 8000d36:	f000 fe76 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn   , 1, 0); // UART1 Rx
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	200f      	movs	r0, #15
 8000d40:	f000 fe71 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn   , 1, 1); // UART2 Tx
 8000d44:	2201      	movs	r2, #1
 8000d46:	2101      	movs	r1, #1
 8000d48:	2010      	movs	r0, #16
 8000d4a:	f000 fe6c 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn   , 1, 0); // UART2 Rx
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2101      	movs	r1, #1
 8000d52:	2011      	movs	r0, #17
 8000d54:	f000 fe67 	bl	8001a26 <HAL_NVIC_SetPriority>

  __HAL_UART_DISABLE(&huart1);
 8000d58:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <main+0x158>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <main+0x158>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000d66:	60da      	str	r2, [r3, #12]
  __HAL_UART_DISABLE(&huart2);
 8000d68:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <main+0x168>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <main+0x168>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000d76:	60da      	str	r2, [r3, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for (i = 0; i < 2; i++)
 8000d78:	2300      	movs	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	e013      	b.n	8000da6 <main+0x146>
	  {
		  while (CDC_Transmit_FS("USB\r\n", 5, 2 * i) == USBD_BUSY)
 8000d7e:	bf00      	nop
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	2105      	movs	r1, #5
 8000d8c:	4812      	ldr	r0, [pc, #72]	@ (8000dd8 <main+0x178>)
 8000d8e:	f008 ffa7 	bl	8009ce0 <CDC_Transmit_FS>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d0f3      	beq.n	8000d80 <main+0x120>
	      {
	      /* Until data out. */
	      }
		  HAL_Delay(1000);
 8000d98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d9c:	f000 fd48 	bl	8001830 <HAL_Delay>
	  for (i = 0; i < 2; i++)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3301      	adds	r3, #1
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	dde8      	ble.n	8000d7e <main+0x11e>
 8000dac:	e7e4      	b.n	8000d78 <main+0x118>
 8000dae:	bf00      	nop
 8000db0:	2000055c 	.word	0x2000055c
 8000db4:	0800a678 	.word	0x0800a678
 8000db8:	200025c4 	.word	0x200025c4
 8000dbc:	20002654 	.word	0x20002654
 8000dc0:	20002698 	.word	0x20002698
 8000dc4:	0800a680 	.word	0x0800a680
 8000dc8:	2000260c 	.word	0x2000260c
 8000dcc:	200026dc 	.word	0x200026dc
 8000dd0:	20002720 	.word	0x20002720
 8000dd4:	20000518 	.word	0x20000518
 8000dd8:	0800a688 	.word	0x0800a688

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	@ 0x50
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000de6:	2228      	movs	r2, #40	@ 0x28
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f009 fbf2 	bl	800a5d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000e0c:	2305      	movs	r3, #5
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e22:	2302      	movs	r3, #2
 8000e24:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e2c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e36:	4618      	mov	r0, r3
 8000e38:	f003 f99e 	bl	8004178 <HAL_RCC_OscConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e42:	f000 f83f 	bl	8000ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e46:	230f      	movs	r3, #15
 8000e48:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e56:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2102      	movs	r1, #2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f003 fc0a 	bl	800467c <HAL_RCC_ClockConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e6e:	f000 f829 	bl	8000ec4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8000e72:	2311      	movs	r3, #17
 8000e74:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000e76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e7a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	4618      	mov	r0, r3
 8000e84:	f003 fd88 	bl	8004998 <HAL_RCCEx_PeriphCLKConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000e8e:	f000 f819 	bl	8000ec4 <Error_Handler>
  }
}
 8000e92:	bf00      	nop
 8000e94:	3750      	adds	r7, #80	@ 0x50
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
    SEGGER_RTT_printf(0, "_Error_Handler: %s #%d\n", file, line);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	4905      	ldr	r1, [pc, #20]	@ (8000ec0 <_Error_Handler+0x24>)
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff fe35 	bl	8000b1c <SEGGER_RTT_printf>
    HAL_Delay(1000);
 8000eb2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eb6:	f000 fcbb 	bl	8001830 <HAL_Delay>
    SEGGER_RTT_printf(0, "_Error_Handler: %s #%d\n", file, line);
 8000eba:	bf00      	nop
 8000ebc:	e7f3      	b.n	8000ea6 <_Error_Handler+0xa>
 8000ebe:	bf00      	nop
 8000ec0:	0800a690 	.word	0x0800a690

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <MX_RTC_Init+0x30>)
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	@ (8000f04 <MX_RTC_Init+0x34>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <MX_RTC_Init+0x30>)
 8000edc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee0:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <MX_RTC_Init+0x30>)
 8000ee4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ee8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <MX_RTC_Init+0x30>)
 8000eec:	f003 fec0 	bl	8004c70 <HAL_RTC_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000ef6:	f7ff ffe5 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200025b0 	.word	0x200025b0
 8000f04:	40002800 	.word	0x40002800

08000f08 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0b      	ldr	r2, [pc, #44]	@ (8000f44 <HAL_RTC_MspInit+0x3c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d110      	bne.n	8000f3c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000f1a:	f003 f921 	bl	8004160 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <HAL_RTC_MspInit+0x40>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	4a09      	ldr	r2, [pc, #36]	@ (8000f48 <HAL_RTC_MspInit+0x40>)
 8000f24:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f28:	61d3      	str	r3, [r2, #28]
 8000f2a:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <HAL_RTC_MspInit+0x40>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f36:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <HAL_RTC_MspInit+0x44>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40002800 	.word	0x40002800
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	4242043c 	.word	0x4242043c

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f56:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <HAL_MspInit+0x6c>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	4a18      	ldr	r2, [pc, #96]	@ (8000fbc <HAL_MspInit+0x6c>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6193      	str	r3, [r2, #24]
 8000f62:	4b16      	ldr	r3, [pc, #88]	@ (8000fbc <HAL_MspInit+0x6c>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <HAL_MspInit+0x6c>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	4a12      	ldr	r2, [pc, #72]	@ (8000fbc <HAL_MspInit+0x6c>)
 8000f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f78:	61d3      	str	r3, [r2, #28]
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <HAL_MspInit+0x6c>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2005      	movs	r0, #5
 8000f8c:	f000 fd4b 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000f90:	2005      	movs	r0, #5
 8000f92:	f000 fd64 	bl	8001a5e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <HAL_MspInit+0x70>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <HAL_MspInit+0x70>)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010000 	.word	0x40010000

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <NMI_Handler+0x4>

08000fcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001014:	f000 fbf0 	bl	80017f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001018:	f000 fd3b 	bl	8001a92 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <DMA1_Channel4_IRQHandler+0x10>)
 8001032:	f001 f87d 	bl	8002130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20002698 	.word	0x20002698

08001040 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <DMA1_Channel5_IRQHandler+0x10>)
 8001046:	f001 f873 	bl	8002130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20002654 	.word	0x20002654

08001054 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <DMA1_Channel6_IRQHandler+0x10>)
 800105a:	f001 f869 	bl	8002130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200026dc 	.word	0x200026dc

08001068 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <DMA1_Channel7_IRQHandler+0x10>)
 800106e:	f001 f85f 	bl	8002130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20002720 	.word	0x20002720

0800107c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001082:	f001 fc29 	bl	80028d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20002f90 	.word	0x20002f90

08001090 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001096:	4843      	ldr	r0, [pc, #268]	@ (80011a4 <USART1_IRQHandler+0x114>)
 8001098:	f004 f858 	bl	800514c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
 800109c:	4b41      	ldr	r3, [pc, #260]	@ (80011a4 <USART1_IRQHandler+0x114>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	2b10      	cmp	r3, #16
 80010a8:	d177      	bne.n	800119a <USART1_IRQHandler+0x10a>
    uart_ctx_t * const uart_ctx = &ctx.uart1;
 80010aa:	4b3f      	ldr	r3, [pc, #252]	@ (80011a8 <USART1_IRQHandler+0x118>)
 80010ac:	60bb      	str	r3, [r7, #8]
    int buf_len; 

    __HAL_UART_CLEAR_IDLEFLAG(uart_ctx->huart);
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]

    if (uart_ctx->buf.idx == 0) {
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d107      	bne.n	80010e4 <USART1_IRQHandler+0x54>
      buf_len = DBL_BUF_TOTAL_LEN - __HAL_DMA_GET_COUNTER(uart_ctx->hdma_rx); 
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	e006      	b.n	80010f2 <USART1_IRQHandler+0x62>
    } else {
      buf_len = DBL_BUF_LEN - __HAL_DMA_GET_COUNTER(uart_ctx->hdma_rx); 
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80010f0:	60fb      	str	r3, [r7, #12]
    }

    // SEGGER_RTT_printf(0, "idle[1]: %d, len=%d\n", uart_ctx->buf.idx, buf_len);
    HAL_UART_DMAStop(uart_ctx->huart);
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f003 ffa9 	bl	800504e <HAL_UART_DMAStop>
    if (buf_len > 0) {
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	dd3c      	ble.n	800117c <USART1_IRQHandler+0xec>
      if (buf_len == 1) {
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d112      	bne.n	800112e <USART1_IRQHandler+0x9e>
        uart_ctx->buf.data_rest[0] = uart_ctx->buf.data[uart_ctx->buf.idx][0];
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	029b      	lsls	r3, r3, #10
 8001114:	4413      	add	r3, r2
 8001116:	3314      	adds	r3, #20
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
        uart_ctx->buf.rest_len = 1;
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001126:	461a      	mov	r2, r3
 8001128:	2301      	movs	r3, #1
 800112a:	61d3      	str	r3, [r2, #28]
 800112c:	e026      	b.n	800117c <USART1_IRQHandler+0xec>
      } else {
        // memcpy(uart_ctx->buf.data_rest, uart_ctx->buf.data[uart_ctx->buf.idx], buf_len);
        HAL_DMA_Start(ctx.memcpy_dma, (uint32_t)uart_ctx->buf.data[uart_ctx->buf.idx], (uint32_t)uart_ctx->buf.data_rest, buf_len);
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <USART1_IRQHandler+0x118>)
 8001130:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001134:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	029b      	lsls	r3, r3, #10
 8001140:	3310      	adds	r3, #16
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	4413      	add	r3, r2
 8001146:	3304      	adds	r3, #4
 8001148:	4619      	mov	r1, r3
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001150:	461a      	mov	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f000 fd04 	bl	8001b60 <HAL_DMA_Start>
        if (HAL_DMA_PollForTransfer(ctx.memcpy_dma, HAL_DMA_FULL_TRANSFER, 2) == HAL_OK) {
 8001158:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <USART1_IRQHandler+0x118>)
 800115a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800115e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001160:	2202      	movs	r2, #2
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fe51 	bl	8001e0c <HAL_DMA_PollForTransfer>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d105      	bne.n	800117c <USART1_IRQHandler+0xec>
          uart_ctx->buf.rest_len = buf_len;
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001176:	461a      	mov	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	61d3      	str	r3, [r2, #28]
        }
      }
    }

    // Set index of double buffer to next.
    uart_ctx->buf.idx = 0;
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001182:	461a      	mov	r2, r3
 8001184:	2300      	movs	r3, #0
 8001186:	6213      	str	r3, [r2, #32]
    HAL_UART_Receive_DMA(uart_ctx->huart, (uint8_t *)uart_ctx->buf.data[0], DBL_BUF_TOTAL_LEN);
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	6858      	ldr	r0, [r3, #4]
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	3314      	adds	r3, #20
 8001190:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001194:	4619      	mov	r1, r3
 8001196:	f003 ff35 	bl	8005004 <HAL_UART_Receive_DMA>

  }
  /* USER CODE END USART1_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200025c4 	.word	0x200025c4
 80011a8:	2000055c 	.word	0x2000055c

080011ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  // SEGGER_RTT_printf(0, "Uart2 IRQ\n");
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011b2:	4842      	ldr	r0, [pc, #264]	@ (80012bc <USART2_IRQHandler+0x110>)
 80011b4:	f003 ffca 	bl	800514c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)) {
 80011b8:	4b40      	ldr	r3, [pc, #256]	@ (80012bc <USART2_IRQHandler+0x110>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b10      	cmp	r3, #16
 80011c4:	d175      	bne.n	80012b2 <USART2_IRQHandler+0x106>
    uart_ctx_t * const uart_ctx = &ctx.uart2;
 80011c6:	4b3e      	ldr	r3, [pc, #248]	@ (80012c0 <USART2_IRQHandler+0x114>)
 80011c8:	60bb      	str	r3, [r7, #8]
    int buf_len; 

    __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b3b      	ldr	r3, [pc, #236]	@ (80012bc <USART2_IRQHandler+0x110>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b39      	ldr	r3, [pc, #228]	@ (80012bc <USART2_IRQHandler+0x110>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]

    if (uart_ctx->buf.idx == 0) {
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d107      	bne.n	80011fc <USART2_IRQHandler+0x50>
      buf_len = DBL_BUF_TOTAL_LEN - __HAL_DMA_GET_COUNTER(uart_ctx->hdma_rx); 
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	e006      	b.n	800120a <USART2_IRQHandler+0x5e>
    } else {
      buf_len = DBL_BUF_LEN - __HAL_DMA_GET_COUNTER(uart_ctx->hdma_rx); 
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8001208:	60fb      	str	r3, [r7, #12]
    }

    // SEGGER_RTT_printf(0, "idle[2]: %d, len=%d\n", uart_ctx->buf.idx, buf_len);
    HAL_UART_DMAStop(uart_ctx->huart);
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	f003 ff1d 	bl	800504e <HAL_UART_DMAStop>
    if (buf_len > 0) {
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	dd3c      	ble.n	8001294 <USART2_IRQHandler+0xe8>
      if (buf_len == 1) {
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d112      	bne.n	8001246 <USART2_IRQHandler+0x9a>
        uart_ctx->buf.data_rest[0] = uart_ctx->buf.data[uart_ctx->buf.idx][0];
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	029b      	lsls	r3, r3, #10
 800122c:	4413      	add	r3, r2
 800122e:	3314      	adds	r3, #20
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
        uart_ctx->buf.rest_len = 1;
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800123e:	461a      	mov	r2, r3
 8001240:	2301      	movs	r3, #1
 8001242:	61d3      	str	r3, [r2, #28]
 8001244:	e026      	b.n	8001294 <USART2_IRQHandler+0xe8>
      } else {
        // memcpy(uart_ctx->buf.data_rest, uart_ctx->buf.data[uart_ctx->buf.idx], buf_len);
        HAL_DMA_Start(ctx.memcpy_dma, (uint32_t)uart_ctx->buf.data[uart_ctx->buf.idx], (uint32_t)uart_ctx->buf.data_rest, buf_len);
 8001246:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <USART2_IRQHandler+0x118>)
 8001248:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800124c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	029b      	lsls	r3, r3, #10
 8001258:	3310      	adds	r3, #16
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	4413      	add	r3, r2
 800125e:	3304      	adds	r3, #4
 8001260:	4619      	mov	r1, r3
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	f603 0314 	addw	r3, r3, #2068	@ 0x814
 8001268:	461a      	mov	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f000 fc78 	bl	8001b60 <HAL_DMA_Start>
        if (HAL_DMA_PollForTransfer(ctx.memcpy_dma, HAL_DMA_FULL_TRANSFER, 10) == HAL_OK) {
 8001270:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <USART2_IRQHandler+0x118>)
 8001272:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001278:	220a      	movs	r2, #10
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fdc5 	bl	8001e0c <HAL_DMA_PollForTransfer>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d105      	bne.n	8001294 <USART2_IRQHandler+0xe8>
          uart_ctx->buf.rest_len = buf_len;
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	61d3      	str	r3, [r2, #28]
        }
      }
    }

    // Set index of double buffer to next.
    uart_ctx->buf.idx = 0;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800129a:	461a      	mov	r2, r3
 800129c:	2300      	movs	r3, #0
 800129e:	6213      	str	r3, [r2, #32]
    HAL_UART_Receive_DMA(uart_ctx->huart, (uint8_t *)uart_ctx->buf.data[0], DBL_BUF_TOTAL_LEN);
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	6858      	ldr	r0, [r3, #4]
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	3314      	adds	r3, #20
 80012a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012ac:	4619      	mov	r1, r3
 80012ae:	f003 fea9 	bl	8005004 <HAL_UART_Receive_DMA>
  }
  /* USER CODE END USART2_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000260c 	.word	0x2000260c
 80012c0:	20001584 	.word	0x20001584
 80012c4:	2000055c 	.word	0x2000055c

080012c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <MX_USART1_UART_Init+0x4c>)
 80012da:	4a12      	ldr	r2, [pc, #72]	@ (8001324 <MX_USART1_UART_Init+0x50>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <MX_USART1_UART_Init+0x4c>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <MX_USART1_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <MX_USART1_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <MX_USART1_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MX_USART1_UART_Init+0x4c>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <MX_USART1_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <MX_USART1_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_USART1_UART_Init+0x4c>)
 800130c:	f003 fdb9 	bl	8004e82 <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001316:	f7ff fdd5 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200025c4 	.word	0x200025c4
 8001324:	40013800 	.word	0x40013800

08001328 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 800132e:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <MX_USART2_UART_Init+0x50>)
 8001330:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 8001334:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001338:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001346:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800134c:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 800134e:	220c      	movs	r2, #12
 8001350:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001352:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	@ (8001374 <MX_USART2_UART_Init+0x4c>)
 8001360:	f003 fd8f 	bl	8004e82 <HAL_UART_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800136a:	f7ff fdab 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000260c 	.word	0x2000260c
 8001378:	40004400 	.word	0x40004400

0800137c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	@ 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0318 	add.w	r3, r7, #24
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a8d      	ldr	r2, [pc, #564]	@ (80015cc <HAL_UART_MspInit+0x250>)
 8001398:	4293      	cmp	r3, r2
 800139a:	f040 8088 	bne.w	80014ae <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800139e:	4b8c      	ldr	r3, [pc, #560]	@ (80015d0 <HAL_UART_MspInit+0x254>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	4a8b      	ldr	r2, [pc, #556]	@ (80015d0 <HAL_UART_MspInit+0x254>)
 80013a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a8:	6193      	str	r3, [r2, #24]
 80013aa:	4b89      	ldr	r3, [pc, #548]	@ (80015d0 <HAL_UART_MspInit+0x254>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	4b86      	ldr	r3, [pc, #536]	@ (80015d0 <HAL_UART_MspInit+0x254>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	4a85      	ldr	r2, [pc, #532]	@ (80015d0 <HAL_UART_MspInit+0x254>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	6193      	str	r3, [r2, #24]
 80013c2:	4b83      	ldr	r3, [pc, #524]	@ (80015d0 <HAL_UART_MspInit+0x254>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	4619      	mov	r1, r3
 80013e2:	487c      	ldr	r0, [pc, #496]	@ (80015d4 <HAL_UART_MspInit+0x258>)
 80013e4:	f000 ffd8 	bl	8002398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 0318 	add.w	r3, r7, #24
 80013fa:	4619      	mov	r1, r3
 80013fc:	4875      	ldr	r0, [pc, #468]	@ (80015d4 <HAL_UART_MspInit+0x258>)
 80013fe:	f000 ffcb 	bl	8002398 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001402:	4b75      	ldr	r3, [pc, #468]	@ (80015d8 <HAL_UART_MspInit+0x25c>)
 8001404:	4a75      	ldr	r2, [pc, #468]	@ (80015dc <HAL_UART_MspInit+0x260>)
 8001406:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001408:	4b73      	ldr	r3, [pc, #460]	@ (80015d8 <HAL_UART_MspInit+0x25c>)
 800140a:	2200      	movs	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800140e:	4b72      	ldr	r3, [pc, #456]	@ (80015d8 <HAL_UART_MspInit+0x25c>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001414:	4b70      	ldr	r3, [pc, #448]	@ (80015d8 <HAL_UART_MspInit+0x25c>)
 8001416:	2280      	movs	r2, #128	@ 0x80
 8001418:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800141a:	4b6f      	ldr	r3, [pc, #444]	@ (80015d8 <HAL_UART_MspInit+0x25c>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001420:	4b6d      	ldr	r3, [pc, #436]	@ (80015d8 <HAL_UART_MspInit+0x25c>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001426:	4b6c      	ldr	r3, [pc, #432]	@ (80015d8 <HAL_UART_MspInit+0x25c>)
 8001428:	2220      	movs	r2, #32
 800142a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800142c:	4b6a      	ldr	r3, [pc, #424]	@ (80015d8 <HAL_UART_MspInit+0x25c>)
 800142e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001432:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001434:	4868      	ldr	r0, [pc, #416]	@ (80015d8 <HAL_UART_MspInit+0x25c>)
 8001436:	f000 fb39 	bl	8001aac <HAL_DMA_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8001440:	f7ff fd40 	bl	8000ec4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a64      	ldr	r2, [pc, #400]	@ (80015d8 <HAL_UART_MspInit+0x25c>)
 8001448:	63da      	str	r2, [r3, #60]	@ 0x3c
 800144a:	4a63      	ldr	r2, [pc, #396]	@ (80015d8 <HAL_UART_MspInit+0x25c>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001450:	4b63      	ldr	r3, [pc, #396]	@ (80015e0 <HAL_UART_MspInit+0x264>)
 8001452:	4a64      	ldr	r2, [pc, #400]	@ (80015e4 <HAL_UART_MspInit+0x268>)
 8001454:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001456:	4b62      	ldr	r3, [pc, #392]	@ (80015e0 <HAL_UART_MspInit+0x264>)
 8001458:	2210      	movs	r2, #16
 800145a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800145c:	4b60      	ldr	r3, [pc, #384]	@ (80015e0 <HAL_UART_MspInit+0x264>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001462:	4b5f      	ldr	r3, [pc, #380]	@ (80015e0 <HAL_UART_MspInit+0x264>)
 8001464:	2280      	movs	r2, #128	@ 0x80
 8001466:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001468:	4b5d      	ldr	r3, [pc, #372]	@ (80015e0 <HAL_UART_MspInit+0x264>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800146e:	4b5c      	ldr	r3, [pc, #368]	@ (80015e0 <HAL_UART_MspInit+0x264>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001474:	4b5a      	ldr	r3, [pc, #360]	@ (80015e0 <HAL_UART_MspInit+0x264>)
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800147a:	4b59      	ldr	r3, [pc, #356]	@ (80015e0 <HAL_UART_MspInit+0x264>)
 800147c:	2200      	movs	r2, #0
 800147e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001480:	4857      	ldr	r0, [pc, #348]	@ (80015e0 <HAL_UART_MspInit+0x264>)
 8001482:	f000 fb13 	bl	8001aac <HAL_DMA_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 800148c:	f7ff fd1a 	bl	8000ec4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a53      	ldr	r2, [pc, #332]	@ (80015e0 <HAL_UART_MspInit+0x264>)
 8001494:	639a      	str	r2, [r3, #56]	@ 0x38
 8001496:	4a52      	ldr	r2, [pc, #328]	@ (80015e0 <HAL_UART_MspInit+0x264>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800149c:	2200      	movs	r2, #0
 800149e:	2100      	movs	r1, #0
 80014a0:	2025      	movs	r0, #37	@ 0x25
 80014a2:	f000 fac0 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014a6:	2025      	movs	r0, #37	@ 0x25
 80014a8:	f000 fad9 	bl	8001a5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014ac:	e08a      	b.n	80015c4 <HAL_UART_MspInit+0x248>
  else if(uartHandle->Instance==USART2)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a4d      	ldr	r2, [pc, #308]	@ (80015e8 <HAL_UART_MspInit+0x26c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	f040 8085 	bne.w	80015c4 <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ba:	4b45      	ldr	r3, [pc, #276]	@ (80015d0 <HAL_UART_MspInit+0x254>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	4a44      	ldr	r2, [pc, #272]	@ (80015d0 <HAL_UART_MspInit+0x254>)
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c4:	61d3      	str	r3, [r2, #28]
 80014c6:	4b42      	ldr	r3, [pc, #264]	@ (80015d0 <HAL_UART_MspInit+0x254>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	4b3f      	ldr	r3, [pc, #252]	@ (80015d0 <HAL_UART_MspInit+0x254>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	4a3e      	ldr	r2, [pc, #248]	@ (80015d0 <HAL_UART_MspInit+0x254>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6193      	str	r3, [r2, #24]
 80014de:	4b3c      	ldr	r3, [pc, #240]	@ (80015d0 <HAL_UART_MspInit+0x254>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014ea:	2304      	movs	r3, #4
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0318 	add.w	r3, r7, #24
 80014fa:	4619      	mov	r1, r3
 80014fc:	4835      	ldr	r0, [pc, #212]	@ (80015d4 <HAL_UART_MspInit+0x258>)
 80014fe:	f000 ff4b 	bl	8002398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001502:	2308      	movs	r3, #8
 8001504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 0318 	add.w	r3, r7, #24
 8001512:	4619      	mov	r1, r3
 8001514:	482f      	ldr	r0, [pc, #188]	@ (80015d4 <HAL_UART_MspInit+0x258>)
 8001516:	f000 ff3f 	bl	8002398 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800151a:	4b34      	ldr	r3, [pc, #208]	@ (80015ec <HAL_UART_MspInit+0x270>)
 800151c:	4a34      	ldr	r2, [pc, #208]	@ (80015f0 <HAL_UART_MspInit+0x274>)
 800151e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001520:	4b32      	ldr	r3, [pc, #200]	@ (80015ec <HAL_UART_MspInit+0x270>)
 8001522:	2200      	movs	r2, #0
 8001524:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001526:	4b31      	ldr	r3, [pc, #196]	@ (80015ec <HAL_UART_MspInit+0x270>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800152c:	4b2f      	ldr	r3, [pc, #188]	@ (80015ec <HAL_UART_MspInit+0x270>)
 800152e:	2280      	movs	r2, #128	@ 0x80
 8001530:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001532:	4b2e      	ldr	r3, [pc, #184]	@ (80015ec <HAL_UART_MspInit+0x270>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001538:	4b2c      	ldr	r3, [pc, #176]	@ (80015ec <HAL_UART_MspInit+0x270>)
 800153a:	2200      	movs	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800153e:	4b2b      	ldr	r3, [pc, #172]	@ (80015ec <HAL_UART_MspInit+0x270>)
 8001540:	2220      	movs	r2, #32
 8001542:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001544:	4b29      	ldr	r3, [pc, #164]	@ (80015ec <HAL_UART_MspInit+0x270>)
 8001546:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800154a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800154c:	4827      	ldr	r0, [pc, #156]	@ (80015ec <HAL_UART_MspInit+0x270>)
 800154e:	f000 faad 	bl	8001aac <HAL_DMA_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8001558:	f7ff fcb4 	bl	8000ec4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a23      	ldr	r2, [pc, #140]	@ (80015ec <HAL_UART_MspInit+0x270>)
 8001560:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001562:	4a22      	ldr	r2, [pc, #136]	@ (80015ec <HAL_UART_MspInit+0x270>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001568:	4b22      	ldr	r3, [pc, #136]	@ (80015f4 <HAL_UART_MspInit+0x278>)
 800156a:	4a23      	ldr	r2, [pc, #140]	@ (80015f8 <HAL_UART_MspInit+0x27c>)
 800156c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800156e:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <HAL_UART_MspInit+0x278>)
 8001570:	2210      	movs	r2, #16
 8001572:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001574:	4b1f      	ldr	r3, [pc, #124]	@ (80015f4 <HAL_UART_MspInit+0x278>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800157a:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <HAL_UART_MspInit+0x278>)
 800157c:	2280      	movs	r2, #128	@ 0x80
 800157e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001580:	4b1c      	ldr	r3, [pc, #112]	@ (80015f4 <HAL_UART_MspInit+0x278>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001586:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_UART_MspInit+0x278>)
 8001588:	2200      	movs	r2, #0
 800158a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800158c:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <HAL_UART_MspInit+0x278>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001592:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <HAL_UART_MspInit+0x278>)
 8001594:	2200      	movs	r2, #0
 8001596:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001598:	4816      	ldr	r0, [pc, #88]	@ (80015f4 <HAL_UART_MspInit+0x278>)
 800159a:	f000 fa87 	bl	8001aac <HAL_DMA_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 80015a4:	f7ff fc8e 	bl	8000ec4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a12      	ldr	r2, [pc, #72]	@ (80015f4 <HAL_UART_MspInit+0x278>)
 80015ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80015ae:	4a11      	ldr	r2, [pc, #68]	@ (80015f4 <HAL_UART_MspInit+0x278>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	2026      	movs	r0, #38	@ 0x26
 80015ba:	f000 fa34 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015be:	2026      	movs	r0, #38	@ 0x26
 80015c0:	f000 fa4d 	bl	8001a5e <HAL_NVIC_EnableIRQ>
}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	@ 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40013800 	.word	0x40013800
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010800 	.word	0x40010800
 80015d8:	20002654 	.word	0x20002654
 80015dc:	40020058 	.word	0x40020058
 80015e0:	20002698 	.word	0x20002698
 80015e4:	40020044 	.word	0x40020044
 80015e8:	40004400 	.word	0x40004400
 80015ec:	200026dc 	.word	0x200026dc
 80015f0:	4002006c 	.word	0x4002006c
 80015f4:	20002720 	.word	0x20002720
 80015f8:	40020080 	.word	0x40020080

080015fc <HAL_UART_RxHalfCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uart_ctx_t * const uart_ctx = (huart == &huart1) ? &ctx.uart1 : &ctx.uart2;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a16      	ldr	r2, [pc, #88]	@ (8001660 <HAL_UART_RxHalfCpltCallback+0x64>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d101      	bne.n	8001610 <HAL_UART_RxHalfCpltCallback+0x14>
 800160c:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <HAL_UART_RxHalfCpltCallback+0x68>)
 800160e:	e000      	b.n	8001612 <HAL_UART_RxHalfCpltCallback+0x16>
 8001610:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <HAL_UART_RxHalfCpltCallback+0x6c>)
 8001612:	60fb      	str	r3, [r7, #12]
  // const int usb_idx = (huart == &huart2) ? 0 : 2;

  if (uart_ctx->buf.idx != 0) {
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_UART_RxHalfCpltCallback+0x30>
    uart_ctx->buf.idx = 0;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001626:	461a      	mov	r2, r3
 8001628:	2300      	movs	r3, #0
 800162a:	6213      	str	r3, [r2, #32]
  }

  if (uart_ctx->buf_idx == 1) {
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001634:	2b01      	cmp	r3, #1
 8001636:	d00d      	beq.n	8001654 <HAL_UART_RxHalfCpltCallback+0x58>
    // SEGGER_RTT_printf(0, "rxhalf: %s; [X]\n", uart_ctx->name);
    return;
  }

  // In Rx Half callback, the length of received data is half length of double buffer.
  uart_ctx->buf.len[0] = DBL_BUF_LEN;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800163e:	461a      	mov	r2, r3
 8001640:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001644:	6153      	str	r3, [r2, #20]
  // Set index of double buffer to next.
  uart_ctx->buf.idx = 1;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800164c:	461a      	mov	r2, r3
 800164e:	2301      	movs	r3, #1
 8001650:	6213      	str	r3, [r2, #32]
 8001652:	e000      	b.n	8001656 <HAL_UART_RxHalfCpltCallback+0x5a>
    return;
 8001654:	bf00      	nop
  // SEGGER_RTT_printf(0, "rxhalf: %s; \n", uart_ctx->name);
}
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200025c4 	.word	0x200025c4
 8001664:	2000055c 	.word	0x2000055c
 8001668:	20001584 	.word	0x20001584

0800166c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uart_ctx_t * const uart_ctx = (huart == &huart1) ? &ctx.uart1 : &ctx.uart2;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a16      	ldr	r2, [pc, #88]	@ (80016d0 <HAL_UART_RxCpltCallback+0x64>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d101      	bne.n	8001680 <HAL_UART_RxCpltCallback+0x14>
 800167c:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <HAL_UART_RxCpltCallback+0x68>)
 800167e:	e000      	b.n	8001682 <HAL_UART_RxCpltCallback+0x16>
 8001680:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <HAL_UART_RxCpltCallback+0x6c>)
 8001682:	60fb      	str	r3, [r7, #12]
  // const int usb_idx = (huart == &huart2) ? 0 : 2;

  if (uart_ctx->buf.idx != 1) {
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d005      	beq.n	800169c <HAL_UART_RxCpltCallback+0x30>
    uart_ctx->buf.idx = 1;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001696:	461a      	mov	r2, r3
 8001698:	2301      	movs	r3, #1
 800169a:	6213      	str	r3, [r2, #32]
  }
  if (uart_ctx->buf_idx == 0) {
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00d      	beq.n	80016c4 <HAL_UART_RxCpltCallback+0x58>
    // SEGGER_RTT_printf(0, "rxcmpl: %s; [X]\n", uart_ctx->name);
    return;
  }

  // In Rx callback, the length of received data is half length of double buffer.
  uart_ctx->buf.len[1] = DBL_BUF_LEN;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ae:	461a      	mov	r2, r3
 80016b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016b4:	6193      	str	r3, [r2, #24]
  // Set index of double buffer to next.
  uart_ctx->buf.idx = 0;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016bc:	461a      	mov	r2, r3
 80016be:	2300      	movs	r3, #0
 80016c0:	6213      	str	r3, [r2, #32]
 80016c2:	e000      	b.n	80016c6 <HAL_UART_RxCpltCallback+0x5a>
    return;
 80016c4:	bf00      	nop
  // SEGGER_RTT_printf(0, "rxcmpl: %s; \n", uart_ctx->name);
}
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	200025c4 	.word	0x200025c4
 80016d4:	2000055c 	.word	0x2000055c
 80016d8:	20001584 	.word	0x20001584

080016dc <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uart_ctx_t * const uart_ctx = (huart == &huart1) ? &ctx.uart1 : &ctx.uart2;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001714 <HAL_UART_ErrorCallback+0x38>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d101      	bne.n	80016f0 <HAL_UART_ErrorCallback+0x14>
 80016ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <HAL_UART_ErrorCallback+0x3c>)
 80016ee:	e000      	b.n	80016f2 <HAL_UART_ErrorCallback+0x16>
 80016f0:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <HAL_UART_ErrorCallback+0x40>)
 80016f2:	60fb      	str	r3, [r7, #12]

  HAL_UART_DMAStop(huart);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f003 fcaa 	bl	800504e <HAL_UART_DMAStop>
  HAL_UART_Receive_DMA(huart, (uint8_t *)uart_ctx->buf.data[0], DBL_BUF_TOTAL_LEN);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3314      	adds	r3, #20
 80016fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001702:	4619      	mov	r1, r3
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f003 fc7d 	bl	8005004 <HAL_UART_Receive_DMA>
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200025c4 	.word	0x200025c4
 8001718:	2000055c 	.word	0x2000055c
 800171c:	20001584 	.word	0x20001584

08001720 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001720:	f7ff fdd2 	bl	80012c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001724:	480b      	ldr	r0, [pc, #44]	@ (8001754 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001726:	490c      	ldr	r1, [pc, #48]	@ (8001758 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001728:	4a0c      	ldr	r2, [pc, #48]	@ (800175c <LoopFillZerobss+0x16>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800172c:	e002      	b.n	8001734 <LoopCopyDataInit>

0800172e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001732:	3304      	adds	r3, #4

08001734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001738:	d3f9      	bcc.n	800172e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173a:	4a09      	ldr	r2, [pc, #36]	@ (8001760 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800173c:	4c09      	ldr	r4, [pc, #36]	@ (8001764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001740:	e001      	b.n	8001746 <LoopFillZerobss>

08001742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001744:	3204      	adds	r2, #4

08001746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001748:	d3fb      	bcc.n	8001742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800174a:	f008 ff4b 	bl	800a5e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800174e:	f7ff fa87 	bl	8000c60 <main>
  bx lr
 8001752:	4770      	bx	lr
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 800175c:	0800a7cc 	.word	0x0800a7cc
  ldr r2, =_sbss
 8001760:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8001764:	20003488 	.word	0x20003488

08001768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC1_2_IRQHandler>
	...

0800176c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <HAL_Init+0x28>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a07      	ldr	r2, [pc, #28]	@ (8001794 <HAL_Init+0x28>)
 8001776:	f043 0310 	orr.w	r3, r3, #16
 800177a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177c:	2003      	movs	r0, #3
 800177e:	f000 f947 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001782:	200f      	movs	r0, #15
 8001784:	f000 f808 	bl	8001798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001788:	f7ff fbe2 	bl	8000f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40022000 	.word	0x40022000

08001798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <HAL_InitTick+0x54>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_InitTick+0x58>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f95f 	bl	8001a7a <HAL_SYSTICK_Config>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00e      	b.n	80017e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d80a      	bhi.n	80017e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f000 f927 	bl	8001a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d8:	4a06      	ldr	r2, [pc, #24]	@ (80017f4 <HAL_InitTick+0x5c>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e000      	b.n	80017e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000008 	.word	0x20000008
 80017f4:	20000004 	.word	0x20000004

080017f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <HAL_IncTick+0x1c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <HAL_IncTick+0x20>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a03      	ldr	r2, [pc, #12]	@ (8001818 <HAL_IncTick+0x20>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	20000008 	.word	0x20000008
 8001818:	20002764 	.word	0x20002764

0800181c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return uwTick;
 8001820:	4b02      	ldr	r3, [pc, #8]	@ (800182c <HAL_GetTick+0x10>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	20002764 	.word	0x20002764

08001830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff fff0 	bl	800181c <HAL_GetTick>
 800183c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001848:	d005      	beq.n	8001856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800184a:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <HAL_Delay+0x44>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4413      	add	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001856:	bf00      	nop
 8001858:	f7ff ffe0 	bl	800181c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	429a      	cmp	r2, r3
 8001866:	d8f7      	bhi.n	8001858 <HAL_Delay+0x28>
  {
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000008 	.word	0x20000008

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018aa:	4a04      	ldr	r2, [pc, #16]	@ (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	60d3      	str	r3, [r2, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db0b      	blt.n	8001906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f003 021f 	and.w	r2, r3, #31
 80018f4:	4906      	ldr	r1, [pc, #24]	@ (8001910 <__NVIC_EnableIRQ+0x34>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	2001      	movs	r0, #1
 80018fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	@ (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	@ (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	@ 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	@ 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f7ff ff90 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff2d 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff42 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff90 	bl	8001968 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5f 	bl	8001914 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff35 	bl	80018dc <__NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ffa2 	bl	80019cc <SysTick_Config>
 8001a88:	4603      	mov	r3, r0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001a96:	f000 f802 	bl	8001a9e <HAL_SYSTICK_Callback>
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e043      	b.n	8001b4a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b22      	ldr	r3, [pc, #136]	@ (8001b54 <HAL_DMA_Init+0xa8>)
 8001aca:	4413      	add	r3, r2
 8001acc:	4a22      	ldr	r2, [pc, #136]	@ (8001b58 <HAL_DMA_Init+0xac>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	009a      	lsls	r2, r3, #2
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a1f      	ldr	r2, [pc, #124]	@ (8001b5c <HAL_DMA_Init+0xb0>)
 8001ade:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001af6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001afa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	bffdfff8 	.word	0xbffdfff8
 8001b58:	cccccccd 	.word	0xcccccccd
 8001b5c:	40020000 	.word	0x40020000

08001b60 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_DMA_Start+0x20>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e02e      	b.n	8001bde <HAL_DMA_Start+0x7e>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d11d      	bne.n	8001bd0 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	639a      	str	r2, [r3, #56]	@ 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0201 	bic.w	r2, r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	68b9      	ldr	r1, [r7, #8]
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 fbbf 	bl	800233c <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0201 	orr.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e005      	b.n	8001bdc <HAL_DMA_Start+0x7c>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_DMA_Start_IT+0x20>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e04b      	b.n	8001c9e <HAL_DMA_Start_IT+0xb8>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d13a      	bne.n	8001c90 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0201 	bic.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 fb7c 	bl	800233c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d008      	beq.n	8001c5e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 020e 	orr.w	r2, r2, #14
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e00f      	b.n	8001c7e <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0204 	bic.w	r2, r2, #4
 8001c6c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 020a 	orr.w	r2, r2, #10
 8001c7c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e005      	b.n	8001c9c <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b085      	sub	sp, #20
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d008      	beq.n	8001cd0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e020      	b.n	8001d12 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 020e 	bic.w	r2, r2, #14
 8001cde:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d005      	beq.n	8001d40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2204      	movs	r2, #4
 8001d38:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
 8001d3e:	e051      	b.n	8001de4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 020e 	bic.w	r2, r2, #14
 8001d4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a22      	ldr	r2, [pc, #136]	@ (8001df0 <HAL_DMA_Abort_IT+0xd4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d029      	beq.n	8001dbe <HAL_DMA_Abort_IT+0xa2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a21      	ldr	r2, [pc, #132]	@ (8001df4 <HAL_DMA_Abort_IT+0xd8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d022      	beq.n	8001dba <HAL_DMA_Abort_IT+0x9e>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a1f      	ldr	r2, [pc, #124]	@ (8001df8 <HAL_DMA_Abort_IT+0xdc>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d01a      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x98>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a1e      	ldr	r2, [pc, #120]	@ (8001dfc <HAL_DMA_Abort_IT+0xe0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d012      	beq.n	8001dae <HAL_DMA_Abort_IT+0x92>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001e00 <HAL_DMA_Abort_IT+0xe4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00a      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x8c>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a1b      	ldr	r2, [pc, #108]	@ (8001e04 <HAL_DMA_Abort_IT+0xe8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d102      	bne.n	8001da2 <HAL_DMA_Abort_IT+0x86>
 8001d9c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001da0:	e00e      	b.n	8001dc0 <HAL_DMA_Abort_IT+0xa4>
 8001da2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001da6:	e00b      	b.n	8001dc0 <HAL_DMA_Abort_IT+0xa4>
 8001da8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dac:	e008      	b.n	8001dc0 <HAL_DMA_Abort_IT+0xa4>
 8001dae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001db2:	e005      	b.n	8001dc0 <HAL_DMA_Abort_IT+0xa4>
 8001db4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001db8:	e002      	b.n	8001dc0 <HAL_DMA_Abort_IT+0xa4>
 8001dba:	2310      	movs	r3, #16
 8001dbc:	e000      	b.n	8001dc0 <HAL_DMA_Abort_IT+0xa4>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	4a11      	ldr	r2, [pc, #68]	@ (8001e08 <HAL_DMA_Abort_IT+0xec>)
 8001dc2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	4798      	blx	r3
    } 
  }
  return status;
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40020008 	.word	0x40020008
 8001df4:	4002001c 	.word	0x4002001c
 8001df8:	40020030 	.word	0x40020030
 8001dfc:	40020044 	.word	0x40020044
 8001e00:	40020058 	.word	0x40020058
 8001e04:	4002006c 	.word	0x4002006c
 8001e08:	40020000 	.word	0x40020000

08001e0c <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the DMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  uint32_t temp;
  uint32_t tickstart = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d008      	beq.n	8001e3a <HAL_DMA_PollForTransfer+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2020 	strb.w	r2, [r3, #32]
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e167      	b.n	800210a <HAL_DMA_PollForTransfer+0x2fe>
  }

  /* Polling mode not supported in circular mode */
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_DMA_PollForTransfer+0x48>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e4e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e15a      	b.n	800210a <HAL_DMA_PollForTransfer+0x2fe>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d131      	bne.n	8001ebe <HAL_DMA_PollForTransfer+0xb2>
  {
    /* Transfer Complete flag */
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a88      	ldr	r2, [pc, #544]	@ (8002080 <HAL_DMA_PollForTransfer+0x274>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d029      	beq.n	8001eb8 <HAL_DMA_PollForTransfer+0xac>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a86      	ldr	r2, [pc, #536]	@ (8002084 <HAL_DMA_PollForTransfer+0x278>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d022      	beq.n	8001eb4 <HAL_DMA_PollForTransfer+0xa8>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a85      	ldr	r2, [pc, #532]	@ (8002088 <HAL_DMA_PollForTransfer+0x27c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d01a      	beq.n	8001eae <HAL_DMA_PollForTransfer+0xa2>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a83      	ldr	r2, [pc, #524]	@ (800208c <HAL_DMA_PollForTransfer+0x280>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d012      	beq.n	8001ea8 <HAL_DMA_PollForTransfer+0x9c>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a82      	ldr	r2, [pc, #520]	@ (8002090 <HAL_DMA_PollForTransfer+0x284>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_DMA_PollForTransfer+0x96>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a80      	ldr	r2, [pc, #512]	@ (8002094 <HAL_DMA_PollForTransfer+0x288>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d102      	bne.n	8001e9c <HAL_DMA_PollForTransfer+0x90>
 8001e96:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e9a:	e00e      	b.n	8001eba <HAL_DMA_PollForTransfer+0xae>
 8001e9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ea0:	e00b      	b.n	8001eba <HAL_DMA_PollForTransfer+0xae>
 8001ea2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ea6:	e008      	b.n	8001eba <HAL_DMA_PollForTransfer+0xae>
 8001ea8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001eac:	e005      	b.n	8001eba <HAL_DMA_PollForTransfer+0xae>
 8001eae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eb2:	e002      	b.n	8001eba <HAL_DMA_PollForTransfer+0xae>
 8001eb4:	2320      	movs	r3, #32
 8001eb6:	e000      	b.n	8001eba <HAL_DMA_PollForTransfer+0xae>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	e030      	b.n	8001f20 <HAL_DMA_PollForTransfer+0x114>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a6f      	ldr	r2, [pc, #444]	@ (8002080 <HAL_DMA_PollForTransfer+0x274>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d029      	beq.n	8001f1c <HAL_DMA_PollForTransfer+0x110>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a6d      	ldr	r2, [pc, #436]	@ (8002084 <HAL_DMA_PollForTransfer+0x278>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d022      	beq.n	8001f18 <HAL_DMA_PollForTransfer+0x10c>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a6c      	ldr	r2, [pc, #432]	@ (8002088 <HAL_DMA_PollForTransfer+0x27c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d01a      	beq.n	8001f12 <HAL_DMA_PollForTransfer+0x106>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a6a      	ldr	r2, [pc, #424]	@ (800208c <HAL_DMA_PollForTransfer+0x280>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d012      	beq.n	8001f0c <HAL_DMA_PollForTransfer+0x100>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a69      	ldr	r2, [pc, #420]	@ (8002090 <HAL_DMA_PollForTransfer+0x284>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00a      	beq.n	8001f06 <HAL_DMA_PollForTransfer+0xfa>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a67      	ldr	r2, [pc, #412]	@ (8002094 <HAL_DMA_PollForTransfer+0x288>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d102      	bne.n	8001f00 <HAL_DMA_PollForTransfer+0xf4>
 8001efa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001efe:	e00e      	b.n	8001f1e <HAL_DMA_PollForTransfer+0x112>
 8001f00:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001f04:	e00b      	b.n	8001f1e <HAL_DMA_PollForTransfer+0x112>
 8001f06:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f0a:	e008      	b.n	8001f1e <HAL_DMA_PollForTransfer+0x112>
 8001f0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f10:	e005      	b.n	8001f1e <HAL_DMA_PollForTransfer+0x112>
 8001f12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f16:	e002      	b.n	8001f1e <HAL_DMA_PollForTransfer+0x112>
 8001f18:	2340      	movs	r3, #64	@ 0x40
 8001f1a:	e000      	b.n	8001f1e <HAL_DMA_PollForTransfer+0x112>
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f20:	f7ff fc7c 	bl	800181c <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8001f26:	e06b      	b.n	8002000 <HAL_DMA_PollForTransfer+0x1f4>
  {
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 8001f28:	4b5b      	ldr	r3, [pc, #364]	@ (8002098 <HAL_DMA_PollForTransfer+0x28c>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4953      	ldr	r1, [pc, #332]	@ (8002080 <HAL_DMA_PollForTransfer+0x274>)
 8001f32:	428b      	cmp	r3, r1
 8001f34:	d029      	beq.n	8001f8a <HAL_DMA_PollForTransfer+0x17e>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4952      	ldr	r1, [pc, #328]	@ (8002084 <HAL_DMA_PollForTransfer+0x278>)
 8001f3c:	428b      	cmp	r3, r1
 8001f3e:	d022      	beq.n	8001f86 <HAL_DMA_PollForTransfer+0x17a>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4950      	ldr	r1, [pc, #320]	@ (8002088 <HAL_DMA_PollForTransfer+0x27c>)
 8001f46:	428b      	cmp	r3, r1
 8001f48:	d01a      	beq.n	8001f80 <HAL_DMA_PollForTransfer+0x174>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	494f      	ldr	r1, [pc, #316]	@ (800208c <HAL_DMA_PollForTransfer+0x280>)
 8001f50:	428b      	cmp	r3, r1
 8001f52:	d012      	beq.n	8001f7a <HAL_DMA_PollForTransfer+0x16e>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	494d      	ldr	r1, [pc, #308]	@ (8002090 <HAL_DMA_PollForTransfer+0x284>)
 8001f5a:	428b      	cmp	r3, r1
 8001f5c:	d00a      	beq.n	8001f74 <HAL_DMA_PollForTransfer+0x168>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	494c      	ldr	r1, [pc, #304]	@ (8002094 <HAL_DMA_PollForTransfer+0x288>)
 8001f64:	428b      	cmp	r3, r1
 8001f66:	d102      	bne.n	8001f6e <HAL_DMA_PollForTransfer+0x162>
 8001f68:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001f6c:	e00e      	b.n	8001f8c <HAL_DMA_PollForTransfer+0x180>
 8001f6e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001f72:	e00b      	b.n	8001f8c <HAL_DMA_PollForTransfer+0x180>
 8001f74:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001f78:	e008      	b.n	8001f8c <HAL_DMA_PollForTransfer+0x180>
 8001f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f7e:	e005      	b.n	8001f8c <HAL_DMA_PollForTransfer+0x180>
 8001f80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f84:	e002      	b.n	8001f8c <HAL_DMA_PollForTransfer+0x180>
 8001f86:	2380      	movs	r3, #128	@ 0x80
 8001f88:	e000      	b.n	8001f8c <HAL_DMA_PollForTransfer+0x180>
 8001f8a:	2308      	movs	r3, #8
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d017      	beq.n	8001fc2 <HAL_DMA_PollForTransfer+0x1b6>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	605a      	str	r2, [r3, #4]

      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fa6:	f043 0201 	orr.w	r2, r3, #1
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0a3      	b.n	800210a <HAL_DMA_PollForTransfer+0x2fe>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d01a      	beq.n	8002000 <HAL_DMA_PollForTransfer+0x1f4>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <HAL_DMA_PollForTransfer+0x1d4>
 8001fd0:	f7ff fc24 	bl	800181c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d20f      	bcs.n	8002000 <HAL_DMA_PollForTransfer+0x1f4>
      {
        /* Update error code */
        SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe4:	f043 0220 	orr.w	r2, r3, #32
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e084      	b.n	800210a <HAL_DMA_PollForTransfer+0x2fe>
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 8002000:	4b25      	ldr	r3, [pc, #148]	@ (8002098 <HAL_DMA_PollForTransfer+0x28c>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d08d      	beq.n	8001f28 <HAL_DMA_PollForTransfer+0x11c>
      }
    }
  }

  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d144      	bne.n	800209c <HAL_DMA_PollForTransfer+0x290>
  {
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1a      	ldr	r2, [pc, #104]	@ (8002080 <HAL_DMA_PollForTransfer+0x274>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d029      	beq.n	8002070 <HAL_DMA_PollForTransfer+0x264>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a18      	ldr	r2, [pc, #96]	@ (8002084 <HAL_DMA_PollForTransfer+0x278>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d022      	beq.n	800206c <HAL_DMA_PollForTransfer+0x260>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a17      	ldr	r2, [pc, #92]	@ (8002088 <HAL_DMA_PollForTransfer+0x27c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d01a      	beq.n	8002066 <HAL_DMA_PollForTransfer+0x25a>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a15      	ldr	r2, [pc, #84]	@ (800208c <HAL_DMA_PollForTransfer+0x280>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d012      	beq.n	8002060 <HAL_DMA_PollForTransfer+0x254>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a14      	ldr	r2, [pc, #80]	@ (8002090 <HAL_DMA_PollForTransfer+0x284>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d00a      	beq.n	800205a <HAL_DMA_PollForTransfer+0x24e>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a12      	ldr	r2, [pc, #72]	@ (8002094 <HAL_DMA_PollForTransfer+0x288>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d102      	bne.n	8002054 <HAL_DMA_PollForTransfer+0x248>
 800204e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002052:	e00e      	b.n	8002072 <HAL_DMA_PollForTransfer+0x266>
 8002054:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002058:	e00b      	b.n	8002072 <HAL_DMA_PollForTransfer+0x266>
 800205a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800205e:	e008      	b.n	8002072 <HAL_DMA_PollForTransfer+0x266>
 8002060:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002064:	e005      	b.n	8002072 <HAL_DMA_PollForTransfer+0x266>
 8002066:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800206a:	e002      	b.n	8002072 <HAL_DMA_PollForTransfer+0x266>
 800206c:	2320      	movs	r3, #32
 800206e:	e000      	b.n	8002072 <HAL_DMA_PollForTransfer+0x266>
 8002070:	2302      	movs	r3, #2
 8002072:	4a09      	ldr	r2, [pc, #36]	@ (8002098 <HAL_DMA_PollForTransfer+0x28c>)
 8002074:	6053      	str	r3, [r2, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800207e:	e03f      	b.n	8002100 <HAL_DMA_PollForTransfer+0x2f4>
 8002080:	40020008 	.word	0x40020008
 8002084:	4002001c 	.word	0x4002001c
 8002088:	40020030 	.word	0x40020030
 800208c:	40020044 	.word	0x40020044
 8002090:	40020058 	.word	0x40020058
 8002094:	4002006c 	.word	0x4002006c
 8002098:	40020000 	.word	0x40020000
  }
  else
  {
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002114 <HAL_DMA_PollForTransfer+0x308>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d029      	beq.n	80020fa <HAL_DMA_PollForTransfer+0x2ee>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002118 <HAL_DMA_PollForTransfer+0x30c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d022      	beq.n	80020f6 <HAL_DMA_PollForTransfer+0x2ea>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a19      	ldr	r2, [pc, #100]	@ (800211c <HAL_DMA_PollForTransfer+0x310>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01a      	beq.n	80020f0 <HAL_DMA_PollForTransfer+0x2e4>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a18      	ldr	r2, [pc, #96]	@ (8002120 <HAL_DMA_PollForTransfer+0x314>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d012      	beq.n	80020ea <HAL_DMA_PollForTransfer+0x2de>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a16      	ldr	r2, [pc, #88]	@ (8002124 <HAL_DMA_PollForTransfer+0x318>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00a      	beq.n	80020e4 <HAL_DMA_PollForTransfer+0x2d8>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a15      	ldr	r2, [pc, #84]	@ (8002128 <HAL_DMA_PollForTransfer+0x31c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d102      	bne.n	80020de <HAL_DMA_PollForTransfer+0x2d2>
 80020d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020dc:	e00e      	b.n	80020fc <HAL_DMA_PollForTransfer+0x2f0>
 80020de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80020e2:	e00b      	b.n	80020fc <HAL_DMA_PollForTransfer+0x2f0>
 80020e4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80020e8:	e008      	b.n	80020fc <HAL_DMA_PollForTransfer+0x2f0>
 80020ea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020ee:	e005      	b.n	80020fc <HAL_DMA_PollForTransfer+0x2f0>
 80020f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020f4:	e002      	b.n	80020fc <HAL_DMA_PollForTransfer+0x2f0>
 80020f6:	2340      	movs	r3, #64	@ 0x40
 80020f8:	e000      	b.n	80020fc <HAL_DMA_PollForTransfer+0x2f0>
 80020fa:	2304      	movs	r3, #4
 80020fc:	4a0b      	ldr	r2, [pc, #44]	@ (800212c <HAL_DMA_PollForTransfer+0x320>)
 80020fe:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40020008 	.word	0x40020008
 8002118:	4002001c 	.word	0x4002001c
 800211c:	40020030 	.word	0x40020030
 8002120:	40020044 	.word	0x40020044
 8002124:	40020058 	.word	0x40020058
 8002128:	4002006c 	.word	0x4002006c
 800212c:	40020000 	.word	0x40020000

08002130 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	2204      	movs	r2, #4
 800214e:	409a      	lsls	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d04f      	beq.n	80021f8 <HAL_DMA_IRQHandler+0xc8>
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	2b00      	cmp	r3, #0
 8002160:	d04a      	beq.n	80021f8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	2b00      	cmp	r3, #0
 800216e:	d107      	bne.n	8002180 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0204 	bic.w	r2, r2, #4
 800217e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a66      	ldr	r2, [pc, #408]	@ (8002320 <HAL_DMA_IRQHandler+0x1f0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d029      	beq.n	80021de <HAL_DMA_IRQHandler+0xae>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a65      	ldr	r2, [pc, #404]	@ (8002324 <HAL_DMA_IRQHandler+0x1f4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d022      	beq.n	80021da <HAL_DMA_IRQHandler+0xaa>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a63      	ldr	r2, [pc, #396]	@ (8002328 <HAL_DMA_IRQHandler+0x1f8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01a      	beq.n	80021d4 <HAL_DMA_IRQHandler+0xa4>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a62      	ldr	r2, [pc, #392]	@ (800232c <HAL_DMA_IRQHandler+0x1fc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d012      	beq.n	80021ce <HAL_DMA_IRQHandler+0x9e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a60      	ldr	r2, [pc, #384]	@ (8002330 <HAL_DMA_IRQHandler+0x200>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00a      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x98>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a5f      	ldr	r2, [pc, #380]	@ (8002334 <HAL_DMA_IRQHandler+0x204>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d102      	bne.n	80021c2 <HAL_DMA_IRQHandler+0x92>
 80021bc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021c0:	e00e      	b.n	80021e0 <HAL_DMA_IRQHandler+0xb0>
 80021c2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80021c6:	e00b      	b.n	80021e0 <HAL_DMA_IRQHandler+0xb0>
 80021c8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80021cc:	e008      	b.n	80021e0 <HAL_DMA_IRQHandler+0xb0>
 80021ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021d2:	e005      	b.n	80021e0 <HAL_DMA_IRQHandler+0xb0>
 80021d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021d8:	e002      	b.n	80021e0 <HAL_DMA_IRQHandler+0xb0>
 80021da:	2340      	movs	r3, #64	@ 0x40
 80021dc:	e000      	b.n	80021e0 <HAL_DMA_IRQHandler+0xb0>
 80021de:	2304      	movs	r3, #4
 80021e0:	4a55      	ldr	r2, [pc, #340]	@ (8002338 <HAL_DMA_IRQHandler+0x208>)
 80021e2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 8094 	beq.w	8002316 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80021f6:	e08e      	b.n	8002316 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fc:	2202      	movs	r2, #2
 80021fe:	409a      	lsls	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d056      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x186>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d051      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10b      	bne.n	8002238 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 020a 	bic.w	r2, r2, #10
 800222e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a38      	ldr	r2, [pc, #224]	@ (8002320 <HAL_DMA_IRQHandler+0x1f0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d029      	beq.n	8002296 <HAL_DMA_IRQHandler+0x166>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a37      	ldr	r2, [pc, #220]	@ (8002324 <HAL_DMA_IRQHandler+0x1f4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d022      	beq.n	8002292 <HAL_DMA_IRQHandler+0x162>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a35      	ldr	r2, [pc, #212]	@ (8002328 <HAL_DMA_IRQHandler+0x1f8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d01a      	beq.n	800228c <HAL_DMA_IRQHandler+0x15c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a34      	ldr	r2, [pc, #208]	@ (800232c <HAL_DMA_IRQHandler+0x1fc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d012      	beq.n	8002286 <HAL_DMA_IRQHandler+0x156>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a32      	ldr	r2, [pc, #200]	@ (8002330 <HAL_DMA_IRQHandler+0x200>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00a      	beq.n	8002280 <HAL_DMA_IRQHandler+0x150>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a31      	ldr	r2, [pc, #196]	@ (8002334 <HAL_DMA_IRQHandler+0x204>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d102      	bne.n	800227a <HAL_DMA_IRQHandler+0x14a>
 8002274:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002278:	e00e      	b.n	8002298 <HAL_DMA_IRQHandler+0x168>
 800227a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800227e:	e00b      	b.n	8002298 <HAL_DMA_IRQHandler+0x168>
 8002280:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002284:	e008      	b.n	8002298 <HAL_DMA_IRQHandler+0x168>
 8002286:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800228a:	e005      	b.n	8002298 <HAL_DMA_IRQHandler+0x168>
 800228c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002290:	e002      	b.n	8002298 <HAL_DMA_IRQHandler+0x168>
 8002292:	2320      	movs	r3, #32
 8002294:	e000      	b.n	8002298 <HAL_DMA_IRQHandler+0x168>
 8002296:	2302      	movs	r3, #2
 8002298:	4a27      	ldr	r2, [pc, #156]	@ (8002338 <HAL_DMA_IRQHandler+0x208>)
 800229a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d034      	beq.n	8002316 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022b4:	e02f      	b.n	8002316 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	2208      	movs	r2, #8
 80022bc:	409a      	lsls	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d028      	beq.n	8002318 <HAL_DMA_IRQHandler+0x1e8>
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d023      	beq.n	8002318 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 020e 	bic.w	r2, r2, #14
 80022de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e8:	2101      	movs	r1, #1
 80022ea:	fa01 f202 	lsl.w	r2, r1, r2
 80022ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	2b00      	cmp	r3, #0
 800230c:	d004      	beq.n	8002318 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4798      	blx	r3
    }
  }
  return;
 8002316:	bf00      	nop
 8002318:	bf00      	nop
}
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40020008 	.word	0x40020008
 8002324:	4002001c 	.word	0x4002001c
 8002328:	40020030 	.word	0x40020030
 800232c:	40020044 	.word	0x40020044
 8002330:	40020058 	.word	0x40020058
 8002334:	4002006c 	.word	0x4002006c
 8002338:	40020000 	.word	0x40020000

0800233c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002352:	2101      	movs	r1, #1
 8002354:	fa01 f202 	lsl.w	r2, r1, r2
 8002358:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b10      	cmp	r3, #16
 8002368:	d108      	bne.n	800237c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800237a:	e007      	b.n	800238c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	60da      	str	r2, [r3, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
	...

08002398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002398:	b480      	push	{r7}
 800239a:	b08b      	sub	sp, #44	@ 0x2c
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023aa:	e169      	b.n	8002680 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023ac:	2201      	movs	r2, #1
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	f040 8158 	bne.w	800267a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	4a9a      	ldr	r2, [pc, #616]	@ (8002638 <HAL_GPIO_Init+0x2a0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d05e      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
 80023d4:	4a98      	ldr	r2, [pc, #608]	@ (8002638 <HAL_GPIO_Init+0x2a0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d875      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 80023da:	4a98      	ldr	r2, [pc, #608]	@ (800263c <HAL_GPIO_Init+0x2a4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d058      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
 80023e0:	4a96      	ldr	r2, [pc, #600]	@ (800263c <HAL_GPIO_Init+0x2a4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d86f      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 80023e6:	4a96      	ldr	r2, [pc, #600]	@ (8002640 <HAL_GPIO_Init+0x2a8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d052      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
 80023ec:	4a94      	ldr	r2, [pc, #592]	@ (8002640 <HAL_GPIO_Init+0x2a8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d869      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 80023f2:	4a94      	ldr	r2, [pc, #592]	@ (8002644 <HAL_GPIO_Init+0x2ac>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d04c      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
 80023f8:	4a92      	ldr	r2, [pc, #584]	@ (8002644 <HAL_GPIO_Init+0x2ac>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d863      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 80023fe:	4a92      	ldr	r2, [pc, #584]	@ (8002648 <HAL_GPIO_Init+0x2b0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d046      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
 8002404:	4a90      	ldr	r2, [pc, #576]	@ (8002648 <HAL_GPIO_Init+0x2b0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d85d      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 800240a:	2b12      	cmp	r3, #18
 800240c:	d82a      	bhi.n	8002464 <HAL_GPIO_Init+0xcc>
 800240e:	2b12      	cmp	r3, #18
 8002410:	d859      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 8002412:	a201      	add	r2, pc, #4	@ (adr r2, 8002418 <HAL_GPIO_Init+0x80>)
 8002414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002418:	08002493 	.word	0x08002493
 800241c:	0800246d 	.word	0x0800246d
 8002420:	0800247f 	.word	0x0800247f
 8002424:	080024c1 	.word	0x080024c1
 8002428:	080024c7 	.word	0x080024c7
 800242c:	080024c7 	.word	0x080024c7
 8002430:	080024c7 	.word	0x080024c7
 8002434:	080024c7 	.word	0x080024c7
 8002438:	080024c7 	.word	0x080024c7
 800243c:	080024c7 	.word	0x080024c7
 8002440:	080024c7 	.word	0x080024c7
 8002444:	080024c7 	.word	0x080024c7
 8002448:	080024c7 	.word	0x080024c7
 800244c:	080024c7 	.word	0x080024c7
 8002450:	080024c7 	.word	0x080024c7
 8002454:	080024c7 	.word	0x080024c7
 8002458:	080024c7 	.word	0x080024c7
 800245c:	08002475 	.word	0x08002475
 8002460:	08002489 	.word	0x08002489
 8002464:	4a79      	ldr	r2, [pc, #484]	@ (800264c <HAL_GPIO_Init+0x2b4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800246a:	e02c      	b.n	80024c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	623b      	str	r3, [r7, #32]
          break;
 8002472:	e029      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	3304      	adds	r3, #4
 800247a:	623b      	str	r3, [r7, #32]
          break;
 800247c:	e024      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	3308      	adds	r3, #8
 8002484:	623b      	str	r3, [r7, #32]
          break;
 8002486:	e01f      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	330c      	adds	r3, #12
 800248e:	623b      	str	r3, [r7, #32]
          break;
 8002490:	e01a      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800249a:	2304      	movs	r3, #4
 800249c:	623b      	str	r3, [r7, #32]
          break;
 800249e:	e013      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d105      	bne.n	80024b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024a8:	2308      	movs	r3, #8
 80024aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	611a      	str	r2, [r3, #16]
          break;
 80024b2:	e009      	b.n	80024c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b4:	2308      	movs	r3, #8
 80024b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	615a      	str	r2, [r3, #20]
          break;
 80024be:	e003      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024c0:	2300      	movs	r3, #0
 80024c2:	623b      	str	r3, [r7, #32]
          break;
 80024c4:	e000      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          break;
 80024c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2bff      	cmp	r3, #255	@ 0xff
 80024cc:	d801      	bhi.n	80024d2 <HAL_GPIO_Init+0x13a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	e001      	b.n	80024d6 <HAL_GPIO_Init+0x13e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3304      	adds	r3, #4
 80024d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2bff      	cmp	r3, #255	@ 0xff
 80024dc:	d802      	bhi.n	80024e4 <HAL_GPIO_Init+0x14c>
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	e002      	b.n	80024ea <HAL_GPIO_Init+0x152>
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	3b08      	subs	r3, #8
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	210f      	movs	r1, #15
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	401a      	ands	r2, r3
 80024fc:	6a39      	ldr	r1, [r7, #32]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	431a      	orrs	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80b1 	beq.w	800267a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002518:	4b4d      	ldr	r3, [pc, #308]	@ (8002650 <HAL_GPIO_Init+0x2b8>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4a4c      	ldr	r2, [pc, #304]	@ (8002650 <HAL_GPIO_Init+0x2b8>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6193      	str	r3, [r2, #24]
 8002524:	4b4a      	ldr	r3, [pc, #296]	@ (8002650 <HAL_GPIO_Init+0x2b8>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002530:	4a48      	ldr	r2, [pc, #288]	@ (8002654 <HAL_GPIO_Init+0x2bc>)
 8002532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	3302      	adds	r3, #2
 8002538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	220f      	movs	r2, #15
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4013      	ands	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a40      	ldr	r2, [pc, #256]	@ (8002658 <HAL_GPIO_Init+0x2c0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d013      	beq.n	8002584 <HAL_GPIO_Init+0x1ec>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a3f      	ldr	r2, [pc, #252]	@ (800265c <HAL_GPIO_Init+0x2c4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d00d      	beq.n	8002580 <HAL_GPIO_Init+0x1e8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a3e      	ldr	r2, [pc, #248]	@ (8002660 <HAL_GPIO_Init+0x2c8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d007      	beq.n	800257c <HAL_GPIO_Init+0x1e4>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a3d      	ldr	r2, [pc, #244]	@ (8002664 <HAL_GPIO_Init+0x2cc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d101      	bne.n	8002578 <HAL_GPIO_Init+0x1e0>
 8002574:	2303      	movs	r3, #3
 8002576:	e006      	b.n	8002586 <HAL_GPIO_Init+0x1ee>
 8002578:	2304      	movs	r3, #4
 800257a:	e004      	b.n	8002586 <HAL_GPIO_Init+0x1ee>
 800257c:	2302      	movs	r3, #2
 800257e:	e002      	b.n	8002586 <HAL_GPIO_Init+0x1ee>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <HAL_GPIO_Init+0x1ee>
 8002584:	2300      	movs	r3, #0
 8002586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002588:	f002 0203 	and.w	r2, r2, #3
 800258c:	0092      	lsls	r2, r2, #2
 800258e:	4093      	lsls	r3, r2
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002596:	492f      	ldr	r1, [pc, #188]	@ (8002654 <HAL_GPIO_Init+0x2bc>)
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	3302      	adds	r3, #2
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d006      	beq.n	80025be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002668 <HAL_GPIO_Init+0x2d0>)
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	492c      	ldr	r1, [pc, #176]	@ (8002668 <HAL_GPIO_Init+0x2d0>)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	608b      	str	r3, [r1, #8]
 80025bc:	e006      	b.n	80025cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025be:	4b2a      	ldr	r3, [pc, #168]	@ (8002668 <HAL_GPIO_Init+0x2d0>)
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	4928      	ldr	r1, [pc, #160]	@ (8002668 <HAL_GPIO_Init+0x2d0>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d006      	beq.n	80025e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025d8:	4b23      	ldr	r3, [pc, #140]	@ (8002668 <HAL_GPIO_Init+0x2d0>)
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	4922      	ldr	r1, [pc, #136]	@ (8002668 <HAL_GPIO_Init+0x2d0>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60cb      	str	r3, [r1, #12]
 80025e4:	e006      	b.n	80025f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025e6:	4b20      	ldr	r3, [pc, #128]	@ (8002668 <HAL_GPIO_Init+0x2d0>)
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	491e      	ldr	r1, [pc, #120]	@ (8002668 <HAL_GPIO_Init+0x2d0>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d006      	beq.n	800260e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002600:	4b19      	ldr	r3, [pc, #100]	@ (8002668 <HAL_GPIO_Init+0x2d0>)
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	4918      	ldr	r1, [pc, #96]	@ (8002668 <HAL_GPIO_Init+0x2d0>)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	604b      	str	r3, [r1, #4]
 800260c:	e006      	b.n	800261c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800260e:	4b16      	ldr	r3, [pc, #88]	@ (8002668 <HAL_GPIO_Init+0x2d0>)
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	43db      	mvns	r3, r3
 8002616:	4914      	ldr	r1, [pc, #80]	@ (8002668 <HAL_GPIO_Init+0x2d0>)
 8002618:	4013      	ands	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d021      	beq.n	800266c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002628:	4b0f      	ldr	r3, [pc, #60]	@ (8002668 <HAL_GPIO_Init+0x2d0>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	490e      	ldr	r1, [pc, #56]	@ (8002668 <HAL_GPIO_Init+0x2d0>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]
 8002634:	e021      	b.n	800267a <HAL_GPIO_Init+0x2e2>
 8002636:	bf00      	nop
 8002638:	10320000 	.word	0x10320000
 800263c:	10310000 	.word	0x10310000
 8002640:	10220000 	.word	0x10220000
 8002644:	10210000 	.word	0x10210000
 8002648:	10120000 	.word	0x10120000
 800264c:	10110000 	.word	0x10110000
 8002650:	40021000 	.word	0x40021000
 8002654:	40010000 	.word	0x40010000
 8002658:	40010800 	.word	0x40010800
 800265c:	40010c00 	.word	0x40010c00
 8002660:	40011000 	.word	0x40011000
 8002664:	40011400 	.word	0x40011400
 8002668:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800266c:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <HAL_GPIO_Init+0x304>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	43db      	mvns	r3, r3
 8002674:	4909      	ldr	r1, [pc, #36]	@ (800269c <HAL_GPIO_Init+0x304>)
 8002676:	4013      	ands	r3, r2
 8002678:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	3301      	adds	r3, #1
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002686:	fa22 f303 	lsr.w	r3, r2, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	f47f ae8e 	bne.w	80023ac <HAL_GPIO_Init+0x14>
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	372c      	adds	r7, #44	@ 0x2c
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	40010400 	.word	0x40010400

080026a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e0e8      	b.n	8002884 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f007 fc26 	bl	8009f18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2203      	movs	r2, #3
 80026d0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fc49 	bl	8005f76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3304      	adds	r3, #4
 80026ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ee:	f003 fc1f 	bl	8005f30 <USB_CoreInit>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0bf      	b.n	8002884 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f003 fc4d 	bl	8005faa <USB_SetCurrentMode>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2202      	movs	r2, #2
 800271a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e0b0      	b.n	8002884 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002722:	2300      	movs	r3, #0
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e03e      	b.n	80027a6 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	440b      	add	r3, r1
 8002736:	3311      	adds	r3, #17
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	3310      	adds	r3, #16
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	440b      	add	r3, r1
 800275e:	3313      	adds	r3, #19
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	440b      	add	r3, r1
 8002772:	3320      	adds	r3, #32
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	440b      	add	r3, r1
 8002786:	3324      	adds	r3, #36	@ 0x24
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	440b      	add	r3, r1
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	3301      	adds	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	791b      	ldrb	r3, [r3, #4]
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d3bb      	bcc.n	8002728 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	e044      	b.n	8002840 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	440b      	add	r3, r1
 80027da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027e2:	7bfa      	ldrb	r2, [r7, #15]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	440b      	add	r3, r1
 80027f0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800280e:	7bfa      	ldrb	r2, [r7, #15]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	440b      	add	r3, r1
 8002832:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	3301      	adds	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	791b      	ldrb	r3, [r3, #4]
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	429a      	cmp	r2, r3
 8002848:	d3b5      	bcc.n	80027b6 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3304      	adds	r3, #4
 8002852:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002854:	f003 fbb5 	bl	8005fc2 <USB_DevInit>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2202      	movs	r2, #2
 8002862:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e00c      	b.n	8002884 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f005 fe34 	bl	80084ea <USB_DevDisconnect>

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_PCD_Start+0x16>
 800289e:	2302      	movs	r3, #2
 80028a0:	e016      	b.n	80028d0 <HAL_PCD_Start+0x44>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f003 fb4b 	bl	8005f4a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80028b4:	2101      	movs	r1, #1
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f007 fe81 	bl	800a5be <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f005 fe08 	bl	80084d6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f005 fe0a 	bl	80084fe <USB_ReadInterrupts>
 80028ea:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fb1a 	bl	8002f30 <PCD_EP_ISR_Handler>

    return;
 80028fc:	e119      	b.n	8002b32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002904:	2b00      	cmp	r3, #0
 8002906:	d013      	beq.n	8002930 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002910:	b29a      	uxth	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800291a:	b292      	uxth	r2, r2
 800291c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f007 fb74 	bl	800a00e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002926:	2100      	movs	r1, #0
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f905 	bl	8002b38 <HAL_PCD_SetAddress>

    return;
 800292e:	e100      	b.n	8002b32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00c      	beq.n	8002954 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800294c:	b292      	uxth	r2, r2
 800294e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002952:	e0ee      	b.n	8002b32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00c      	beq.n	8002978 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002966:	b29a      	uxth	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002970:	b292      	uxth	r2, r2
 8002972:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002976:	e0dc      	b.n	8002b32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d027      	beq.n	80029d2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800298a:	b29a      	uxth	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0204 	bic.w	r2, r2, #4
 8002994:	b292      	uxth	r2, r2
 8002996:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0208 	bic.w	r2, r2, #8
 80029ac:	b292      	uxth	r2, r2
 80029ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f007 fb68 	bl	800a088 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80029ca:	b292      	uxth	r2, r2
 80029cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80029d0:	e0af      	b.n	8002b32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 8083 	beq.w	8002ae4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80029de:	2300      	movs	r3, #0
 80029e0:	77fb      	strb	r3, [r7, #31]
 80029e2:	e010      	b.n	8002a06 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	7ffb      	ldrb	r3, [r7, #31]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	441a      	add	r2, r3
 80029f0:	7ffb      	ldrb	r3, [r7, #31]
 80029f2:	8812      	ldrh	r2, [r2, #0]
 80029f4:	b292      	uxth	r2, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	3320      	adds	r3, #32
 80029fa:	443b      	add	r3, r7
 80029fc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002a00:	7ffb      	ldrb	r3, [r7, #31]
 8002a02:	3301      	adds	r3, #1
 8002a04:	77fb      	strb	r3, [r7, #31]
 8002a06:	7ffb      	ldrb	r3, [r7, #31]
 8002a08:	2b07      	cmp	r3, #7
 8002a0a:	d9eb      	bls.n	80029e4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	b292      	uxth	r2, r2
 8002a20:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	b292      	uxth	r2, r2
 8002a38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002a3c:	bf00      	nop
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f6      	beq.n	8002a3e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a62:	b292      	uxth	r2, r2
 8002a64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	77fb      	strb	r3, [r7, #31]
 8002a6c:	e00f      	b.n	8002a8e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002a6e:	7ffb      	ldrb	r3, [r7, #31]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	4611      	mov	r1, r2
 8002a76:	7ffa      	ldrb	r2, [r7, #31]
 8002a78:	0092      	lsls	r2, r2, #2
 8002a7a:	440a      	add	r2, r1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	3320      	adds	r3, #32
 8002a80:	443b      	add	r3, r7
 8002a82:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002a86:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002a88:	7ffb      	ldrb	r3, [r7, #31]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	77fb      	strb	r3, [r7, #31]
 8002a8e:	7ffb      	ldrb	r3, [r7, #31]
 8002a90:	2b07      	cmp	r3, #7
 8002a92:	d9ec      	bls.n	8002a6e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0208 	orr.w	r2, r2, #8
 8002aa6:	b292      	uxth	r2, r2
 8002aa8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002abe:	b292      	uxth	r2, r2
 8002ac0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0204 	orr.w	r2, r2, #4
 8002ad6:	b292      	uxth	r2, r2
 8002ad8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f007 fab9 	bl	800a054 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ae2:	e026      	b.n	8002b32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00f      	beq.n	8002b0e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b00:	b292      	uxth	r2, r2
 8002b02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f007 fa73 	bl	8009ff2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b0c:	e011      	b.n	8002b32 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00c      	beq.n	8002b32 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b2a:	b292      	uxth	r2, r2
 8002b2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b30:	bf00      	nop
  }
}
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_PCD_SetAddress+0x1a>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e012      	b.n	8002b78 <HAL_PCD_SetAddress+0x40>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f005 fca1 	bl	80084b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	4608      	mov	r0, r1
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	70fb      	strb	r3, [r7, #3]
 8002b92:	460b      	mov	r3, r1
 8002b94:	803b      	strh	r3, [r7, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	da0e      	bge.n	8002bc4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ba6:	78fb      	ldrb	r3, [r7, #3]
 8002ba8:	f003 0207 	and.w	r2, r3, #7
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	3310      	adds	r3, #16
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	705a      	strb	r2, [r3, #1]
 8002bc2:	e00e      	b.n	8002be2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	f003 0207 	and.w	r2, r3, #7
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002bee:	883a      	ldrh	r2, [r7, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	78ba      	ldrb	r2, [r7, #2]
 8002bf8:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bfa:	78bb      	ldrb	r3, [r7, #2]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d102      	bne.n	8002c06 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_PCD_EP_Open+0x94>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e00e      	b.n	8002c32 <HAL_PCD_EP_Open+0xb2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68f9      	ldr	r1, [r7, #12]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 f9ea 	bl	8005ffc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002c30:	7afb      	ldrb	r3, [r7, #11]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	da0e      	bge.n	8002c6c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	f003 0207 	and.w	r2, r3, #7
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	3310      	adds	r3, #16
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	705a      	strb	r2, [r3, #1]
 8002c6a:	e00e      	b.n	8002c8a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	f003 0207 	and.w	r2, r3, #7
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_PCD_EP_Close+0x6a>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e00e      	b.n	8002cc2 <HAL_PCD_EP_Close+0x88>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68f9      	ldr	r1, [r7, #12]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f003 fd62 	bl	800677c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cda:	7afb      	ldrb	r3, [r7, #11]
 8002cdc:	f003 0207 	and.w	r2, r3, #7
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4413      	add	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2200      	movs	r2, #0
 8002d02:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2200      	movs	r2, #0
 8002d08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d0a:	7afb      	ldrb	r3, [r7, #11]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6979      	ldr	r1, [r7, #20]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f003 ff19 	bl	8006b54 <USB_EPStartXfer>

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	f003 0207 	and.w	r2, r3, #7
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	440b      	add	r3, r1
 8002d4a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	460b      	mov	r3, r1
 8002d68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d6a:	7afb      	ldrb	r3, [r7, #11]
 8002d6c:	f003 0207 	and.w	r2, r3, #7
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	3310      	adds	r3, #16
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2201      	movs	r2, #1
 8002da4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002da6:	7afb      	ldrb	r3, [r7, #11]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6979      	ldr	r1, [r7, #20]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f003 fecb 	bl	8006b54 <USB_EPStartXfer>

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	7912      	ldrb	r2, [r2, #4]
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e04c      	b.n	8002e80 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	da0e      	bge.n	8002e0c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	f003 0207 	and.w	r2, r3, #7
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	3310      	adds	r3, #16
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	705a      	strb	r2, [r3, #1]
 8002e0a:	e00c      	b.n	8002e26 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_PCD_EP_SetStall+0x7e>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e01c      	b.n	8002e80 <HAL_PCD_EP_SetStall+0xb8>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68f9      	ldr	r1, [r7, #12]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f005 fa2e 	bl	80082b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d108      	bne.n	8002e76 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4610      	mov	r0, r2
 8002e72:	f005 fb53 	bl	800851c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	7912      	ldrb	r2, [r2, #4]
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e040      	b.n	8002f28 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	da0e      	bge.n	8002ecc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	f003 0207 	and.w	r2, r3, #7
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	3310      	adds	r3, #16
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	705a      	strb	r2, [r3, #1]
 8002eca:	e00e      	b.n	8002eea <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	f003 0207 	and.w	r2, r3, #7
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_PCD_EP_ClrStall+0x82>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e00e      	b.n	8002f28 <HAL_PCD_EP_ClrStall+0xa0>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68f9      	ldr	r1, [r7, #12]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f005 fa1c 	bl	8008356 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b096      	sub	sp, #88	@ 0x58
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f38:	e3bb      	b.n	80036b2 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f42:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002f46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002f54:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f040 8175 	bne.w	8003248 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d14e      	bne.n	8003008 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f7a:	81fb      	strh	r3, [r7, #14]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	89fb      	ldrh	r3, [r7, #14]
 8002f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3310      	adds	r3, #16
 8002f92:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3302      	adds	r3, #2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fbe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	441a      	add	r2, r3
 8002fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fcc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002fce:	2100      	movs	r1, #0
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f006 fff4 	bl	8009fbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	7b5b      	ldrb	r3, [r3, #13]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8368 	beq.w	80036b2 <PCD_EP_ISR_Handler+0x782>
 8002fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f040 8363 	bne.w	80036b2 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	7b5b      	ldrb	r3, [r3, #13]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	735a      	strb	r2, [r3, #13]
 8003006:	e354      	b.n	80036b2 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800300e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800301a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800301e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003022:	2b00      	cmp	r3, #0
 8003024:	d034      	beq.n	8003090 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800302e:	b29b      	uxth	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4413      	add	r3, r2
 800303a:	3306      	adds	r3, #6
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800304e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003050:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800305c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800305e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003062:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003064:	b29b      	uxth	r3, r3
 8003066:	f005 faaa 	bl	80085be <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	b29a      	uxth	r2, r3
 8003072:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003076:	4013      	ands	r3, r2
 8003078:	823b      	strh	r3, [r7, #16]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	8a3a      	ldrh	r2, [r7, #16]
 8003080:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003084:	b292      	uxth	r2, r2
 8003086:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f006 ff6b 	bl	8009f64 <HAL_PCD_SetupStageCallback>
 800308e:	e310      	b.n	80036b2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003090:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003094:	2b00      	cmp	r3, #0
 8003096:	f280 830c 	bge.w	80036b2 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80030a6:	4013      	ands	r3, r2
 80030a8:	83fb      	strh	r3, [r7, #30]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	8bfa      	ldrh	r2, [r7, #30]
 80030b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80030b4:	b292      	uxth	r2, r2
 80030b6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	3306      	adds	r3, #6
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80030e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d019      	beq.n	8003120 <PCD_EP_ISR_Handler+0x1f0>
 80030ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d015      	beq.n	8003120 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030fa:	6959      	ldr	r1, [r3, #20]
 80030fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030fe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003102:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003104:	b29b      	uxth	r3, r3
 8003106:	f005 fa5a 	bl	80085be <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800310a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	441a      	add	r2, r3
 8003114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003116:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003118:	2100      	movs	r1, #0
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f006 ff34 	bl	8009f88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800312a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800312e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003132:	2b00      	cmp	r3, #0
 8003134:	f040 82bd 	bne.w	80036b2 <PCD_EP_ISR_Handler+0x782>
 8003138:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800313c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003140:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003144:	f000 82b5 	beq.w	80036b2 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003156:	b29b      	uxth	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	4413      	add	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	b29b      	uxth	r3, r3
 800316e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003172:	b29a      	uxth	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	801a      	strh	r2, [r3, #0]
 8003178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2b3e      	cmp	r3, #62	@ 0x3e
 800317e:	d91d      	bls.n	80031bc <PCD_EP_ISR_Handler+0x28c>
 8003180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	647b      	str	r3, [r7, #68]	@ 0x44
 8003188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <PCD_EP_ISR_Handler+0x26a>
 8003194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003196:	3b01      	subs	r3, #1
 8003198:	647b      	str	r3, [r7, #68]	@ 0x44
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	b29a      	uxth	r2, r3
 80031a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	029b      	lsls	r3, r3, #10
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	4313      	orrs	r3, r2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	801a      	strh	r2, [r3, #0]
 80031ba:	e026      	b.n	800320a <PCD_EP_ISR_Handler+0x2da>
 80031bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10a      	bne.n	80031da <PCD_EP_ISR_Handler+0x2aa>
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	801a      	strh	r2, [r3, #0]
 80031d8:	e017      	b.n	800320a <PCD_EP_ISR_Handler+0x2da>
 80031da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	085b      	lsrs	r3, r3, #1
 80031e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80031e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <PCD_EP_ISR_Handler+0x2c4>
 80031ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031f0:	3301      	adds	r3, #1
 80031f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	029b      	lsls	r3, r3, #10
 8003200:	b29b      	uxth	r3, r3
 8003202:	4313      	orrs	r3, r2
 8003204:	b29a      	uxth	r2, r3
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800321a:	827b      	strh	r3, [r7, #18]
 800321c:	8a7b      	ldrh	r3, [r7, #18]
 800321e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003222:	827b      	strh	r3, [r7, #18]
 8003224:	8a7b      	ldrh	r3, [r7, #18]
 8003226:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800322a:	827b      	strh	r3, [r7, #18]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	8a7b      	ldrh	r3, [r7, #18]
 8003232:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003236:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800323a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800323e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003242:	b29b      	uxth	r3, r3
 8003244:	8013      	strh	r3, [r2, #0]
 8003246:	e234      	b.n	80036b2 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800325c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003260:	2b00      	cmp	r3, #0
 8003262:	f280 80fc 	bge.w	800345e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	b29a      	uxth	r2, r3
 8003278:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800327c:	4013      	ands	r3, r2
 800327e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003294:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003298:	b292      	uxth	r2, r2
 800329a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800329c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80032b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b4:	7b1b      	ldrb	r3, [r3, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d125      	bne.n	8003306 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4413      	add	r3, r2
 80032ce:	3306      	adds	r3, #6
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80032e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8092 	beq.w	8003414 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f6:	6959      	ldr	r1, [r3, #20]
 80032f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032fa:	88da      	ldrh	r2, [r3, #6]
 80032fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003300:	f005 f95d 	bl	80085be <USB_ReadPMA>
 8003304:	e086      	b.n	8003414 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003308:	78db      	ldrb	r3, [r3, #3]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d10a      	bne.n	8003324 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800330e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003312:	461a      	mov	r2, r3
 8003314:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f9d9 	bl	80036ce <HAL_PCD_EP_DB_Receive>
 800331c:	4603      	mov	r3, r0
 800331e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003322:	e077      	b.n	8003414 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800333a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800333e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	441a      	add	r2, r3
 8003350:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800335c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003360:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003364:	b29b      	uxth	r3, r3
 8003366:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	b29b      	uxth	r3, r3
 800337a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d024      	beq.n	80033cc <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800338a:	b29b      	uxth	r3, r3
 800338c:	461a      	mov	r2, r3
 800338e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4413      	add	r3, r2
 8003396:	3302      	adds	r3, #2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033aa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80033ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d02e      	beq.n	8003414 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033bc:	6959      	ldr	r1, [r3, #20]
 80033be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c0:	891a      	ldrh	r2, [r3, #8]
 80033c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80033c6:	f005 f8fa 	bl	80085be <USB_ReadPMA>
 80033ca:	e023      	b.n	8003414 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4413      	add	r3, r2
 80033e0:	3306      	adds	r3, #6
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033f4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80033f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d009      	beq.n	8003414 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003406:	6959      	ldr	r1, [r3, #20]
 8003408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340a:	895a      	ldrh	r2, [r3, #10]
 800340c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003410:	f005 f8d5 	bl	80085be <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800341c:	441a      	add	r2, r3
 800341e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003420:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800342a:	441a      	add	r2, r3
 800342c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800342e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <PCD_EP_ISR_Handler+0x514>
 8003438:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800343c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	429a      	cmp	r2, r3
 8003442:	d206      	bcs.n	8003452 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	4619      	mov	r1, r3
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f006 fd9c 	bl	8009f88 <HAL_PCD_DataOutStageCallback>
 8003450:	e005      	b.n	800345e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003458:	4618      	mov	r0, r3
 800345a:	f003 fb7b 	bl	8006b54 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800345e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8123 	beq.w	80036b2 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800346c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	3310      	adds	r3, #16
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	b29b      	uxth	r3, r3
 8003492:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800349a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	441a      	add	r2, r3
 80034ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80034b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80034bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034be:	78db      	ldrb	r3, [r3, #3]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	f040 80a2 	bne.w	800360a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80034c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c8:	2200      	movs	r2, #0
 80034ca:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80034cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ce:	7b1b      	ldrb	r3, [r3, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8093 	beq.w	80035fc <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d046      	beq.n	8003570 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e4:	785b      	ldrb	r3, [r3, #1]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d126      	bne.n	8003538 <PCD_EP_ISR_Handler+0x608>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fe:	4413      	add	r3, r2
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24
 8003502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	011a      	lsls	r2, r3, #4
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	4413      	add	r3, r2
 800350c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003510:	623b      	str	r3, [r7, #32]
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800351c:	b29a      	uxth	r2, r3
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	801a      	strh	r2, [r3, #0]
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800352c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003530:	b29a      	uxth	r2, r3
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	801a      	strh	r2, [r3, #0]
 8003536:	e061      	b.n	80035fc <PCD_EP_ISR_Handler+0x6cc>
 8003538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353a:	785b      	ldrb	r3, [r3, #1]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d15d      	bne.n	80035fc <PCD_EP_ISR_Handler+0x6cc>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800354e:	b29b      	uxth	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003554:	4413      	add	r3, r2
 8003556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	011a      	lsls	r2, r3, #4
 800355e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003560:	4413      	add	r3, r2
 8003562:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003566:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356a:	2200      	movs	r2, #0
 800356c:	801a      	strh	r2, [r3, #0]
 800356e:	e045      	b.n	80035fc <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003578:	785b      	ldrb	r3, [r3, #1]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d126      	bne.n	80035cc <PCD_EP_ISR_Handler+0x69c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	637b      	str	r3, [r7, #52]	@ 0x34
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800358c:	b29b      	uxth	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003592:	4413      	add	r3, r2
 8003594:	637b      	str	r3, [r7, #52]	@ 0x34
 8003596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	011a      	lsls	r2, r3, #4
 800359c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359e:	4413      	add	r3, r2
 80035a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80035a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c8:	801a      	strh	r2, [r3, #0]
 80035ca:	e017      	b.n	80035fc <PCD_EP_ISR_Handler+0x6cc>
 80035cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ce:	785b      	ldrb	r3, [r3, #1]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d113      	bne.n	80035fc <PCD_EP_ISR_Handler+0x6cc>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035dc:	b29b      	uxth	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e2:	4413      	add	r3, r2
 80035e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	011a      	lsls	r2, r3, #4
 80035ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ee:	4413      	add	r3, r2
 80035f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f8:	2200      	movs	r2, #0
 80035fa:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f006 fcdb 	bl	8009fbe <HAL_PCD_DataInStageCallback>
 8003608:	e053      	b.n	80036b2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800360a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800360e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d146      	bne.n	80036a4 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800361e:	b29b      	uxth	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	3302      	adds	r3, #2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800363e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800364a:	429a      	cmp	r2, r3
 800364c:	d907      	bls.n	800365e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800364e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003656:	1ad2      	subs	r2, r2, r3
 8003658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800365a:	619a      	str	r2, [r3, #24]
 800365c:	e002      	b.n	8003664 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800365e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003660:	2200      	movs	r2, #0
 8003662:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d106      	bne.n	800367a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800366c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	4619      	mov	r1, r3
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f006 fca3 	bl	8009fbe <HAL_PCD_DataInStageCallback>
 8003678:	e01b      	b.n	80036b2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800367a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003682:	441a      	add	r2, r3
 8003684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003686:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003690:	441a      	add	r2, r3
 8003692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003694:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800369c:	4618      	mov	r0, r3
 800369e:	f003 fa59 	bl	8006b54 <USB_EPStartXfer>
 80036a2:	e006      	b.n	80036b2 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80036a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80036a8:	461a      	mov	r2, r3
 80036aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f91b 	bl	80038e8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	b21b      	sxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f6ff ac3b 	blt.w	8002f3a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3758      	adds	r7, #88	@ 0x58
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b088      	sub	sp, #32
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	4613      	mov	r3, r2
 80036da:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d07e      	beq.n	80037e4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	3302      	adds	r3, #2
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800370e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	699a      	ldr	r2, [r3, #24]
 8003714:	8b7b      	ldrh	r3, [r7, #26]
 8003716:	429a      	cmp	r2, r3
 8003718:	d306      	bcc.n	8003728 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	8b7b      	ldrh	r3, [r7, #26]
 8003720:	1ad2      	subs	r2, r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	619a      	str	r2, [r3, #24]
 8003726:	e002      	b.n	800372e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2200      	movs	r2, #0
 800372c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d123      	bne.n	800377e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b29b      	uxth	r3, r3
 8003748:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800374c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003750:	833b      	strh	r3, [r7, #24]
 8003752:	8b3b      	ldrh	r3, [r7, #24]
 8003754:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003758:	833b      	strh	r3, [r7, #24]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	441a      	add	r2, r3
 8003768:	8b3b      	ldrh	r3, [r7, #24]
 800376a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800376e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800377a:	b29b      	uxth	r3, r3
 800377c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800377e:	88fb      	ldrh	r3, [r7, #6]
 8003780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01f      	beq.n	80037c8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	b29b      	uxth	r3, r3
 800379a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800379e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a2:	82fb      	strh	r3, [r7, #22]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	441a      	add	r2, r3
 80037b2:	8afb      	ldrh	r3, [r7, #22]
 80037b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80037c8:	8b7b      	ldrh	r3, [r7, #26]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 8087 	beq.w	80038de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	6959      	ldr	r1, [r3, #20]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	891a      	ldrh	r2, [r3, #8]
 80037dc:	8b7b      	ldrh	r3, [r7, #26]
 80037de:	f004 feee 	bl	80085be <USB_ReadPMA>
 80037e2:	e07c      	b.n	80038de <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4413      	add	r3, r2
 80037f8:	3306      	adds	r3, #6
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800380c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	699a      	ldr	r2, [r3, #24]
 8003812:	8b7b      	ldrh	r3, [r7, #26]
 8003814:	429a      	cmp	r2, r3
 8003816:	d306      	bcc.n	8003826 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	699a      	ldr	r2, [r3, #24]
 800381c:	8b7b      	ldrh	r3, [r7, #26]
 800381e:	1ad2      	subs	r2, r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	619a      	str	r2, [r3, #24]
 8003824:	e002      	b.n	800382c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2200      	movs	r2, #0
 800382a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d123      	bne.n	800387c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800384a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800384e:	83fb      	strh	r3, [r7, #30]
 8003850:	8bfb      	ldrh	r3, [r7, #30]
 8003852:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003856:	83fb      	strh	r3, [r7, #30]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	441a      	add	r2, r3
 8003866:	8bfb      	ldrh	r3, [r7, #30]
 8003868:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800386c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003870:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003878:	b29b      	uxth	r3, r3
 800387a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d11f      	bne.n	80038c6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	b29b      	uxth	r3, r3
 8003898:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800389c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a0:	83bb      	strh	r3, [r7, #28]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	441a      	add	r2, r3
 80038b0:	8bbb      	ldrh	r3, [r7, #28]
 80038b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038c6:	8b7b      	ldrh	r3, [r7, #26]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	6959      	ldr	r1, [r3, #20]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	895a      	ldrh	r2, [r3, #10]
 80038d8:	8b7b      	ldrh	r3, [r7, #26]
 80038da:	f004 fe70 	bl	80085be <USB_ReadPMA>
    }
  }

  return count;
 80038de:	8b7b      	ldrh	r3, [r7, #26]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3720      	adds	r7, #32
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b0a4      	sub	sp, #144	@ 0x90
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	4613      	mov	r3, r2
 80038f4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 81dd 	beq.w	8003cbc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800390a:	b29b      	uxth	r3, r3
 800390c:	461a      	mov	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	3302      	adds	r3, #2
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800392a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	699a      	ldr	r2, [r3, #24]
 8003932:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003936:	429a      	cmp	r2, r3
 8003938:	d907      	bls.n	800394a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003942:	1ad2      	subs	r2, r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	619a      	str	r2, [r3, #24]
 8003948:	e002      	b.n	8003950 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2200      	movs	r2, #0
 800394e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f040 80b9 	bne.w	8003acc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	785b      	ldrb	r3, [r3, #1]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d126      	bne.n	80039b0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003970:	b29b      	uxth	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003976:	4413      	add	r3, r2
 8003978:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	011a      	lsls	r2, r3, #4
 8003980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003982:	4413      	add	r3, r2
 8003984:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800398a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003994:	b29a      	uxth	r2, r3
 8003996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003998:	801a      	strh	r2, [r3, #0]
 800399a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ac:	801a      	strh	r2, [r3, #0]
 80039ae:	e01a      	b.n	80039e6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	785b      	ldrb	r3, [r3, #1]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d116      	bne.n	80039e6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039cc:	4413      	add	r3, r2
 80039ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	011a      	lsls	r2, r3, #4
 80039d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d8:	4413      	add	r3, r2
 80039da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80039de:	633b      	str	r3, [r7, #48]	@ 0x30
 80039e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e2:	2200      	movs	r2, #0
 80039e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	785b      	ldrb	r3, [r3, #1]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d126      	bne.n	8003a42 <HAL_PCD_EP_DB_Transmit+0x15a>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	61fb      	str	r3, [r7, #28]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	4413      	add	r3, r2
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	011a      	lsls	r2, r3, #4
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	4413      	add	r3, r2
 8003a16:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a1a:	61bb      	str	r3, [r7, #24]
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	801a      	strh	r2, [r3, #0]
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	801a      	strh	r2, [r3, #0]
 8003a40:	e017      	b.n	8003a72 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	785b      	ldrb	r3, [r3, #1]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d113      	bne.n	8003a72 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a58:	4413      	add	r3, r2
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	011a      	lsls	r2, r3, #4
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	4413      	add	r3, r2
 8003a66:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a6a:	623b      	str	r3, [r7, #32]
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	4619      	mov	r1, r3
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f006 faa0 	bl	8009fbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 82fc 	beq.w	8004082 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aa4:	82fb      	strh	r3, [r7, #22]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	441a      	add	r2, r3
 8003ab4:	8afb      	ldrh	r3, [r7, #22]
 8003ab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003abe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	8013      	strh	r3, [r2, #0]
 8003aca:	e2da      	b.n	8004082 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d021      	beq.n	8003b1a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003af0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	441a      	add	r2, r3
 8003b02:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003b06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	f040 82ae 	bne.w	8004082 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b2e:	441a      	add	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b3c:	441a      	add	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	6a1a      	ldr	r2, [r3, #32]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d30b      	bcc.n	8003b66 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	6a1a      	ldr	r2, [r3, #32]
 8003b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b5e:	1ad2      	subs	r2, r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	621a      	str	r2, [r3, #32]
 8003b64:	e017      	b.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d108      	bne.n	8003b80 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003b6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003b7e:	e00a      	b.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2200      	movs	r2, #0
 8003b94:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	785b      	ldrb	r3, [r3, #1]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d165      	bne.n	8003c6a <HAL_PCD_EP_DB_Transmit+0x382>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bb2:	4413      	add	r3, r2
 8003bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	011a      	lsls	r2, r3, #4
 8003bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd4:	801a      	strh	r2, [r3, #0]
 8003bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bda:	2b3e      	cmp	r3, #62	@ 0x3e
 8003bdc:	d91d      	bls.n	8003c1a <HAL_PCD_EP_DB_Transmit+0x332>
 8003bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d102      	bne.n	8003bf8 <HAL_PCD_EP_DB_Transmit+0x310>
 8003bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	029b      	lsls	r3, r3, #10
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	4313      	orrs	r3, r2
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c16:	801a      	strh	r2, [r3, #0]
 8003c18:	e044      	b.n	8003ca4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <HAL_PCD_EP_DB_Transmit+0x350>
 8003c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	e035      	b.n	8003ca4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c4e:	3301      	adds	r3, #1
 8003c50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	029b      	lsls	r3, r3, #10
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	4313      	orrs	r3, r2
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c66:	801a      	strh	r2, [r3, #0]
 8003c68:	e01c      	b.n	8003ca4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	785b      	ldrb	r3, [r3, #1]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d118      	bne.n	8003ca4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c86:	4413      	add	r3, r2
 8003c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	011a      	lsls	r2, r3, #4
 8003c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c92:	4413      	add	r3, r2
 8003c94:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c98:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ca2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6959      	ldr	r1, [r3, #20]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	891a      	ldrh	r2, [r3, #8]
 8003cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f004 fc3c 	bl	8008532 <USB_WritePMA>
 8003cba:	e1e2      	b.n	8004082 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	3306      	adds	r3, #6
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	699a      	ldr	r2, [r3, #24]
 8003cec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d307      	bcc.n	8003d04 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	699a      	ldr	r2, [r3, #24]
 8003cf8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cfc:	1ad2      	subs	r2, r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	619a      	str	r2, [r3, #24]
 8003d02:	e002      	b.n	8003d0a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2200      	movs	r2, #0
 8003d08:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f040 80c0 	bne.w	8003e94 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	785b      	ldrb	r3, [r3, #1]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d126      	bne.n	8003d6a <HAL_PCD_EP_DB_Transmit+0x482>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d30:	4413      	add	r3, r2
 8003d32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	011a      	lsls	r2, r3, #4
 8003d3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d52:	801a      	strh	r2, [r3, #0]
 8003d54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d66:	801a      	strh	r2, [r3, #0]
 8003d68:	e01a      	b.n	8003da0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	785b      	ldrb	r3, [r3, #1]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d116      	bne.n	8003da0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d86:	4413      	add	r3, r2
 8003d88:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	011a      	lsls	r2, r3, #4
 8003d90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d92:	4413      	add	r3, r2
 8003d94:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d98:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	677b      	str	r3, [r7, #116]	@ 0x74
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	785b      	ldrb	r3, [r3, #1]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d12b      	bne.n	8003e06 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dc2:	4413      	add	r3, r2
 8003dc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	011a      	lsls	r2, r3, #4
 8003dcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dce:	4413      	add	r3, r2
 8003dd0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003dd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003dd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003dea:	801a      	strh	r2, [r3, #0]
 8003dec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e02:	801a      	strh	r2, [r3, #0]
 8003e04:	e017      	b.n	8003e36 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d113      	bne.n	8003e36 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	461a      	mov	r2, r3
 8003e1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e1c:	4413      	add	r3, r2
 8003e1e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	011a      	lsls	r2, r3, #4
 8003e26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e28:	4413      	add	r3, r2
 8003e2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e32:	2200      	movs	r2, #0
 8003e34:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f006 f8be 	bl	8009fbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f040 811a 	bne.w	8004082 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e68:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	441a      	add	r2, r3
 8003e7a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003e7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	8013      	strh	r3, [r2, #0]
 8003e92:	e0f6      	b.n	8004082 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e94:	88fb      	ldrh	r3, [r7, #6]
 8003e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d121      	bne.n	8003ee2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	441a      	add	r2, r3
 8003eca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003ece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ed6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	f040 80ca 	bne.w	8004082 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ef6:	441a      	add	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	69da      	ldr	r2, [r3, #28]
 8003f00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f04:	441a      	add	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	6a1a      	ldr	r2, [r3, #32]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d30b      	bcc.n	8003f2e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	6a1a      	ldr	r2, [r3, #32]
 8003f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f26:	1ad2      	subs	r2, r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	621a      	str	r2, [r3, #32]
 8003f2c:	e017      	b.n	8003f5e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d108      	bne.n	8003f48 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003f36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003f46:	e00a      	b.n	8003f5e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2200      	movs	r2, #0
 8003f54:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	785b      	ldrb	r3, [r3, #1]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d165      	bne.n	8004038 <HAL_PCD_EP_DB_Transmit+0x750>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f80:	4413      	add	r3, r2
 8003f82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	011a      	lsls	r2, r3, #4
 8003f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fa2:	801a      	strh	r2, [r3, #0]
 8003fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fa8:	2b3e      	cmp	r3, #62	@ 0x3e
 8003faa:	d91d      	bls.n	8003fe8 <HAL_PCD_EP_DB_Transmit+0x700>
 8003fac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d102      	bne.n	8003fc6 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003fc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	029b      	lsls	r3, r3, #10
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fe4:	801a      	strh	r2, [r3, #0]
 8003fe6:	e041      	b.n	800406c <HAL_PCD_EP_DB_Transmit+0x784>
 8003fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003ff0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004002:	801a      	strh	r2, [r3, #0]
 8004004:	e032      	b.n	800406c <HAL_PCD_EP_DB_Transmit+0x784>
 8004006:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800400e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_PCD_EP_DB_Transmit+0x738>
 800401a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800401c:	3301      	adds	r3, #1
 800401e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004020:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	b29a      	uxth	r2, r3
 8004026:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004028:	b29b      	uxth	r3, r3
 800402a:	029b      	lsls	r3, r3, #10
 800402c:	b29b      	uxth	r3, r3
 800402e:	4313      	orrs	r3, r2
 8004030:	b29a      	uxth	r2, r3
 8004032:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004034:	801a      	strh	r2, [r3, #0]
 8004036:	e019      	b.n	800406c <HAL_PCD_EP_DB_Transmit+0x784>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	785b      	ldrb	r3, [r3, #1]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d115      	bne.n	800406c <HAL_PCD_EP_DB_Transmit+0x784>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004048:	b29b      	uxth	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800404e:	4413      	add	r3, r2
 8004050:	657b      	str	r3, [r7, #84]	@ 0x54
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	011a      	lsls	r2, r3, #4
 8004058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800405a:	4413      	add	r3, r2
 800405c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004060:	653b      	str	r3, [r7, #80]	@ 0x50
 8004062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004066:	b29a      	uxth	r2, r3
 8004068:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800406a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6818      	ldr	r0, [r3, #0]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6959      	ldr	r1, [r3, #20]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	895a      	ldrh	r2, [r3, #10]
 8004078:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800407c:	b29b      	uxth	r3, r3
 800407e:	f004 fa58 	bl	8008532 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004098:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800409c:	82bb      	strh	r3, [r7, #20]
 800409e:	8abb      	ldrh	r3, [r7, #20]
 80040a0:	f083 0310 	eor.w	r3, r3, #16
 80040a4:	82bb      	strh	r3, [r7, #20]
 80040a6:	8abb      	ldrh	r3, [r7, #20]
 80040a8:	f083 0320 	eor.w	r3, r3, #32
 80040ac:	82bb      	strh	r3, [r7, #20]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	441a      	add	r2, r3
 80040bc:	8abb      	ldrh	r3, [r7, #20]
 80040be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3790      	adds	r7, #144	@ 0x90
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	460b      	mov	r3, r1
 80040e8:	817b      	strh	r3, [r7, #10]
 80040ea:	4613      	mov	r3, r2
 80040ec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80040ee:	897b      	ldrh	r3, [r7, #10]
 80040f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00b      	beq.n	8004112 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040fa:	897b      	ldrh	r3, [r7, #10]
 80040fc:	f003 0207 	and.w	r2, r3, #7
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	3310      	adds	r3, #16
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4413      	add	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e009      	b.n	8004126 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004112:	897a      	ldrh	r2, [r7, #10]
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004126:	893b      	ldrh	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d107      	bne.n	800413c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2200      	movs	r2, #0
 8004130:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	b29a      	uxth	r2, r3
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	80da      	strh	r2, [r3, #6]
 800413a:	e00b      	b.n	8004154 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2201      	movs	r2, #1
 8004140:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	b29a      	uxth	r2, r3
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	b29a      	uxth	r2, r3
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004164:	4b03      	ldr	r3, [pc, #12]	@ (8004174 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004166:	2201      	movs	r2, #1
 8004168:	601a      	str	r2, [r3, #0]
}
 800416a:	bf00      	nop
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	420e0020 	.word	0x420e0020

08004178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e272      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8087 	beq.w	80042a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004198:	4b92      	ldr	r3, [pc, #584]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d00c      	beq.n	80041be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041a4:	4b8f      	ldr	r3, [pc, #572]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d112      	bne.n	80041d6 <HAL_RCC_OscConfig+0x5e>
 80041b0:	4b8c      	ldr	r3, [pc, #560]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041bc:	d10b      	bne.n	80041d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041be:	4b89      	ldr	r3, [pc, #548]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d06c      	beq.n	80042a4 <HAL_RCC_OscConfig+0x12c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d168      	bne.n	80042a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e24c      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041de:	d106      	bne.n	80041ee <HAL_RCC_OscConfig+0x76>
 80041e0:	4b80      	ldr	r3, [pc, #512]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a7f      	ldr	r2, [pc, #508]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	e02e      	b.n	800424c <HAL_RCC_OscConfig+0xd4>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10c      	bne.n	8004210 <HAL_RCC_OscConfig+0x98>
 80041f6:	4b7b      	ldr	r3, [pc, #492]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7a      	ldr	r2, [pc, #488]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	4b78      	ldr	r3, [pc, #480]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a77      	ldr	r2, [pc, #476]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004208:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e01d      	b.n	800424c <HAL_RCC_OscConfig+0xd4>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004218:	d10c      	bne.n	8004234 <HAL_RCC_OscConfig+0xbc>
 800421a:	4b72      	ldr	r3, [pc, #456]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a71      	ldr	r2, [pc, #452]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b6f      	ldr	r3, [pc, #444]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a6e      	ldr	r2, [pc, #440]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e00b      	b.n	800424c <HAL_RCC_OscConfig+0xd4>
 8004234:	4b6b      	ldr	r3, [pc, #428]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a6a      	ldr	r2, [pc, #424]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800423a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	4b68      	ldr	r3, [pc, #416]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a67      	ldr	r2, [pc, #412]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800424a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d013      	beq.n	800427c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fd fae2 	bl	800181c <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800425c:	f7fd fade 	bl	800181c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	@ 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e200      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426e:	4b5d      	ldr	r3, [pc, #372]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0xe4>
 800427a:	e014      	b.n	80042a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fd face 	bl	800181c <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004284:	f7fd faca 	bl	800181c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	@ 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e1ec      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004296:	4b53      	ldr	r3, [pc, #332]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x10c>
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d063      	beq.n	800437a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042b2:	4b4c      	ldr	r3, [pc, #304]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00b      	beq.n	80042d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042be:	4b49      	ldr	r3, [pc, #292]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d11c      	bne.n	8004304 <HAL_RCC_OscConfig+0x18c>
 80042ca:	4b46      	ldr	r3, [pc, #280]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d116      	bne.n	8004304 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d6:	4b43      	ldr	r3, [pc, #268]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_RCC_OscConfig+0x176>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d001      	beq.n	80042ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e1c0      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ee:	4b3d      	ldr	r3, [pc, #244]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4939      	ldr	r1, [pc, #228]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004302:	e03a      	b.n	800437a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d020      	beq.n	800434e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800430c:	4b36      	ldr	r3, [pc, #216]	@ (80043e8 <HAL_RCC_OscConfig+0x270>)
 800430e:	2201      	movs	r2, #1
 8004310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004312:	f7fd fa83 	bl	800181c <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800431a:	f7fd fa7f 	bl	800181c <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e1a1      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432c:	4b2d      	ldr	r3, [pc, #180]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004338:	4b2a      	ldr	r3, [pc, #168]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4927      	ldr	r1, [pc, #156]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004348:	4313      	orrs	r3, r2
 800434a:	600b      	str	r3, [r1, #0]
 800434c:	e015      	b.n	800437a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800434e:	4b26      	ldr	r3, [pc, #152]	@ (80043e8 <HAL_RCC_OscConfig+0x270>)
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004354:	f7fd fa62 	bl	800181c <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435c:	f7fd fa5e 	bl	800181c <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e180      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436e:	4b1d      	ldr	r3, [pc, #116]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d03a      	beq.n	80043fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d019      	beq.n	80043c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438e:	4b17      	ldr	r3, [pc, #92]	@ (80043ec <HAL_RCC_OscConfig+0x274>)
 8004390:	2201      	movs	r2, #1
 8004392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004394:	f7fd fa42 	bl	800181c <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800439c:	f7fd fa3e 	bl	800181c <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e160      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ae:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043ba:	2001      	movs	r0, #1
 80043bc:	f000 face 	bl	800495c <RCC_Delay>
 80043c0:	e01c      	b.n	80043fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c2:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <HAL_RCC_OscConfig+0x274>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c8:	f7fd fa28 	bl	800181c <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ce:	e00f      	b.n	80043f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d0:	f7fd fa24 	bl	800181c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d908      	bls.n	80043f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e146      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000
 80043e8:	42420000 	.word	0x42420000
 80043ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f0:	4b92      	ldr	r3, [pc, #584]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 80043f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e9      	bne.n	80043d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80a6 	beq.w	8004556 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440a:	2300      	movs	r3, #0
 800440c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440e:	4b8b      	ldr	r3, [pc, #556]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10d      	bne.n	8004436 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441a:	4b88      	ldr	r3, [pc, #544]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	4a87      	ldr	r2, [pc, #540]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004424:	61d3      	str	r3, [r2, #28]
 8004426:	4b85      	ldr	r3, [pc, #532]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004432:	2301      	movs	r3, #1
 8004434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b82      	ldr	r3, [pc, #520]	@ (8004640 <HAL_RCC_OscConfig+0x4c8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d118      	bne.n	8004474 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004442:	4b7f      	ldr	r3, [pc, #508]	@ (8004640 <HAL_RCC_OscConfig+0x4c8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a7e      	ldr	r2, [pc, #504]	@ (8004640 <HAL_RCC_OscConfig+0x4c8>)
 8004448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800444c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800444e:	f7fd f9e5 	bl	800181c <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004456:	f7fd f9e1 	bl	800181c <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b64      	cmp	r3, #100	@ 0x64
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e103      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004468:	4b75      	ldr	r3, [pc, #468]	@ (8004640 <HAL_RCC_OscConfig+0x4c8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d106      	bne.n	800448a <HAL_RCC_OscConfig+0x312>
 800447c:	4b6f      	ldr	r3, [pc, #444]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	4a6e      	ldr	r2, [pc, #440]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	6213      	str	r3, [r2, #32]
 8004488:	e02d      	b.n	80044e6 <HAL_RCC_OscConfig+0x36e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10c      	bne.n	80044ac <HAL_RCC_OscConfig+0x334>
 8004492:	4b6a      	ldr	r3, [pc, #424]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	4a69      	ldr	r2, [pc, #420]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	6213      	str	r3, [r2, #32]
 800449e:	4b67      	ldr	r3, [pc, #412]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	4a66      	ldr	r2, [pc, #408]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	f023 0304 	bic.w	r3, r3, #4
 80044a8:	6213      	str	r3, [r2, #32]
 80044aa:	e01c      	b.n	80044e6 <HAL_RCC_OscConfig+0x36e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	2b05      	cmp	r3, #5
 80044b2:	d10c      	bne.n	80044ce <HAL_RCC_OscConfig+0x356>
 80044b4:	4b61      	ldr	r3, [pc, #388]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	4a60      	ldr	r2, [pc, #384]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044ba:	f043 0304 	orr.w	r3, r3, #4
 80044be:	6213      	str	r3, [r2, #32]
 80044c0:	4b5e      	ldr	r3, [pc, #376]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	4a5d      	ldr	r2, [pc, #372]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	6213      	str	r3, [r2, #32]
 80044cc:	e00b      	b.n	80044e6 <HAL_RCC_OscConfig+0x36e>
 80044ce:	4b5b      	ldr	r3, [pc, #364]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	4a5a      	ldr	r2, [pc, #360]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	f023 0301 	bic.w	r3, r3, #1
 80044d8:	6213      	str	r3, [r2, #32]
 80044da:	4b58      	ldr	r3, [pc, #352]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	4a57      	ldr	r2, [pc, #348]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	f023 0304 	bic.w	r3, r3, #4
 80044e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d015      	beq.n	800451a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ee:	f7fd f995 	bl	800181c <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f4:	e00a      	b.n	800450c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f6:	f7fd f991 	bl	800181c <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004504:	4293      	cmp	r3, r2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e0b1      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450c:	4b4b      	ldr	r3, [pc, #300]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0ee      	beq.n	80044f6 <HAL_RCC_OscConfig+0x37e>
 8004518:	e014      	b.n	8004544 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451a:	f7fd f97f 	bl	800181c <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004520:	e00a      	b.n	8004538 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004522:	f7fd f97b 	bl	800181c <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e09b      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004538:	4b40      	ldr	r3, [pc, #256]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1ee      	bne.n	8004522 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004544:	7dfb      	ldrb	r3, [r7, #23]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d105      	bne.n	8004556 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454a:	4b3c      	ldr	r3, [pc, #240]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	4a3b      	ldr	r2, [pc, #236]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004554:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 8087 	beq.w	800466e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004560:	4b36      	ldr	r3, [pc, #216]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 030c 	and.w	r3, r3, #12
 8004568:	2b08      	cmp	r3, #8
 800456a:	d061      	beq.n	8004630 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d146      	bne.n	8004602 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004574:	4b33      	ldr	r3, [pc, #204]	@ (8004644 <HAL_RCC_OscConfig+0x4cc>)
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457a:	f7fd f94f 	bl	800181c <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004582:	f7fd f94b 	bl	800181c <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e06d      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004594:	4b29      	ldr	r3, [pc, #164]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f0      	bne.n	8004582 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045a8:	d108      	bne.n	80045bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045aa:	4b24      	ldr	r3, [pc, #144]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	4921      	ldr	r1, [pc, #132]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045bc:	4b1f      	ldr	r3, [pc, #124]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a19      	ldr	r1, [r3, #32]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045cc:	430b      	orrs	r3, r1
 80045ce:	491b      	ldr	r1, [pc, #108]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004644 <HAL_RCC_OscConfig+0x4cc>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045da:	f7fd f91f 	bl	800181c <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e2:	f7fd f91b 	bl	800181c <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e03d      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045f4:	4b11      	ldr	r3, [pc, #68]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x46a>
 8004600:	e035      	b.n	800466e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004602:	4b10      	ldr	r3, [pc, #64]	@ (8004644 <HAL_RCC_OscConfig+0x4cc>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fd f908 	bl	800181c <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004610:	f7fd f904 	bl	800181c <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e026      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004622:	4b06      	ldr	r3, [pc, #24]	@ (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x498>
 800462e:	e01e      	b.n	800466e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d107      	bne.n	8004648 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e019      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
 800463c:	40021000 	.word	0x40021000
 8004640:	40007000 	.word	0x40007000
 8004644:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004648:	4b0b      	ldr	r3, [pc, #44]	@ (8004678 <HAL_RCC_OscConfig+0x500>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	429a      	cmp	r2, r3
 800465a:	d106      	bne.n	800466a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004666:	429a      	cmp	r2, r3
 8004668:	d001      	beq.n	800466e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40021000 	.word	0x40021000

0800467c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0d0      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004690:	4b6a      	ldr	r3, [pc, #424]	@ (800483c <HAL_RCC_ClockConfig+0x1c0>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d910      	bls.n	80046c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b67      	ldr	r3, [pc, #412]	@ (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 0207 	bic.w	r2, r3, #7
 80046a6:	4965      	ldr	r1, [pc, #404]	@ (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ae:	4b63      	ldr	r3, [pc, #396]	@ (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0b8      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d020      	beq.n	800470e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046d8:	4b59      	ldr	r3, [pc, #356]	@ (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	4a58      	ldr	r2, [pc, #352]	@ (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80046de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046f0:	4b53      	ldr	r3, [pc, #332]	@ (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4a52      	ldr	r2, [pc, #328]	@ (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80046f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80046fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046fc:	4b50      	ldr	r3, [pc, #320]	@ (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	494d      	ldr	r1, [pc, #308]	@ (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	4313      	orrs	r3, r2
 800470c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d040      	beq.n	800479c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d107      	bne.n	8004732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004722:	4b47      	ldr	r3, [pc, #284]	@ (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d115      	bne.n	800475a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e07f      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d107      	bne.n	800474a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473a:	4b41      	ldr	r3, [pc, #260]	@ (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d109      	bne.n	800475a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e073      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800474a:	4b3d      	ldr	r3, [pc, #244]	@ (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e06b      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800475a:	4b39      	ldr	r3, [pc, #228]	@ (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f023 0203 	bic.w	r2, r3, #3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4936      	ldr	r1, [pc, #216]	@ (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 8004768:	4313      	orrs	r3, r2
 800476a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800476c:	f7fd f856 	bl	800181c <HAL_GetTick>
 8004770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004772:	e00a      	b.n	800478a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004774:	f7fd f852 	bl	800181c <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e053      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478a:	4b2d      	ldr	r3, [pc, #180]	@ (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 020c 	and.w	r2, r3, #12
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	429a      	cmp	r2, r3
 800479a:	d1eb      	bne.n	8004774 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800479c:	4b27      	ldr	r3, [pc, #156]	@ (800483c <HAL_RCC_ClockConfig+0x1c0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d210      	bcs.n	80047cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b24      	ldr	r3, [pc, #144]	@ (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 0207 	bic.w	r2, r3, #7
 80047b2:	4922      	ldr	r1, [pc, #136]	@ (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ba:	4b20      	ldr	r3, [pc, #128]	@ (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d001      	beq.n	80047cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e032      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047d8:	4b19      	ldr	r3, [pc, #100]	@ (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4916      	ldr	r1, [pc, #88]	@ (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d009      	beq.n	800480a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047f6:	4b12      	ldr	r3, [pc, #72]	@ (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	490e      	ldr	r1, [pc, #56]	@ (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 8004806:	4313      	orrs	r3, r2
 8004808:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800480a:	f000 f821 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 800480e:	4602      	mov	r2, r0
 8004810:	4b0b      	ldr	r3, [pc, #44]	@ (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	490a      	ldr	r1, [pc, #40]	@ (8004844 <HAL_RCC_ClockConfig+0x1c8>)
 800481c:	5ccb      	ldrb	r3, [r1, r3]
 800481e:	fa22 f303 	lsr.w	r3, r2, r3
 8004822:	4a09      	ldr	r2, [pc, #36]	@ (8004848 <HAL_RCC_ClockConfig+0x1cc>)
 8004824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004826:	4b09      	ldr	r3, [pc, #36]	@ (800484c <HAL_RCC_ClockConfig+0x1d0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f7fc ffb4 	bl	8001798 <HAL_InitTick>

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40022000 	.word	0x40022000
 8004840:	40021000 	.word	0x40021000
 8004844:	0800a784 	.word	0x0800a784
 8004848:	20000000 	.word	0x20000000
 800484c:	20000004 	.word	0x20000004

08004850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	2300      	movs	r3, #0
 8004864:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800486a:	4b1e      	ldr	r3, [pc, #120]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 030c 	and.w	r3, r3, #12
 8004876:	2b04      	cmp	r3, #4
 8004878:	d002      	beq.n	8004880 <HAL_RCC_GetSysClockFreq+0x30>
 800487a:	2b08      	cmp	r3, #8
 800487c:	d003      	beq.n	8004886 <HAL_RCC_GetSysClockFreq+0x36>
 800487e:	e027      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004880:	4b19      	ldr	r3, [pc, #100]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004882:	613b      	str	r3, [r7, #16]
      break;
 8004884:	e027      	b.n	80048d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	0c9b      	lsrs	r3, r3, #18
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	4a17      	ldr	r2, [pc, #92]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8004890:	5cd3      	ldrb	r3, [r2, r3]
 8004892:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d010      	beq.n	80048c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800489e:	4b11      	ldr	r3, [pc, #68]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	0c5b      	lsrs	r3, r3, #17
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	4a11      	ldr	r2, [pc, #68]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048aa:	5cd3      	ldrb	r3, [r2, r3]
 80048ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a0d      	ldr	r2, [pc, #52]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80048b2:	fb03 f202 	mul.w	r2, r3, r2
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	e004      	b.n	80048ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a0c      	ldr	r2, [pc, #48]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048c4:	fb02 f303 	mul.w	r3, r2, r3
 80048c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	613b      	str	r3, [r7, #16]
      break;
 80048ce:	e002      	b.n	80048d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048d0:	4b05      	ldr	r3, [pc, #20]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80048d2:	613b      	str	r3, [r7, #16]
      break;
 80048d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048d6:	693b      	ldr	r3, [r7, #16]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40021000 	.word	0x40021000
 80048e8:	007a1200 	.word	0x007a1200
 80048ec:	0800a79c 	.word	0x0800a79c
 80048f0:	0800a7ac 	.word	0x0800a7ac
 80048f4:	003d0900 	.word	0x003d0900

080048f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048fc:	4b02      	ldr	r3, [pc, #8]	@ (8004908 <HAL_RCC_GetHCLKFreq+0x10>)
 80048fe:	681b      	ldr	r3, [r3, #0]
}
 8004900:	4618      	mov	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr
 8004908:	20000000 	.word	0x20000000

0800490c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004910:	f7ff fff2 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 8004914:	4602      	mov	r2, r0
 8004916:	4b05      	ldr	r3, [pc, #20]	@ (800492c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	0a1b      	lsrs	r3, r3, #8
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	4903      	ldr	r1, [pc, #12]	@ (8004930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004922:	5ccb      	ldrb	r3, [r1, r3]
 8004924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004928:	4618      	mov	r0, r3
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40021000 	.word	0x40021000
 8004930:	0800a794 	.word	0x0800a794

08004934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004938:	f7ff ffde 	bl	80048f8 <HAL_RCC_GetHCLKFreq>
 800493c:	4602      	mov	r2, r0
 800493e:	4b05      	ldr	r3, [pc, #20]	@ (8004954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	0adb      	lsrs	r3, r3, #11
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	4903      	ldr	r1, [pc, #12]	@ (8004958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800494a:	5ccb      	ldrb	r3, [r1, r3]
 800494c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004950:	4618      	mov	r0, r3
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40021000 	.word	0x40021000
 8004958:	0800a794 	.word	0x0800a794

0800495c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004964:	4b0a      	ldr	r3, [pc, #40]	@ (8004990 <RCC_Delay+0x34>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a0a      	ldr	r2, [pc, #40]	@ (8004994 <RCC_Delay+0x38>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	0a5b      	lsrs	r3, r3, #9
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	fb02 f303 	mul.w	r3, r2, r3
 8004976:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004978:	bf00      	nop
  }
  while (Delay --);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1e5a      	subs	r2, r3, #1
 800497e:	60fa      	str	r2, [r7, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1f9      	bne.n	8004978 <RCC_Delay+0x1c>
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr
 8004990:	20000000 	.word	0x20000000
 8004994:	10624dd3 	.word	0x10624dd3

08004998 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]
 80049a4:	2300      	movs	r3, #0
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d07d      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80049b4:	2300      	movs	r3, #0
 80049b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049b8:	4b4f      	ldr	r3, [pc, #316]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d10d      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c4:	4b4c      	ldr	r3, [pc, #304]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	4a4b      	ldr	r2, [pc, #300]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ce:	61d3      	str	r3, [r2, #28]
 80049d0:	4b49      	ldr	r3, [pc, #292]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049dc:	2301      	movs	r3, #1
 80049de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e0:	4b46      	ldr	r3, [pc, #280]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d118      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ec:	4b43      	ldr	r3, [pc, #268]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a42      	ldr	r2, [pc, #264]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049f8:	f7fc ff10 	bl	800181c <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fe:	e008      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a00:	f7fc ff0c 	bl	800181c <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	@ 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e06d      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a12:	4b3a      	ldr	r3, [pc, #232]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a1e:	4b36      	ldr	r3, [pc, #216]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d02e      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d027      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a46:	4b2e      	ldr	r3, [pc, #184]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a4c:	4b2c      	ldr	r3, [pc, #176]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a52:	4a29      	ldr	r2, [pc, #164]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d014      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a62:	f7fc fedb 	bl	800181c <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a68:	e00a      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a6a:	f7fc fed7 	bl	800181c <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e036      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a80:	4b1d      	ldr	r3, [pc, #116]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0ee      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	4917      	ldr	r1, [pc, #92]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa4:	4b14      	ldr	r3, [pc, #80]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	4a13      	ldr	r2, [pc, #76]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004abc:	4b0e      	ldr	r3, [pc, #56]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	490b      	ldr	r1, [pc, #44]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d008      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ada:	4b07      	ldr	r3, [pc, #28]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	4904      	ldr	r1, [pc, #16]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40021000 	.word	0x40021000
 8004afc:	40007000 	.word	0x40007000
 8004b00:	42420440 	.word	0x42420440

08004b04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	2300      	movs	r3, #0
 8004b12:	61fb      	str	r3, [r7, #28]
 8004b14:	2300      	movs	r3, #0
 8004b16:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b10      	cmp	r3, #16
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	f200 808a 	bhi.w	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d045      	beq.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d075      	beq.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004b3a:	e082      	b.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004b3c:	4b46      	ldr	r3, [pc, #280]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004b42:	4b45      	ldr	r3, [pc, #276]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d07b      	beq.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	0c9b      	lsrs	r3, r3, #18
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	4a41      	ldr	r2, [pc, #260]	@ (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004b58:	5cd3      	ldrb	r3, [r2, r3]
 8004b5a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d015      	beq.n	8004b92 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b66:	4b3c      	ldr	r3, [pc, #240]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	0c5b      	lsrs	r3, r3, #17
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	4a3b      	ldr	r2, [pc, #236]	@ (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004b72:	5cd3      	ldrb	r3, [r2, r3]
 8004b74:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00d      	beq.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004b80:	4a38      	ldr	r2, [pc, #224]	@ (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	fb02 f303 	mul.w	r3, r2, r3
 8004b8e:	61fb      	str	r3, [r7, #28]
 8004b90:	e004      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4a34      	ldr	r2, [pc, #208]	@ (8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ba4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ba8:	d102      	bne.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	61bb      	str	r3, [r7, #24]
      break;
 8004bae:	e04a      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	085b      	lsrs	r3, r3, #1
 8004bbc:	61bb      	str	r3, [r7, #24]
      break;
 8004bbe:	e042      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004bc0:	4b25      	ldr	r3, [pc, #148]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bd0:	d108      	bne.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004bdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	e01f      	b.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bee:	d109      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004bf0:	4b19      	ldr	r3, [pc, #100]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004bfc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	e00f      	b.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c0e:	d11c      	bne.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004c10:	4b11      	ldr	r3, [pc, #68]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d016      	beq.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004c1c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004c20:	61bb      	str	r3, [r7, #24]
      break;
 8004c22:	e012      	b.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004c24:	e011      	b.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004c26:	f7ff fe85 	bl	8004934 <HAL_RCC_GetPCLK2Freq>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	0b9b      	lsrs	r3, r3, #14
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	3301      	adds	r3, #1
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3e:	61bb      	str	r3, [r7, #24]
      break;
 8004c40:	e004      	b.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004c42:	bf00      	nop
 8004c44:	e002      	b.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004c46:	bf00      	nop
 8004c48:	e000      	b.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004c4a:	bf00      	nop
    }
  }
  return (frequency);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3720      	adds	r7, #32
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	0800a7b0 	.word	0x0800a7b0
 8004c60:	0800a7c0 	.word	0x0800a7c0
 8004c64:	007a1200 	.word	0x007a1200
 8004c68:	003d0900 	.word	0x003d0900
 8004c6c:	aaaaaaab 	.word	0xaaaaaaab

08004c70 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e07a      	b.n	8004d7c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	7c5b      	ldrb	r3, [r3, #17]
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d105      	bne.n	8004c9c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fc f936 	bl	8000f08 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f870 	bl	8004d88 <HAL_RTC_WaitForSynchro>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2204      	movs	r2, #4
 8004cb2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e061      	b.n	8004d7c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f892 	bl	8004de2 <RTC_EnterInitMode>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d004      	beq.n	8004cce <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2204      	movs	r2, #4
 8004cc8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e056      	b.n	8004d7c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0207 	bic.w	r2, r2, #7
 8004cdc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004ce6:	4b27      	ldr	r3, [pc, #156]	@ (8004d84 <HAL_RTC_Init+0x114>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cea:	4a26      	ldr	r2, [pc, #152]	@ (8004d84 <HAL_RTC_Init+0x114>)
 8004cec:	f023 0301 	bic.w	r3, r3, #1
 8004cf0:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004cf2:	4b24      	ldr	r3, [pc, #144]	@ (8004d84 <HAL_RTC_Init+0x114>)
 8004cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf6:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	4921      	ldr	r1, [pc, #132]	@ (8004d84 <HAL_RTC_Init+0x114>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0c:	d003      	beq.n	8004d16 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e00e      	b.n	8004d34 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004d16:	2001      	movs	r0, #1
 8004d18:	f7ff fef4 	bl	8004b04 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d1c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d104      	bne.n	8004d2e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2204      	movs	r2, #4
 8004d28:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e026      	b.n	8004d7c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	0c1a      	lsrs	r2, r3, #16
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f002 020f 	and.w	r2, r2, #15
 8004d40:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	b292      	uxth	r2, r2
 8004d4a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f870 	bl	8004e32 <RTC_ExitInitMode>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d004      	beq.n	8004d62 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2204      	movs	r2, #4
 8004d5c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e00c      	b.n	8004d7c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
  }
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40006c00 	.word	0x40006c00

08004d88 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e01d      	b.n	8004dda <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0208 	bic.w	r2, r2, #8
 8004dac:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004dae:	f7fc fd35 	bl	800181c <HAL_GetTick>
 8004db2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004db4:	e009      	b.n	8004dca <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004db6:	f7fc fd31 	bl	800181c <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004dc4:	d901      	bls.n	8004dca <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e007      	b.n	8004dda <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0ee      	beq.n	8004db6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004dee:	f7fc fd15 	bl	800181c <HAL_GetTick>
 8004df2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004df4:	e009      	b.n	8004e0a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004df6:	f7fc fd11 	bl	800181c <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e04:	d901      	bls.n	8004e0a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e00f      	b.n	8004e2a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0ee      	beq.n	8004df6 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0210 	orr.w	r2, r2, #16
 8004e26:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0210 	bic.w	r2, r2, #16
 8004e4c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004e4e:	f7fc fce5 	bl	800181c <HAL_GetTick>
 8004e52:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004e54:	e009      	b.n	8004e6a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004e56:	f7fc fce1 	bl	800181c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e64:	d901      	bls.n	8004e6a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e007      	b.n	8004e7a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0ee      	beq.n	8004e56 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e042      	b.n	8004f1a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d106      	bne.n	8004eae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7fc fa67 	bl	800137c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2224      	movs	r2, #36	@ 0x24
 8004eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ec4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 ffa4 	bl	8005e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004eda:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695a      	ldr	r2, [r3, #20]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004eea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004efa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08c      	sub	sp, #48	@ 0x30
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d156      	bne.n	8004fec <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <HAL_UART_Transmit_DMA+0x26>
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e04f      	b.n	8004fee <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	88fa      	ldrh	r2, [r7, #6]
 8004f58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	88fa      	ldrh	r2, [r7, #6]
 8004f5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2221      	movs	r2, #33	@ 0x21
 8004f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f72:	4a21      	ldr	r2, [pc, #132]	@ (8004ff8 <HAL_UART_Transmit_DMA+0xd4>)
 8004f74:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7a:	4a20      	ldr	r2, [pc, #128]	@ (8004ffc <HAL_UART_Transmit_DMA+0xd8>)
 8004f7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f82:	4a1f      	ldr	r2, [pc, #124]	@ (8005000 <HAL_UART_Transmit_DMA+0xdc>)
 8004f84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8004f8e:	f107 0308 	add.w	r3, r7, #8
 8004f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9a:	6819      	ldr	r1, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	88fb      	ldrh	r3, [r7, #6]
 8004fa6:	f7fc fe1e 	bl	8001be6 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fb2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3314      	adds	r3, #20
 8004fba:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	e853 3f00 	ldrex	r3, [r3]
 8004fc2:	617b      	str	r3, [r7, #20]
   return(result);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3314      	adds	r3, #20
 8004fd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004fd6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd8:	6a39      	ldr	r1, [r7, #32]
 8004fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fdc:	e841 2300 	strex	r3, r2, [r1]
 8004fe0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1e5      	bne.n	8004fb4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e000      	b.n	8004fee <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004fec:	2302      	movs	r3, #2
  }
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3730      	adds	r7, #48	@ 0x30
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	080056ab 	.word	0x080056ab
 8004ffc:	08005745 	.word	0x08005745
 8005000:	080058c9 	.word	0x080058c9

08005004 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b20      	cmp	r3, #32
 800501c:	d112      	bne.n	8005044 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <HAL_UART_Receive_DMA+0x26>
 8005024:	88fb      	ldrh	r3, [r7, #6]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e00b      	b.n	8005046 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005034:	88fb      	ldrh	r3, [r7, #6]
 8005036:	461a      	mov	r2, r3
 8005038:	68b9      	ldr	r1, [r7, #8]
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 fc8e 	bl	800595c <UART_Start_Receive_DMA>
 8005040:	4603      	mov	r3, r0
 8005042:	e000      	b.n	8005046 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005044:	2302      	movs	r3, #2
  }
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b090      	sub	sp, #64	@ 0x40
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005056:	2300      	movs	r3, #0
 8005058:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005064:	2b00      	cmp	r3, #0
 8005066:	bf14      	ite	ne
 8005068:	2301      	movne	r3, #1
 800506a:	2300      	moveq	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b21      	cmp	r3, #33	@ 0x21
 800507a:	d128      	bne.n	80050ce <HAL_UART_DMAStop+0x80>
 800507c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d025      	beq.n	80050ce <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3314      	adds	r3, #20
 8005088:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	623b      	str	r3, [r7, #32]
   return(result);
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005098:	63bb      	str	r3, [r7, #56]	@ 0x38
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3314      	adds	r3, #20
 80050a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80050a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e5      	bne.n	8005082 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d004      	beq.n	80050c8 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fc fdef 	bl	8001ca6 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fce1 	bl	8005a90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	bf14      	ite	ne
 80050dc:	2301      	movne	r3, #1
 80050de:	2300      	moveq	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b22      	cmp	r3, #34	@ 0x22
 80050ee:	d128      	bne.n	8005142 <HAL_UART_DMAStop+0xf4>
 80050f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d025      	beq.n	8005142 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3314      	adds	r3, #20
 80050fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	60fb      	str	r3, [r7, #12]
   return(result);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800510c:	637b      	str	r3, [r7, #52]	@ 0x34
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3314      	adds	r3, #20
 8005114:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005116:	61fa      	str	r2, [r7, #28]
 8005118:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	69b9      	ldr	r1, [r7, #24]
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	617b      	str	r3, [r7, #20]
   return(result);
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e5      	bne.n	80050f6 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512e:	2b00      	cmp	r3, #0
 8005130:	d004      	beq.n	800513c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005136:	4618      	mov	r0, r3
 8005138:	f7fc fdb5 	bl	8001ca6 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fcce 	bl	8005ade <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3740      	adds	r7, #64	@ 0x40
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b0ba      	sub	sp, #232	@ 0xe8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005172:	2300      	movs	r3, #0
 8005174:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005178:	2300      	movs	r3, #0
 800517a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800517e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800518a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10f      	bne.n	80051b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <HAL_UART_IRQHandler+0x66>
 800519e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fd74 	bl	8005c98 <UART_Receive_IT>
      return;
 80051b0:	e25b      	b.n	800566a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 80de 	beq.w	8005378 <HAL_UART_IRQHandler+0x22c>
 80051bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d106      	bne.n	80051d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80d1 	beq.w	8005378 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <HAL_UART_IRQHandler+0xae>
 80051e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f2:	f043 0201 	orr.w	r2, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00b      	beq.n	800521e <HAL_UART_IRQHandler+0xd2>
 8005206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005216:	f043 0202 	orr.w	r2, r3, #2
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800521e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00b      	beq.n	8005242 <HAL_UART_IRQHandler+0xf6>
 800522a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523a:	f043 0204 	orr.w	r2, r3, #4
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d011      	beq.n	8005272 <HAL_UART_IRQHandler+0x126>
 800524e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d105      	bne.n	8005266 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800525a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526a:	f043 0208 	orr.w	r2, r3, #8
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 81f2 	beq.w	8005660 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800527c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <HAL_UART_IRQHandler+0x14e>
 8005288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fcff 	bl	8005c98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bf14      	ite	ne
 80052a8:	2301      	movne	r3, #1
 80052aa:	2300      	moveq	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d103      	bne.n	80052c6 <HAL_UART_IRQHandler+0x17a>
 80052be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d04f      	beq.n	8005366 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fc09 	bl	8005ade <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d041      	beq.n	800535e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3314      	adds	r3, #20
 80052e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052e8:	e853 3f00 	ldrex	r3, [r3]
 80052ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80052f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3314      	adds	r3, #20
 8005302:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005306:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800530a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005312:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005316:	e841 2300 	strex	r3, r2, [r1]
 800531a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800531e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1d9      	bne.n	80052da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d013      	beq.n	8005356 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005332:	4a7e      	ldr	r2, [pc, #504]	@ (800552c <HAL_UART_IRQHandler+0x3e0>)
 8005334:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533a:	4618      	mov	r0, r3
 800533c:	f7fc fcee 	bl	8001d1c <HAL_DMA_Abort_IT>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d016      	beq.n	8005374 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800534a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005350:	4610      	mov	r0, r2
 8005352:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005354:	e00e      	b.n	8005374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fc f9c0 	bl	80016dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535c:	e00a      	b.n	8005374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fc f9bc 	bl	80016dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	e006      	b.n	8005374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fc f9b8 	bl	80016dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005372:	e175      	b.n	8005660 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005374:	bf00      	nop
    return;
 8005376:	e173      	b.n	8005660 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537c:	2b01      	cmp	r3, #1
 800537e:	f040 814f 	bne.w	8005620 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005386:	f003 0310 	and.w	r3, r3, #16
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 8148 	beq.w	8005620 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005394:	f003 0310 	and.w	r3, r3, #16
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 8141 	beq.w	8005620 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800539e:	2300      	movs	r3, #0
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60bb      	str	r3, [r7, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 80b6 	beq.w	8005530 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 8145 	beq.w	8005664 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053e2:	429a      	cmp	r2, r3
 80053e4:	f080 813e 	bcs.w	8005664 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	f000 8088 	beq.w	800550c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	330c      	adds	r3, #12
 8005402:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005412:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005416:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800541a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	330c      	adds	r3, #12
 8005424:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005428:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800542c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005430:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005434:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005438:	e841 2300 	strex	r3, r2, [r1]
 800543c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005440:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1d9      	bne.n	80053fc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3314      	adds	r3, #20
 800544e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005458:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800545a:	f023 0301 	bic.w	r3, r3, #1
 800545e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3314      	adds	r3, #20
 8005468:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800546c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005470:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005474:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800547e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e1      	bne.n	8005448 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3314      	adds	r3, #20
 800548a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005494:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005496:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800549a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3314      	adds	r3, #20
 80054a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80054a8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80054ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e3      	bne.n	8005484 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	330c      	adds	r3, #12
 80054d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054dc:	f023 0310 	bic.w	r3, r3, #16
 80054e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	330c      	adds	r3, #12
 80054ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80054ee:	65ba      	str	r2, [r7, #88]	@ 0x58
 80054f0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e3      	bne.n	80054ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005506:	4618      	mov	r0, r3
 8005508:	f7fc fbcd 	bl	8001ca6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2202      	movs	r2, #2
 8005510:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800551a:	b29b      	uxth	r3, r3
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	b29b      	uxth	r3, r3
 8005520:	4619      	mov	r1, r3
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f8b6 	bl	8005694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005528:	e09c      	b.n	8005664 <HAL_UART_IRQHandler+0x518>
 800552a:	bf00      	nop
 800552c:	08005ba3 	.word	0x08005ba3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005538:	b29b      	uxth	r3, r3
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 808e 	beq.w	8005668 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800554c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 8089 	beq.w	8005668 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	330c      	adds	r3, #12
 800555c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005568:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800556c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	330c      	adds	r3, #12
 8005576:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800557a:	647a      	str	r2, [r7, #68]	@ 0x44
 800557c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005580:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e3      	bne.n	8005556 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3314      	adds	r3, #20
 8005594:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	623b      	str	r3, [r7, #32]
   return(result);
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	f023 0301 	bic.w	r3, r3, #1
 80055a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3314      	adds	r3, #20
 80055ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80055b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80055b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e3      	bne.n	800558e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	330c      	adds	r3, #12
 80055da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0310 	bic.w	r3, r3, #16
 80055ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	330c      	adds	r3, #12
 80055f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80055f8:	61fa      	str	r2, [r7, #28]
 80055fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	69b9      	ldr	r1, [r7, #24]
 80055fe:	69fa      	ldr	r2, [r7, #28]
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	617b      	str	r3, [r7, #20]
   return(result);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e3      	bne.n	80055d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005612:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f83b 	bl	8005694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800561e:	e023      	b.n	8005668 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005628:	2b00      	cmp	r3, #0
 800562a:	d009      	beq.n	8005640 <HAL_UART_IRQHandler+0x4f4>
 800562c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fac6 	bl	8005bca <UART_Transmit_IT>
    return;
 800563e:	e014      	b.n	800566a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00e      	beq.n	800566a <HAL_UART_IRQHandler+0x51e>
 800564c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fb05 	bl	8005c68 <UART_EndTransmit_IT>
    return;
 800565e:	e004      	b.n	800566a <HAL_UART_IRQHandler+0x51e>
    return;
 8005660:	bf00      	nop
 8005662:	e002      	b.n	800566a <HAL_UART_IRQHandler+0x51e>
      return;
 8005664:	bf00      	nop
 8005666:	e000      	b.n	800566a <HAL_UART_IRQHandler+0x51e>
      return;
 8005668:	bf00      	nop
  }
}
 800566a:	37e8      	adds	r7, #232	@ 0xe8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	bc80      	pop	{r7}
 8005680:	4770      	bx	lr

08005682 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr

08005694 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr

080056aa <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b090      	sub	sp, #64	@ 0x40
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d137      	bne.n	8005736 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80056c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056c8:	2200      	movs	r2, #0
 80056ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3314      	adds	r3, #20
 80056d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	623b      	str	r3, [r7, #32]
   return(result);
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3314      	adds	r3, #20
 80056ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80056ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e5      	bne.n	80056cc <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	330c      	adds	r3, #12
 8005706:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	e853 3f00 	ldrex	r3, [r3]
 800570e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005716:	637b      	str	r3, [r7, #52]	@ 0x34
 8005718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	330c      	adds	r3, #12
 800571e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005720:	61fa      	str	r2, [r7, #28]
 8005722:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	69b9      	ldr	r1, [r7, #24]
 8005726:	69fa      	ldr	r2, [r7, #28]
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	617b      	str	r3, [r7, #20]
   return(result);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e5      	bne.n	8005700 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005734:	e002      	b.n	800573c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005736:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005738:	f7ff ff9a 	bl	8005670 <HAL_UART_TxCpltCallback>
}
 800573c:	bf00      	nop
 800573e:	3740      	adds	r7, #64	@ 0x40
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005750:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f7ff ff95 	bl	8005682 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005758:	bf00      	nop
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b09c      	sub	sp, #112	@ 0x70
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	2b00      	cmp	r3, #0
 800577a:	d172      	bne.n	8005862 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800577c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800577e:	2200      	movs	r2, #0
 8005780:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005782:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	330c      	adds	r3, #12
 8005788:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800579a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	330c      	adds	r3, #12
 80057a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80057a2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80057a4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e5      	bne.n	8005782 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3314      	adds	r3, #20
 80057bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c8:	f023 0301 	bic.w	r3, r3, #1
 80057cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80057ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3314      	adds	r3, #20
 80057d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80057d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80057d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e5      	bne.n	80057b6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3314      	adds	r3, #20
 80057f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	623b      	str	r3, [r7, #32]
   return(result);
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005800:	663b      	str	r3, [r7, #96]	@ 0x60
 8005802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3314      	adds	r3, #20
 8005808:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800580a:	633a      	str	r2, [r7, #48]	@ 0x30
 800580c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e5      	bne.n	80057ea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800581e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005820:	2220      	movs	r2, #32
 8005822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005826:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582a:	2b01      	cmp	r3, #1
 800582c:	d119      	bne.n	8005862 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800582e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	330c      	adds	r3, #12
 8005834:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	60fb      	str	r3, [r7, #12]
   return(result);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f023 0310 	bic.w	r3, r3, #16
 8005844:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	330c      	adds	r3, #12
 800584c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800584e:	61fa      	str	r2, [r7, #28]
 8005850:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	69b9      	ldr	r1, [r7, #24]
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	617b      	str	r3, [r7, #20]
   return(result);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e5      	bne.n	800582e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005862:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005864:	2200      	movs	r2, #0
 8005866:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800586a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586c:	2b01      	cmp	r3, #1
 800586e:	d106      	bne.n	800587e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005872:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005874:	4619      	mov	r1, r3
 8005876:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005878:	f7ff ff0c 	bl	8005694 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800587c:	e002      	b.n	8005884 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800587e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005880:	f7fb fef4 	bl	800166c <HAL_UART_RxCpltCallback>
}
 8005884:	bf00      	nop
 8005886:	3770      	adds	r7, #112	@ 0x70
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005898:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2201      	movs	r2, #1
 800589e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d108      	bne.n	80058ba <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058ac:	085b      	lsrs	r3, r3, #1
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	4619      	mov	r1, r3
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f7ff feee 	bl	8005694 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058b8:	e002      	b.n	80058c0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f7fb fe9e 	bl	80015fc <HAL_UART_RxHalfCpltCallback>
}
 80058c0:	bf00      	nop
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	bf14      	ite	ne
 80058e8:	2301      	movne	r3, #1
 80058ea:	2300      	moveq	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b21      	cmp	r3, #33	@ 0x21
 80058fa:	d108      	bne.n	800590e <UART_DMAError+0x46>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d005      	beq.n	800590e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2200      	movs	r2, #0
 8005906:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005908:	68b8      	ldr	r0, [r7, #8]
 800590a:	f000 f8c1 	bl	8005a90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005918:	2b00      	cmp	r3, #0
 800591a:	bf14      	ite	ne
 800591c:	2301      	movne	r3, #1
 800591e:	2300      	moveq	r3, #0
 8005920:	b2db      	uxtb	r3, r3
 8005922:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b22      	cmp	r3, #34	@ 0x22
 800592e:	d108      	bne.n	8005942 <UART_DMAError+0x7a>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d005      	beq.n	8005942 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2200      	movs	r2, #0
 800593a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800593c:	68b8      	ldr	r0, [r7, #8]
 800593e:	f000 f8ce 	bl	8005ade <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005946:	f043 0210 	orr.w	r2, r3, #16
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800594e:	68b8      	ldr	r0, [r7, #8]
 8005950:	f7fb fec4 	bl	80016dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005954:	bf00      	nop
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b098      	sub	sp, #96	@ 0x60
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	4613      	mov	r3, r2
 8005968:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2222      	movs	r2, #34	@ 0x22
 8005980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005988:	4a3e      	ldr	r2, [pc, #248]	@ (8005a84 <UART_Start_Receive_DMA+0x128>)
 800598a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005990:	4a3d      	ldr	r2, [pc, #244]	@ (8005a88 <UART_Start_Receive_DMA+0x12c>)
 8005992:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005998:	4a3c      	ldr	r2, [pc, #240]	@ (8005a8c <UART_Start_Receive_DMA+0x130>)
 800599a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a0:	2200      	movs	r2, #0
 80059a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80059a4:	f107 0308 	add.w	r3, r7, #8
 80059a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4619      	mov	r1, r3
 80059b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	88fb      	ldrh	r3, [r7, #6]
 80059bc:	f7fc f913 	bl	8001be6 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80059c0:	2300      	movs	r3, #0
 80059c2:	613b      	str	r3, [r7, #16]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	613b      	str	r3, [r7, #16]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	613b      	str	r3, [r7, #16]
 80059d4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d019      	beq.n	8005a12 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	330c      	adds	r3, #12
 80059e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059fe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005a00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005a04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e5      	bne.n	80059de <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3314      	adds	r3, #20
 8005a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a24:	f043 0301 	orr.w	r3, r3, #1
 8005a28:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3314      	adds	r3, #20
 8005a30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a32:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005a34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005a38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e5      	bne.n	8005a12 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3314      	adds	r3, #20
 8005a4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	617b      	str	r3, [r7, #20]
   return(result);
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3314      	adds	r3, #20
 8005a64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005a66:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	6a39      	ldr	r1, [r7, #32]
 8005a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e5      	bne.n	8005a46 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3760      	adds	r7, #96	@ 0x60
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	08005761 	.word	0x08005761
 8005a88:	0800588d 	.word	0x0800588d
 8005a8c:	080058c9 	.word	0x080058c9

08005a90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b089      	sub	sp, #36	@ 0x24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	330c      	adds	r3, #12
 8005a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	330c      	adds	r3, #12
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	61ba      	str	r2, [r7, #24]
 8005aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	6979      	ldr	r1, [r7, #20]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	e841 2300 	strex	r3, r2, [r1]
 8005ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e5      	bne.n	8005a98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005ad4:	bf00      	nop
 8005ad6:	3724      	adds	r7, #36	@ 0x24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bc80      	pop	{r7}
 8005adc:	4770      	bx	lr

08005ade <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b095      	sub	sp, #84	@ 0x54
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	330c      	adds	r3, #12
 8005aec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	330c      	adds	r3, #12
 8005b04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b06:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e5      	bne.n	8005ae6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3314      	adds	r3, #20
 8005b20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	f023 0301 	bic.w	r3, r3, #1
 8005b30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3314      	adds	r3, #20
 8005b38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e5      	bne.n	8005b1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d119      	bne.n	8005b8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	330c      	adds	r3, #12
 8005b5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f023 0310 	bic.w	r3, r3, #16
 8005b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	330c      	adds	r3, #12
 8005b74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b76:	61ba      	str	r2, [r7, #24]
 8005b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	6979      	ldr	r1, [r7, #20]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	613b      	str	r3, [r7, #16]
   return(result);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e5      	bne.n	8005b56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b98:	bf00      	nop
 8005b9a:	3754      	adds	r7, #84	@ 0x54
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bc80      	pop	{r7}
 8005ba0:	4770      	bx	lr

08005ba2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7fb fd8d 	bl	80016dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bc2:	bf00      	nop
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b085      	sub	sp, #20
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b21      	cmp	r3, #33	@ 0x21
 8005bdc:	d13e      	bne.n	8005c5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be6:	d114      	bne.n	8005c12 <UART_Transmit_IT+0x48>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d110      	bne.n	8005c12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	1c9a      	adds	r2, r3, #2
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	621a      	str	r2, [r3, #32]
 8005c10:	e008      	b.n	8005c24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	1c59      	adds	r1, r3, #1
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6211      	str	r1, [r2, #32]
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	4619      	mov	r1, r3
 8005c32:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10f      	bne.n	8005c58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e000      	b.n	8005c5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c5c:	2302      	movs	r3, #2
  }
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr

08005c68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff fcf1 	bl	8005670 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08c      	sub	sp, #48	@ 0x30
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b22      	cmp	r3, #34	@ 0x22
 8005caa:	f040 80ae 	bne.w	8005e0a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cb6:	d117      	bne.n	8005ce8 <UART_Receive_IT+0x50>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d113      	bne.n	8005ce8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce0:	1c9a      	adds	r2, r3, #2
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ce6:	e026      	b.n	8005d36 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cfa:	d007      	beq.n	8005d0c <UART_Receive_IT+0x74>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10a      	bne.n	8005d1a <UART_Receive_IT+0x82>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d106      	bne.n	8005d1a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d16:	701a      	strb	r2, [r3, #0]
 8005d18:	e008      	b.n	8005d2c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	4619      	mov	r1, r3
 8005d44:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d15d      	bne.n	8005e06 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0220 	bic.w	r2, r2, #32
 8005d58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695a      	ldr	r2, [r3, #20]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0201 	bic.w	r2, r2, #1
 8005d78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d135      	bne.n	8005dfc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	330c      	adds	r3, #12
 8005d9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	613b      	str	r3, [r7, #16]
   return(result);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f023 0310 	bic.w	r3, r3, #16
 8005dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	330c      	adds	r3, #12
 8005db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005db6:	623a      	str	r2, [r7, #32]
 8005db8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	69f9      	ldr	r1, [r7, #28]
 8005dbc:	6a3a      	ldr	r2, [r7, #32]
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e5      	bne.n	8005d96 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b10      	cmp	r3, #16
 8005dd6:	d10a      	bne.n	8005dee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff fc4d 	bl	8005694 <HAL_UARTEx_RxEventCallback>
 8005dfa:	e002      	b.n	8005e02 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7fb fc35 	bl	800166c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	e002      	b.n	8005e0c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	e000      	b.n	8005e0c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e0a:	2302      	movs	r3, #2
  }
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3730      	adds	r7, #48	@ 0x30
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005e4e:	f023 030c 	bic.w	r3, r3, #12
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6812      	ldr	r2, [r2, #0]
 8005e56:	68b9      	ldr	r1, [r7, #8]
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a2c      	ldr	r2, [pc, #176]	@ (8005f28 <UART_SetConfig+0x114>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d103      	bne.n	8005e84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e7c:	f7fe fd5a 	bl	8004934 <HAL_RCC_GetPCLK2Freq>
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	e002      	b.n	8005e8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e84:	f7fe fd42 	bl	800490c <HAL_RCC_GetPCLK1Freq>
 8005e88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	009a      	lsls	r2, r3, #2
 8005e94:	441a      	add	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea0:	4a22      	ldr	r2, [pc, #136]	@ (8005f2c <UART_SetConfig+0x118>)
 8005ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	0119      	lsls	r1, r3, #4
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4613      	mov	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009a      	lsls	r2, r3, #2
 8005eb4:	441a      	add	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f2c <UART_SetConfig+0x118>)
 8005ec2:	fba3 0302 	umull	r0, r3, r3, r2
 8005ec6:	095b      	lsrs	r3, r3, #5
 8005ec8:	2064      	movs	r0, #100	@ 0x64
 8005eca:	fb00 f303 	mul.w	r3, r0, r3
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	3332      	adds	r3, #50	@ 0x32
 8005ed4:	4a15      	ldr	r2, [pc, #84]	@ (8005f2c <UART_SetConfig+0x118>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	095b      	lsrs	r3, r3, #5
 8005edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ee0:	4419      	add	r1, r3
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	009a      	lsls	r2, r3, #2
 8005eec:	441a      	add	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8005f2c <UART_SetConfig+0x118>)
 8005efa:	fba3 0302 	umull	r0, r3, r3, r2
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	2064      	movs	r0, #100	@ 0x64
 8005f02:	fb00 f303 	mul.w	r3, r0, r3
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	3332      	adds	r3, #50	@ 0x32
 8005f0c:	4a07      	ldr	r2, [pc, #28]	@ (8005f2c <UART_SetConfig+0x118>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	f003 020f 	and.w	r2, r3, #15
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40013800 	.word	0x40013800
 8005f2c:	51eb851f 	.word	0x51eb851f

08005f30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	4638      	mov	r0, r7
 8005f3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bc80      	pop	{r7}
 8005f48:	4770      	bx	lr

08005f4a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f5a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005f5e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr

08005f76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b085      	sub	sp, #20
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f7e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005f82:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	43db      	mvns	r3, r3
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	4013      	ands	r3, r2
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bc80      	pop	{r7}
 8005fa8:	4770      	bx	lr

08005faa <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bc80      	pop	{r7}
 8005fc0:	4770      	bx	lr

08005fc2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	4638      	mov	r0, r7
 8005fcc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bc80      	pop	{r7}
 8005ffa:	4770      	bx	lr

08005ffc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b09d      	sub	sp, #116	@ 0x74
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800601e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006022:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	78db      	ldrb	r3, [r3, #3]
 800602a:	2b03      	cmp	r3, #3
 800602c:	d81f      	bhi.n	800606e <USB_ActivateEndpoint+0x72>
 800602e:	a201      	add	r2, pc, #4	@ (adr r2, 8006034 <USB_ActivateEndpoint+0x38>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	08006045 	.word	0x08006045
 8006038:	08006061 	.word	0x08006061
 800603c:	08006077 	.word	0x08006077
 8006040:	08006053 	.word	0x08006053
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006044:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006048:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800604c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006050:	e012      	b.n	8006078 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006052:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006056:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800605a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800605e:	e00b      	b.n	8006078 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006060:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006064:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006068:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800606c:	e004      	b.n	8006078 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006074:	e000      	b.n	8006078 <USB_ActivateEndpoint+0x7c>
      break;
 8006076:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	441a      	add	r2, r3
 8006082:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800608a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800608e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006096:	b29b      	uxth	r3, r3
 8006098:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	7812      	ldrb	r2, [r2, #0]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	441a      	add	r2, r3
 80060c6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80060ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060da:	b29b      	uxth	r3, r3
 80060dc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	7b1b      	ldrb	r3, [r3, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f040 8178 	bne.w	80063d8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	785b      	ldrb	r3, [r3, #1]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 8084 	beq.w	80061fa <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	461a      	mov	r2, r3
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	4413      	add	r3, r2
 8006104:	61bb      	str	r3, [r7, #24]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	011a      	lsls	r2, r3, #4
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	88db      	ldrh	r3, [r3, #6]
 800611a:	085b      	lsrs	r3, r3, #1
 800611c:	b29b      	uxth	r3, r3
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	827b      	strh	r3, [r7, #18]
 8006134:	8a7b      	ldrh	r3, [r7, #18]
 8006136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d01b      	beq.n	8006176 <USB_ActivateEndpoint+0x17a>
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	b29b      	uxth	r3, r3
 800614c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006150:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006154:	823b      	strh	r3, [r7, #16]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	441a      	add	r2, r3
 8006160:	8a3b      	ldrh	r3, [r7, #16]
 8006162:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800616a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800616e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006172:	b29b      	uxth	r3, r3
 8006174:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	78db      	ldrb	r3, [r3, #3]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d020      	beq.n	80061c0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006194:	81bb      	strh	r3, [r7, #12]
 8006196:	89bb      	ldrh	r3, [r7, #12]
 8006198:	f083 0320 	eor.w	r3, r3, #32
 800619c:	81bb      	strh	r3, [r7, #12]
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	441a      	add	r2, r3
 80061a8:	89bb      	ldrh	r3, [r7, #12]
 80061aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	8013      	strh	r3, [r2, #0]
 80061be:	e2d5      	b.n	800676c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061d6:	81fb      	strh	r3, [r7, #14]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	441a      	add	r2, r3
 80061e2:	89fb      	ldrh	r3, [r7, #14]
 80061e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	8013      	strh	r3, [r2, #0]
 80061f8:	e2b8      	b.n	800676c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006204:	b29b      	uxth	r3, r3
 8006206:	461a      	mov	r2, r3
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	4413      	add	r3, r2
 800620c:	633b      	str	r3, [r7, #48]	@ 0x30
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	011a      	lsls	r2, r3, #4
 8006214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006216:	4413      	add	r3, r2
 8006218:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800621c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	88db      	ldrh	r3, [r3, #6]
 8006222:	085b      	lsrs	r3, r3, #1
 8006224:	b29b      	uxth	r3, r3
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800622c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006238:	b29b      	uxth	r3, r3
 800623a:	461a      	mov	r2, r3
 800623c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623e:	4413      	add	r3, r2
 8006240:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	011a      	lsls	r2, r3, #4
 8006248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624a:	4413      	add	r3, r2
 800624c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006250:	627b      	str	r3, [r7, #36]	@ 0x24
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b29b      	uxth	r3, r3
 8006258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800625c:	b29a      	uxth	r2, r3
 800625e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006260:	801a      	strh	r2, [r3, #0]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b3e      	cmp	r3, #62	@ 0x3e
 8006268:	d91d      	bls.n	80062a6 <USB_ActivateEndpoint+0x2aa>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	f003 031f 	and.w	r3, r3, #31
 800627a:	2b00      	cmp	r3, #0
 800627c:	d102      	bne.n	8006284 <USB_ActivateEndpoint+0x288>
 800627e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006280:	3b01      	subs	r3, #1
 8006282:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	b29a      	uxth	r2, r3
 800628a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800628c:	b29b      	uxth	r3, r3
 800628e:	029b      	lsls	r3, r3, #10
 8006290:	b29b      	uxth	r3, r3
 8006292:	4313      	orrs	r3, r2
 8006294:	b29b      	uxth	r3, r3
 8006296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800629e:	b29a      	uxth	r2, r3
 80062a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a2:	801a      	strh	r2, [r3, #0]
 80062a4:	e026      	b.n	80062f4 <USB_ActivateEndpoint+0x2f8>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <USB_ActivateEndpoint+0x2c8>
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062bc:	b29a      	uxth	r2, r3
 80062be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c0:	801a      	strh	r2, [r3, #0]
 80062c2:	e017      	b.n	80062f4 <USB_ActivateEndpoint+0x2f8>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	085b      	lsrs	r3, r3, #1
 80062ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <USB_ActivateEndpoint+0x2e2>
 80062d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062da:	3301      	adds	r3, #1
 80062dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	029b      	lsls	r3, r3, #10
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	4313      	orrs	r3, r2
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006302:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006304:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d01b      	beq.n	8006344 <USB_ActivateEndpoint+0x348>
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	b29b      	uxth	r3, r3
 800631a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800631e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006322:	843b      	strh	r3, [r7, #32]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	441a      	add	r2, r3
 800632e:	8c3b      	ldrh	r3, [r7, #32]
 8006330:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006334:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006338:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800633c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006340:	b29b      	uxth	r3, r3
 8006342:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d124      	bne.n	8006396 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800635e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006362:	83bb      	strh	r3, [r7, #28]
 8006364:	8bbb      	ldrh	r3, [r7, #28]
 8006366:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800636a:	83bb      	strh	r3, [r7, #28]
 800636c:	8bbb      	ldrh	r3, [r7, #28]
 800636e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006372:	83bb      	strh	r3, [r7, #28]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	441a      	add	r2, r3
 800637e:	8bbb      	ldrh	r3, [r7, #28]
 8006380:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006384:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006388:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800638c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006390:	b29b      	uxth	r3, r3
 8006392:	8013      	strh	r3, [r2, #0]
 8006394:	e1ea      	b.n	800676c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ac:	83fb      	strh	r3, [r7, #30]
 80063ae:	8bfb      	ldrh	r3, [r7, #30]
 80063b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80063b4:	83fb      	strh	r3, [r7, #30]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	441a      	add	r2, r3
 80063c0:	8bfb      	ldrh	r3, [r7, #30]
 80063c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	8013      	strh	r3, [r2, #0]
 80063d6:	e1c9      	b.n	800676c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	78db      	ldrb	r3, [r3, #3]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d11e      	bne.n	800641e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	441a      	add	r2, r3
 8006404:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006408:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800640c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006410:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006418:	b29b      	uxth	r3, r3
 800641a:	8013      	strh	r3, [r2, #0]
 800641c:	e01d      	b.n	800645a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	b29b      	uxth	r3, r3
 800642c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006434:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	441a      	add	r2, r3
 8006442:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006446:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800644a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800644e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006456:	b29b      	uxth	r3, r3
 8006458:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006464:	b29b      	uxth	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800646a:	4413      	add	r3, r2
 800646c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	011a      	lsls	r2, r3, #4
 8006474:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006476:	4413      	add	r3, r2
 8006478:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800647c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	891b      	ldrh	r3, [r3, #8]
 8006482:	085b      	lsrs	r3, r3, #1
 8006484:	b29b      	uxth	r3, r3
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800648c:	801a      	strh	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	657b      	str	r3, [r7, #84]	@ 0x54
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006498:	b29b      	uxth	r3, r3
 800649a:	461a      	mov	r2, r3
 800649c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800649e:	4413      	add	r3, r2
 80064a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	011a      	lsls	r2, r3, #4
 80064a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80064b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	895b      	ldrh	r3, [r3, #10]
 80064b6:	085b      	lsrs	r3, r3, #1
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064c0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	785b      	ldrb	r3, [r3, #1]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f040 8093 	bne.w	80065f2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80064dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80064e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01b      	beq.n	8006520 <USB_ActivateEndpoint+0x524>
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	441a      	add	r2, r3
 800650a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800650c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006510:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006514:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800651c:	b29b      	uxth	r3, r3
 800651e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800652e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01b      	beq.n	8006570 <USB_ActivateEndpoint+0x574>
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800654a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800654e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	441a      	add	r2, r3
 800655a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800655c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006560:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006564:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006568:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800656c:	b29b      	uxth	r3, r3
 800656e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29b      	uxth	r3, r3
 800657e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006586:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006588:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800658a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800658e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006590:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006592:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006596:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	441a      	add	r2, r3
 80065a2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80065a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	441a      	add	r2, r3
 80065da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	8013      	strh	r3, [r2, #0]
 80065f0:	e0bc      	b.n	800676c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006602:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d01d      	beq.n	800664a <USB_ActivateEndpoint+0x64e>
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29b      	uxth	r3, r3
 800661c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006620:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006624:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	441a      	add	r2, r3
 8006632:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006636:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800663a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800663e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006646:	b29b      	uxth	r3, r3
 8006648:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800665a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800665e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006662:	2b00      	cmp	r3, #0
 8006664:	d01d      	beq.n	80066a2 <USB_ActivateEndpoint+0x6a6>
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800667c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	441a      	add	r2, r3
 800668a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800668e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800669a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800669e:	b29b      	uxth	r3, r3
 80066a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	78db      	ldrb	r3, [r3, #3]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d024      	beq.n	80066f4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066c0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80066c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80066c8:	f083 0320 	eor.w	r3, r3, #32
 80066cc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	441a      	add	r2, r3
 80066da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80066de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	8013      	strh	r3, [r2, #0]
 80066f2:	e01d      	b.n	8006730 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	b29b      	uxth	r3, r3
 8006702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006706:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800670a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	441a      	add	r2, r3
 8006718:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800671c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006720:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800672c:	b29b      	uxth	r3, r3
 800672e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	b29b      	uxth	r3, r3
 800673e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006746:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	441a      	add	r2, r3
 8006754:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800675c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006768:	b29b      	uxth	r3, r3
 800676a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800676c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006770:	4618      	mov	r0, r3
 8006772:	3774      	adds	r7, #116	@ 0x74
 8006774:	46bd      	mov	sp, r7
 8006776:	bc80      	pop	{r7}
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop

0800677c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800677c:	b480      	push	{r7}
 800677e:	b08d      	sub	sp, #52	@ 0x34
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	7b1b      	ldrb	r3, [r3, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	f040 808e 	bne.w	80068ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	785b      	ldrb	r3, [r3, #1]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d044      	beq.n	8006822 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	81bb      	strh	r3, [r7, #12]
 80067a6:	89bb      	ldrh	r3, [r7, #12]
 80067a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01b      	beq.n	80067e8 <USB_DeactivateEndpoint+0x6c>
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067c6:	817b      	strh	r3, [r7, #10]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	441a      	add	r2, r3
 80067d2:	897b      	ldrh	r3, [r7, #10]
 80067d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067fe:	813b      	strh	r3, [r7, #8]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	441a      	add	r2, r3
 800680a:	893b      	ldrh	r3, [r7, #8]
 800680c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006810:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006814:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800681c:	b29b      	uxth	r3, r3
 800681e:	8013      	strh	r3, [r2, #0]
 8006820:	e192      	b.n	8006b48 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	827b      	strh	r3, [r7, #18]
 8006830:	8a7b      	ldrh	r3, [r7, #18]
 8006832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d01b      	beq.n	8006872 <USB_DeactivateEndpoint+0xf6>
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	b29b      	uxth	r3, r3
 8006848:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800684c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006850:	823b      	strh	r3, [r7, #16]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	441a      	add	r2, r3
 800685c:	8a3b      	ldrh	r3, [r7, #16]
 800685e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006862:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006866:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800686a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800686e:	b29b      	uxth	r3, r3
 8006870:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b29b      	uxth	r3, r3
 8006880:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006888:	81fb      	strh	r3, [r7, #14]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	441a      	add	r2, r3
 8006894:	89fb      	ldrh	r3, [r7, #14]
 8006896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800689a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800689e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	8013      	strh	r3, [r2, #0]
 80068aa:	e14d      	b.n	8006b48 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	785b      	ldrb	r3, [r3, #1]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f040 80a5 	bne.w	8006a00 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	843b      	strh	r3, [r7, #32]
 80068c4:	8c3b      	ldrh	r3, [r7, #32]
 80068c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01b      	beq.n	8006906 <USB_DeactivateEndpoint+0x18a>
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068e4:	83fb      	strh	r3, [r7, #30]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	441a      	add	r2, r3
 80068f0:	8bfb      	ldrh	r3, [r7, #30]
 80068f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006902:	b29b      	uxth	r3, r3
 8006904:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	83bb      	strh	r3, [r7, #28]
 8006914:	8bbb      	ldrh	r3, [r7, #28]
 8006916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01b      	beq.n	8006956 <USB_DeactivateEndpoint+0x1da>
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	b29b      	uxth	r3, r3
 800692c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006934:	837b      	strh	r3, [r7, #26]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	441a      	add	r2, r3
 8006940:	8b7b      	ldrh	r3, [r7, #26]
 8006942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800694a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800694e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006952:	b29b      	uxth	r3, r3
 8006954:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	b29b      	uxth	r3, r3
 8006964:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006968:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800696c:	833b      	strh	r3, [r7, #24]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	441a      	add	r2, r3
 8006978:	8b3b      	ldrh	r3, [r7, #24]
 800697a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800697e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006986:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800698a:	b29b      	uxth	r3, r3
 800698c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	b29b      	uxth	r3, r3
 800699c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a4:	82fb      	strh	r3, [r7, #22]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	441a      	add	r2, r3
 80069b0:	8afb      	ldrh	r3, [r7, #22]
 80069b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069dc:	82bb      	strh	r3, [r7, #20]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	441a      	add	r2, r3
 80069e8:	8abb      	ldrh	r3, [r7, #20]
 80069ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	8013      	strh	r3, [r2, #0]
 80069fe:	e0a3      	b.n	8006b48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006a0e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006a10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01b      	beq.n	8006a50 <USB_DeactivateEndpoint+0x2d4>
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	441a      	add	r2, r3
 8006a3a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006a5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01b      	beq.n	8006aa0 <USB_DeactivateEndpoint+0x324>
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a7e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	441a      	add	r2, r3
 8006a8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006a8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	441a      	add	r2, r3
 8006ac2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ac4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ac8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006acc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	441a      	add	r2, r3
 8006afa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006afc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b26:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	441a      	add	r2, r3
 8006b32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3734      	adds	r7, #52	@ 0x34
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr

08006b54 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b0c2      	sub	sp, #264	@ 0x108
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b62:	6018      	str	r0, [r3, #0]
 8006b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b6c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	785b      	ldrb	r3, [r3, #1]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	f040 86b7 	bne.w	80078ee <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	699a      	ldr	r2, [r3, #24]
 8006b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d908      	bls.n	8006bae <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006bac:	e007      	b.n	8006bbe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	7b1b      	ldrb	r3, [r3, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d13a      	bne.n	8006c44 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6959      	ldr	r1, [r3, #20]
 8006bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	88da      	ldrh	r2, [r3, #6]
 8006be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006bf0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006bf4:	6800      	ldr	r0, [r0, #0]
 8006bf6:	f001 fc9c 	bl	8008532 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	613b      	str	r3, [r7, #16]
 8006c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	461a      	mov	r2, r3
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	613b      	str	r3, [r7, #16]
 8006c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	011a      	lsls	r2, r3, #4
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c34:	60fb      	str	r3, [r7, #12]
 8006c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	801a      	strh	r2, [r3, #0]
 8006c40:	f000 be1f 	b.w	8007882 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	78db      	ldrb	r3, [r3, #3]
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	f040 8462 	bne.w	800751a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6a1a      	ldr	r2, [r3, #32]
 8006c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	f240 83df 	bls.w	8007432 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c9a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	441a      	add	r2, r3
 8006cb8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006cbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cc4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6a1a      	ldr	r2, [r3, #32]
 8006cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce0:	1ad2      	subs	r2, r2, r3
 8006ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 81c7 	beq.w	80070a4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	785b      	ldrb	r3, [r3, #1]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d177      	bne.n	8006e22 <USB_EPStartXfer+0x2ce>
 8006d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	461a      	mov	r2, r3
 8006d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d52:	4413      	add	r3, r2
 8006d54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	011a      	lsls	r2, r3, #4
 8006d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d66:	4413      	add	r3, r2
 8006d68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7c:	801a      	strh	r2, [r3, #0]
 8006d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d82:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d84:	d921      	bls.n	8006dca <USB_EPStartXfer+0x276>
 8006d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8a:	095b      	lsrs	r3, r3, #5
 8006d8c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d104      	bne.n	8006da6 <USB_EPStartXfer+0x252>
 8006d9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006da0:	3b01      	subs	r3, #1
 8006da2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	029b      	lsls	r3, r3, #10
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	4313      	orrs	r3, r2
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	801a      	strh	r2, [r3, #0]
 8006dc8:	e050      	b.n	8006e6c <USB_EPStartXfer+0x318>
 8006dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10a      	bne.n	8006de8 <USB_EPStartXfer+0x294>
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de4:	801a      	strh	r2, [r3, #0]
 8006de6:	e041      	b.n	8006e6c <USB_EPStartXfer+0x318>
 8006de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dec:	085b      	lsrs	r3, r3, #1
 8006dee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d004      	beq.n	8006e08 <USB_EPStartXfer+0x2b4>
 8006dfe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006e02:	3301      	adds	r3, #1
 8006e04:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	029b      	lsls	r3, r3, #10
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1e:	801a      	strh	r2, [r3, #0]
 8006e20:	e024      	b.n	8006e6c <USB_EPStartXfer+0x318>
 8006e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	785b      	ldrb	r3, [r3, #1]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d11c      	bne.n	8006e6c <USB_EPStartXfer+0x318>
 8006e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	461a      	mov	r2, r3
 8006e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e46:	4413      	add	r3, r2
 8006e48:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	011a      	lsls	r2, r3, #4
 8006e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e6a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	895b      	ldrh	r3, [r3, #10]
 8006e78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6959      	ldr	r1, [r3, #20]
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e92:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e96:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e9a:	6800      	ldr	r0, [r0, #0]
 8006e9c:	f001 fb49 	bl	8008532 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	695a      	ldr	r2, [r3, #20]
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb0:	441a      	add	r2, r3
 8006eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6a1a      	ldr	r2, [r3, #32]
 8006eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d90f      	bls.n	8006efa <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6a1a      	ldr	r2, [r3, #32]
 8006ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eea:	1ad2      	subs	r2, r2, r3
 8006eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	621a      	str	r2, [r3, #32]
 8006ef8:	e00e      	b.n	8006f18 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2200      	movs	r2, #0
 8006f16:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	785b      	ldrb	r3, [r3, #1]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d177      	bne.n	8007018 <USB_EPStartXfer+0x4c4>
 8006f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	61bb      	str	r3, [r7, #24]
 8006f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	461a      	mov	r2, r3
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	4413      	add	r3, r2
 8006f4a:	61bb      	str	r3, [r7, #24]
 8006f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	011a      	lsls	r2, r3, #4
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f62:	617b      	str	r3, [r7, #20]
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	801a      	strh	r2, [r3, #0]
 8006f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f78:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f7a:	d921      	bls.n	8006fc0 <USB_EPStartXfer+0x46c>
 8006f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f80:	095b      	lsrs	r3, r3, #5
 8006f82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f8a:	f003 031f 	and.w	r3, r3, #31
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d104      	bne.n	8006f9c <USB_EPStartXfer+0x448>
 8006f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f96:	3b01      	subs	r3, #1
 8006f98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	029b      	lsls	r3, r3, #10
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	4313      	orrs	r3, r2
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	801a      	strh	r2, [r3, #0]
 8006fbe:	e056      	b.n	800706e <USB_EPStartXfer+0x51a>
 8006fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10a      	bne.n	8006fde <USB_EPStartXfer+0x48a>
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	881b      	ldrh	r3, [r3, #0]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	801a      	strh	r2, [r3, #0]
 8006fdc:	e047      	b.n	800706e <USB_EPStartXfer+0x51a>
 8006fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe2:	085b      	lsrs	r3, r3, #1
 8006fe4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d004      	beq.n	8006ffe <USB_EPStartXfer+0x4aa>
 8006ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	b29a      	uxth	r2, r3
 8007004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007008:	b29b      	uxth	r3, r3
 800700a:	029b      	lsls	r3, r3, #10
 800700c:	b29b      	uxth	r3, r3
 800700e:	4313      	orrs	r3, r2
 8007010:	b29a      	uxth	r2, r3
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	801a      	strh	r2, [r3, #0]
 8007016:	e02a      	b.n	800706e <USB_EPStartXfer+0x51a>
 8007018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	785b      	ldrb	r3, [r3, #1]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d122      	bne.n	800706e <USB_EPStartXfer+0x51a>
 8007028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800702c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	623b      	str	r3, [r7, #32]
 8007034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007038:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007042:	b29b      	uxth	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	4413      	add	r3, r2
 800704a:	623b      	str	r3, [r7, #32]
 800704c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	011a      	lsls	r2, r3, #4
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	4413      	add	r3, r2
 800705e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007062:	61fb      	str	r3, [r7, #28]
 8007064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007068:	b29a      	uxth	r2, r3
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800706e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	891b      	ldrh	r3, [r3, #8]
 800707a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800707e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6959      	ldr	r1, [r3, #20]
 800708a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800708e:	b29b      	uxth	r3, r3
 8007090:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007094:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007098:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800709c:	6800      	ldr	r0, [r0, #0]
 800709e:	f001 fa48 	bl	8008532 <USB_WritePMA>
 80070a2:	e3ee      	b.n	8007882 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	785b      	ldrb	r3, [r3, #1]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d177      	bne.n	80071a4 <USB_EPStartXfer+0x650>
 80070b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	461a      	mov	r2, r3
 80070d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070d4:	4413      	add	r3, r2
 80070d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	011a      	lsls	r2, r3, #4
 80070e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070e8:	4413      	add	r3, r2
 80070ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80070ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80070f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070fe:	801a      	strh	r2, [r3, #0]
 8007100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007104:	2b3e      	cmp	r3, #62	@ 0x3e
 8007106:	d921      	bls.n	800714c <USB_EPStartXfer+0x5f8>
 8007108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800710c:	095b      	lsrs	r3, r3, #5
 800710e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007116:	f003 031f 	and.w	r3, r3, #31
 800711a:	2b00      	cmp	r3, #0
 800711c:	d104      	bne.n	8007128 <USB_EPStartXfer+0x5d4>
 800711e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007122:	3b01      	subs	r3, #1
 8007124:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	b29a      	uxth	r2, r3
 800712e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007132:	b29b      	uxth	r3, r3
 8007134:	029b      	lsls	r3, r3, #10
 8007136:	b29b      	uxth	r3, r3
 8007138:	4313      	orrs	r3, r2
 800713a:	b29b      	uxth	r3, r3
 800713c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007144:	b29a      	uxth	r2, r3
 8007146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	e056      	b.n	80071fa <USB_EPStartXfer+0x6a6>
 800714c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10a      	bne.n	800716a <USB_EPStartXfer+0x616>
 8007154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	b29b      	uxth	r3, r3
 800715a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800715e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007162:	b29a      	uxth	r2, r3
 8007164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007166:	801a      	strh	r2, [r3, #0]
 8007168:	e047      	b.n	80071fa <USB_EPStartXfer+0x6a6>
 800716a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716e:	085b      	lsrs	r3, r3, #1
 8007170:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b00      	cmp	r3, #0
 800717e:	d004      	beq.n	800718a <USB_EPStartXfer+0x636>
 8007180:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007184:	3301      	adds	r3, #1
 8007186:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800718a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	b29a      	uxth	r2, r3
 8007190:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007194:	b29b      	uxth	r3, r3
 8007196:	029b      	lsls	r3, r3, #10
 8007198:	b29b      	uxth	r3, r3
 800719a:	4313      	orrs	r3, r2
 800719c:	b29a      	uxth	r2, r3
 800719e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071a0:	801a      	strh	r2, [r3, #0]
 80071a2:	e02a      	b.n	80071fa <USB_EPStartXfer+0x6a6>
 80071a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	785b      	ldrb	r3, [r3, #1]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d122      	bne.n	80071fa <USB_EPStartXfer+0x6a6>
 80071b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	653b      	str	r3, [r7, #80]	@ 0x50
 80071c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	461a      	mov	r2, r3
 80071d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071d4:	4413      	add	r3, r2
 80071d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80071d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	011a      	lsls	r2, r3, #4
 80071e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071e8:	4413      	add	r3, r2
 80071ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80071fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	891b      	ldrh	r3, [r3, #8]
 8007206:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800720a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6959      	ldr	r1, [r3, #20]
 8007216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800721a:	b29b      	uxth	r3, r3
 800721c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007220:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007224:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007228:	6800      	ldr	r0, [r0, #0]
 800722a:	f001 f982 	bl	8008532 <USB_WritePMA>
            ep->xfer_buff += len;
 800722e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	695a      	ldr	r2, [r3, #20]
 800723a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800723e:	441a      	add	r2, r3
 8007240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800724c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6a1a      	ldr	r2, [r3, #32]
 8007258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800725c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	429a      	cmp	r2, r3
 8007266:	d90f      	bls.n	8007288 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6a1a      	ldr	r2, [r3, #32]
 8007274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007278:	1ad2      	subs	r2, r2, r3
 800727a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800727e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	621a      	str	r2, [r3, #32]
 8007286:	e00e      	b.n	80072a6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2200      	movs	r2, #0
 80072a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80072b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	785b      	ldrb	r3, [r3, #1]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d177      	bne.n	80073b2 <USB_EPStartXfer+0x85e>
 80072c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072dc:	b29b      	uxth	r3, r3
 80072de:	461a      	mov	r2, r3
 80072e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e2:	4413      	add	r3, r2
 80072e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	011a      	lsls	r2, r3, #4
 80072f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f6:	4413      	add	r3, r2
 80072f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80072fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	b29b      	uxth	r3, r3
 8007304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007308:	b29a      	uxth	r2, r3
 800730a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800730c:	801a      	strh	r2, [r3, #0]
 800730e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007312:	2b3e      	cmp	r3, #62	@ 0x3e
 8007314:	d921      	bls.n	800735a <USB_EPStartXfer+0x806>
 8007316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731a:	095b      	lsrs	r3, r3, #5
 800731c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007324:	f003 031f 	and.w	r3, r3, #31
 8007328:	2b00      	cmp	r3, #0
 800732a:	d104      	bne.n	8007336 <USB_EPStartXfer+0x7e2>
 800732c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007330:	3b01      	subs	r3, #1
 8007332:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	b29a      	uxth	r2, r3
 800733c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007340:	b29b      	uxth	r3, r3
 8007342:	029b      	lsls	r3, r3, #10
 8007344:	b29b      	uxth	r3, r3
 8007346:	4313      	orrs	r3, r2
 8007348:	b29b      	uxth	r3, r3
 800734a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800734e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007352:	b29a      	uxth	r2, r3
 8007354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	e050      	b.n	80073fc <USB_EPStartXfer+0x8a8>
 800735a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10a      	bne.n	8007378 <USB_EPStartXfer+0x824>
 8007362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800736c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007370:	b29a      	uxth	r2, r3
 8007372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007374:	801a      	strh	r2, [r3, #0]
 8007376:	e041      	b.n	80073fc <USB_EPStartXfer+0x8a8>
 8007378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737c:	085b      	lsrs	r3, r3, #1
 800737e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d004      	beq.n	8007398 <USB_EPStartXfer+0x844>
 800738e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007392:	3301      	adds	r3, #1
 8007394:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	b29a      	uxth	r2, r3
 800739e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	029b      	lsls	r3, r3, #10
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	4313      	orrs	r3, r2
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ae:	801a      	strh	r2, [r3, #0]
 80073b0:	e024      	b.n	80073fc <USB_EPStartXfer+0x8a8>
 80073b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	785b      	ldrb	r3, [r3, #1]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d11c      	bne.n	80073fc <USB_EPStartXfer+0x8a8>
 80073c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	461a      	mov	r2, r3
 80073d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073d6:	4413      	add	r3, r2
 80073d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80073da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	011a      	lsls	r2, r3, #4
 80073e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073ea:	4413      	add	r3, r2
 80073ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80073fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	895b      	ldrh	r3, [r3, #10]
 8007408:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800740c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6959      	ldr	r1, [r3, #20]
 8007418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800741c:	b29b      	uxth	r3, r3
 800741e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007422:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007426:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800742a:	6800      	ldr	r0, [r0, #0]
 800742c:	f001 f881 	bl	8008532 <USB_WritePMA>
 8007430:	e227      	b.n	8007882 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	b29b      	uxth	r3, r3
 8007460:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007464:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007468:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800746c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007470:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	441a      	add	r2, r3
 8007486:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800748a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800748e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800749a:	b29b      	uxth	r3, r3
 800749c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800749e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	461a      	mov	r2, r3
 80074bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074be:	4413      	add	r3, r2
 80074c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	011a      	lsls	r2, r3, #4
 80074d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074d2:	4413      	add	r3, r2
 80074d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80074d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074de:	b29a      	uxth	r2, r3
 80074e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80074e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	891b      	ldrh	r3, [r3, #8]
 80074f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6959      	ldr	r1, [r3, #20]
 8007500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007504:	b29b      	uxth	r3, r3
 8007506:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800750a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800750e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007512:	6800      	ldr	r0, [r0, #0]
 8007514:	f001 f80d 	bl	8008532 <USB_WritePMA>
 8007518:	e1b3      	b.n	8007882 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800751a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6a1a      	ldr	r2, [r3, #32]
 8007526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752a:	1ad2      	subs	r2, r2, r3
 800752c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	b29b      	uxth	r3, r3
 8007556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 80c6 	beq.w	80076ec <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007564:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	673b      	str	r3, [r7, #112]	@ 0x70
 800756c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	785b      	ldrb	r3, [r3, #1]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d177      	bne.n	800766c <USB_EPStartXfer+0xb18>
 800757c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007580:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007596:	b29b      	uxth	r3, r3
 8007598:	461a      	mov	r2, r3
 800759a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800759c:	4413      	add	r3, r2
 800759e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	011a      	lsls	r2, r3, #4
 80075ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075b0:	4413      	add	r3, r2
 80075b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80075b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075c6:	801a      	strh	r2, [r3, #0]
 80075c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80075ce:	d921      	bls.n	8007614 <USB_EPStartXfer+0xac0>
 80075d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d4:	095b      	lsrs	r3, r3, #5
 80075d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80075da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075de:	f003 031f 	and.w	r3, r3, #31
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d104      	bne.n	80075f0 <USB_EPStartXfer+0xa9c>
 80075e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80075ea:	3b01      	subs	r3, #1
 80075ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80075f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	029b      	lsls	r3, r3, #10
 80075fe:	b29b      	uxth	r3, r3
 8007600:	4313      	orrs	r3, r2
 8007602:	b29b      	uxth	r3, r3
 8007604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800760c:	b29a      	uxth	r2, r3
 800760e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007610:	801a      	strh	r2, [r3, #0]
 8007612:	e050      	b.n	80076b6 <USB_EPStartXfer+0xb62>
 8007614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <USB_EPStartXfer+0xade>
 800761c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	b29b      	uxth	r3, r3
 8007622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800762a:	b29a      	uxth	r2, r3
 800762c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800762e:	801a      	strh	r2, [r3, #0]
 8007630:	e041      	b.n	80076b6 <USB_EPStartXfer+0xb62>
 8007632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007636:	085b      	lsrs	r3, r3, #1
 8007638:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800763c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d004      	beq.n	8007652 <USB_EPStartXfer+0xafe>
 8007648:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800764c:	3301      	adds	r3, #1
 800764e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007652:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	b29a      	uxth	r2, r3
 8007658:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800765c:	b29b      	uxth	r3, r3
 800765e:	029b      	lsls	r3, r3, #10
 8007660:	b29b      	uxth	r3, r3
 8007662:	4313      	orrs	r3, r2
 8007664:	b29a      	uxth	r2, r3
 8007666:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007668:	801a      	strh	r2, [r3, #0]
 800766a:	e024      	b.n	80076b6 <USB_EPStartXfer+0xb62>
 800766c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	785b      	ldrb	r3, [r3, #1]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d11c      	bne.n	80076b6 <USB_EPStartXfer+0xb62>
 800767c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007680:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800768a:	b29b      	uxth	r3, r3
 800768c:	461a      	mov	r2, r3
 800768e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007690:	4413      	add	r3, r2
 8007692:	673b      	str	r3, [r7, #112]	@ 0x70
 8007694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	011a      	lsls	r2, r3, #4
 80076a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076a4:	4413      	add	r3, r2
 80076a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80076aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80076b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	895b      	ldrh	r3, [r3, #10]
 80076c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6959      	ldr	r1, [r3, #20]
 80076d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80076dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80076e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80076e4:	6800      	ldr	r0, [r0, #0]
 80076e6:	f000 ff24 	bl	8008532 <USB_WritePMA>
 80076ea:	e0ca      	b.n	8007882 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80076ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	785b      	ldrb	r3, [r3, #1]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d177      	bne.n	80077ec <USB_EPStartXfer+0xc98>
 80076fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007700:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007716:	b29b      	uxth	r3, r3
 8007718:	461a      	mov	r2, r3
 800771a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800771c:	4413      	add	r3, r2
 800771e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	011a      	lsls	r2, r3, #4
 800772e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007730:	4413      	add	r3, r2
 8007732:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007736:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007738:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800773a:	881b      	ldrh	r3, [r3, #0]
 800773c:	b29b      	uxth	r3, r3
 800773e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007742:	b29a      	uxth	r2, r3
 8007744:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007746:	801a      	strh	r2, [r3, #0]
 8007748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800774c:	2b3e      	cmp	r3, #62	@ 0x3e
 800774e:	d921      	bls.n	8007794 <USB_EPStartXfer+0xc40>
 8007750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007754:	095b      	lsrs	r3, r3, #5
 8007756:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800775a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775e:	f003 031f 	and.w	r3, r3, #31
 8007762:	2b00      	cmp	r3, #0
 8007764:	d104      	bne.n	8007770 <USB_EPStartXfer+0xc1c>
 8007766:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800776a:	3b01      	subs	r3, #1
 800776c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007770:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	b29a      	uxth	r2, r3
 8007776:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800777a:	b29b      	uxth	r3, r3
 800777c:	029b      	lsls	r3, r3, #10
 800777e:	b29b      	uxth	r3, r3
 8007780:	4313      	orrs	r3, r2
 8007782:	b29b      	uxth	r3, r3
 8007784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800778c:	b29a      	uxth	r2, r3
 800778e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007790:	801a      	strh	r2, [r3, #0]
 8007792:	e05c      	b.n	800784e <USB_EPStartXfer+0xcfa>
 8007794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10a      	bne.n	80077b2 <USB_EPStartXfer+0xc5e>
 800779c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077ae:	801a      	strh	r2, [r3, #0]
 80077b0:	e04d      	b.n	800784e <USB_EPStartXfer+0xcfa>
 80077b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b6:	085b      	lsrs	r3, r3, #1
 80077b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80077bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d004      	beq.n	80077d2 <USB_EPStartXfer+0xc7e>
 80077c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80077cc:	3301      	adds	r3, #1
 80077ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80077d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80077dc:	b29b      	uxth	r3, r3
 80077de:	029b      	lsls	r3, r3, #10
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	4313      	orrs	r3, r2
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077e8:	801a      	strh	r2, [r3, #0]
 80077ea:	e030      	b.n	800784e <USB_EPStartXfer+0xcfa>
 80077ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	785b      	ldrb	r3, [r3, #1]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d128      	bne.n	800784e <USB_EPStartXfer+0xcfa>
 80077fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007800:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800780a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007818:	b29b      	uxth	r3, r3
 800781a:	461a      	mov	r2, r3
 800781c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007820:	4413      	add	r3, r2
 8007822:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	011a      	lsls	r2, r3, #4
 8007834:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007838:	4413      	add	r3, r2
 800783a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800783e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007846:	b29a      	uxth	r2, r3
 8007848:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800784c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800784e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	891b      	ldrh	r3, [r3, #8]
 800785a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800785e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6959      	ldr	r1, [r3, #20]
 800786a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786e:	b29b      	uxth	r3, r3
 8007870:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007874:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007878:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800787c:	6800      	ldr	r0, [r0, #0]
 800787e:	f000 fe58 	bl	8008532 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007886:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078a8:	817b      	strh	r3, [r7, #10]
 80078aa:	897b      	ldrh	r3, [r7, #10]
 80078ac:	f083 0310 	eor.w	r3, r3, #16
 80078b0:	817b      	strh	r3, [r7, #10]
 80078b2:	897b      	ldrh	r3, [r7, #10]
 80078b4:	f083 0320 	eor.w	r3, r3, #32
 80078b8:	817b      	strh	r3, [r7, #10]
 80078ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	441a      	add	r2, r3
 80078d4:	897b      	ldrh	r3, [r7, #10]
 80078d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	8013      	strh	r3, [r2, #0]
 80078ea:	f000 bcde 	b.w	80082aa <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80078ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	7b1b      	ldrb	r3, [r3, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f040 80bb 	bne.w	8007a76 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	699a      	ldr	r2, [r3, #24]
 800790c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	429a      	cmp	r2, r3
 800791a:	d917      	bls.n	800794c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800791c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800792c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	699a      	ldr	r2, [r3, #24]
 8007938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793c:	1ad2      	subs	r2, r2, r3
 800793e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	619a      	str	r2, [r3, #24]
 800794a:	e00e      	b.n	800796a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800794c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800795c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2200      	movs	r2, #0
 8007968:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800796a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007986:	b29b      	uxth	r3, r3
 8007988:	461a      	mov	r2, r3
 800798a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800798e:	4413      	add	r3, r2
 8007990:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	011a      	lsls	r2, r3, #4
 80079a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80079a6:	4413      	add	r3, r2
 80079a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80079b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079bc:	b29a      	uxth	r2, r3
 80079be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079c2:	801a      	strh	r2, [r3, #0]
 80079c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80079ca:	d924      	bls.n	8007a16 <USB_EPStartXfer+0xec2>
 80079cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d0:	095b      	lsrs	r3, r3, #5
 80079d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079da:	f003 031f 	and.w	r3, r3, #31
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d104      	bne.n	80079ec <USB_EPStartXfer+0xe98>
 80079e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80079e6:	3b01      	subs	r3, #1
 80079e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	029b      	lsls	r3, r3, #10
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	4313      	orrs	r3, r2
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a10:	801a      	strh	r2, [r3, #0]
 8007a12:	f000 bc10 	b.w	8008236 <USB_EPStartXfer+0x16e2>
 8007a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10c      	bne.n	8007a38 <USB_EPStartXfer+0xee4>
 8007a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a34:	801a      	strh	r2, [r3, #0]
 8007a36:	e3fe      	b.n	8008236 <USB_EPStartXfer+0x16e2>
 8007a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a3c:	085b      	lsrs	r3, r3, #1
 8007a3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d004      	beq.n	8007a58 <USB_EPStartXfer+0xf04>
 8007a4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007a52:	3301      	adds	r3, #1
 8007a54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	029b      	lsls	r3, r3, #10
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a72:	801a      	strh	r2, [r3, #0]
 8007a74:	e3df      	b.n	8008236 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	78db      	ldrb	r3, [r3, #3]
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	f040 8218 	bne.w	8007eb8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	785b      	ldrb	r3, [r3, #1]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f040 809d 	bne.w	8007bd4 <USB_EPStartXfer+0x1080>
 8007a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007abe:	4413      	add	r3, r2
 8007ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	011a      	lsls	r2, r3, #4
 8007ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007adc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ae0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007af2:	801a      	strh	r2, [r3, #0]
 8007af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b02:	d92b      	bls.n	8007b5c <USB_EPStartXfer+0x1008>
 8007b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	095b      	lsrs	r3, r3, #5
 8007b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f003 031f 	and.w	r3, r3, #31
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d104      	bne.n	8007b34 <USB_EPStartXfer+0xfe0>
 8007b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	029b      	lsls	r3, r3, #10
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	4313      	orrs	r3, r2
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b58:	801a      	strh	r2, [r3, #0]
 8007b5a:	e070      	b.n	8007c3e <USB_EPStartXfer+0x10ea>
 8007b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10c      	bne.n	8007b86 <USB_EPStartXfer+0x1032>
 8007b6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b82:	801a      	strh	r2, [r3, #0]
 8007b84:	e05b      	b.n	8007c3e <USB_EPStartXfer+0x10ea>
 8007b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	085b      	lsrs	r3, r3, #1
 8007b94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d004      	beq.n	8007bb6 <USB_EPStartXfer+0x1062>
 8007bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	029b      	lsls	r3, r3, #10
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007bd0:	801a      	strh	r2, [r3, #0]
 8007bd2:	e034      	b.n	8007c3e <USB_EPStartXfer+0x10ea>
 8007bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d12c      	bne.n	8007c3e <USB_EPStartXfer+0x10ea>
 8007be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	461a      	mov	r2, r3
 8007c04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c08:	4413      	add	r3, r2
 8007c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	011a      	lsls	r2, r3, #4
 8007c1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c20:	4413      	add	r3, r2
 8007c22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007c3c:	801a      	strh	r2, [r3, #0]
 8007c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	785b      	ldrb	r3, [r3, #1]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f040 809d 	bne.w	8007d98 <USB_EPStartXfer+0x1244>
 8007c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c82:	4413      	add	r3, r2
 8007c84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	011a      	lsls	r2, r3, #4
 8007c96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ca0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cb6:	801a      	strh	r2, [r3, #0]
 8007cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cc6:	d92b      	bls.n	8007d20 <USB_EPStartXfer+0x11cc>
 8007cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	095b      	lsrs	r3, r3, #5
 8007cd6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	f003 031f 	and.w	r3, r3, #31
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d104      	bne.n	8007cf8 <USB_EPStartXfer+0x11a4>
 8007cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	029b      	lsls	r3, r3, #10
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d1c:	801a      	strh	r2, [r3, #0]
 8007d1e:	e069      	b.n	8007df4 <USB_EPStartXfer+0x12a0>
 8007d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10c      	bne.n	8007d4a <USB_EPStartXfer+0x11f6>
 8007d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d46:	801a      	strh	r2, [r3, #0]
 8007d48:	e054      	b.n	8007df4 <USB_EPStartXfer+0x12a0>
 8007d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	085b      	lsrs	r3, r3, #1
 8007d58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d004      	beq.n	8007d7a <USB_EPStartXfer+0x1226>
 8007d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d74:	3301      	adds	r3, #1
 8007d76:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d7e:	881b      	ldrh	r3, [r3, #0]
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	029b      	lsls	r3, r3, #10
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d94:	801a      	strh	r2, [r3, #0]
 8007d96:	e02d      	b.n	8007df4 <USB_EPStartXfer+0x12a0>
 8007d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	785b      	ldrb	r3, [r3, #1]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d125      	bne.n	8007df4 <USB_EPStartXfer+0x12a0>
 8007da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	461a      	mov	r2, r3
 8007dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	011a      	lsls	r2, r3, #4
 8007dd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ddc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007df2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 8218 	beq.w	8008236 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e26:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d005      	beq.n	8007e3e <USB_EPStartXfer+0x12ea>
 8007e32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10d      	bne.n	8007e5a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f040 81f5 	bne.w	8008236 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007e4c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f040 81ee 	bne.w	8008236 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e80:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	441a      	add	r2, r3
 8007e9e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007ea2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ea6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007eaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	8013      	strh	r3, [r2, #0]
 8007eb6:	e1be      	b.n	8008236 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	78db      	ldrb	r3, [r3, #3]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	f040 81b4 	bne.w	8008232 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	699a      	ldr	r2, [r3, #24]
 8007ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d917      	bls.n	8007f16 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	699a      	ldr	r2, [r3, #24]
 8007f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f06:	1ad2      	subs	r2, r2, r3
 8007f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	619a      	str	r2, [r3, #24]
 8007f14:	e00e      	b.n	8007f34 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2200      	movs	r2, #0
 8007f32:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	785b      	ldrb	r3, [r3, #1]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f040 8085 	bne.w	8008050 <USB_EPStartXfer+0x14fc>
 8007f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	461a      	mov	r2, r3
 8007f66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	011a      	lsls	r2, r3, #4
 8007f7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007f82:	4413      	add	r3, r2
 8007f84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007f88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f9e:	801a      	strh	r2, [r3, #0]
 8007fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fa6:	d923      	bls.n	8007ff0 <USB_EPStartXfer+0x149c>
 8007fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fac:	095b      	lsrs	r3, r3, #5
 8007fae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb6:	f003 031f 	and.w	r3, r3, #31
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d104      	bne.n	8007fc8 <USB_EPStartXfer+0x1474>
 8007fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007fc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	029b      	lsls	r3, r3, #10
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007fec:	801a      	strh	r2, [r3, #0]
 8007fee:	e060      	b.n	80080b2 <USB_EPStartXfer+0x155e>
 8007ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10c      	bne.n	8008012 <USB_EPStartXfer+0x14be>
 8007ff8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008008:	b29a      	uxth	r2, r3
 800800a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800800e:	801a      	strh	r2, [r3, #0]
 8008010:	e04f      	b.n	80080b2 <USB_EPStartXfer+0x155e>
 8008012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008016:	085b      	lsrs	r3, r3, #1
 8008018:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800801c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008020:	f003 0301 	and.w	r3, r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	d004      	beq.n	8008032 <USB_EPStartXfer+0x14de>
 8008028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800802c:	3301      	adds	r3, #1
 800802e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008032:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	b29a      	uxth	r2, r3
 800803a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800803e:	b29b      	uxth	r3, r3
 8008040:	029b      	lsls	r3, r3, #10
 8008042:	b29b      	uxth	r3, r3
 8008044:	4313      	orrs	r3, r2
 8008046:	b29a      	uxth	r2, r3
 8008048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800804c:	801a      	strh	r2, [r3, #0]
 800804e:	e030      	b.n	80080b2 <USB_EPStartXfer+0x155e>
 8008050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	785b      	ldrb	r3, [r3, #1]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d128      	bne.n	80080b2 <USB_EPStartXfer+0x155e>
 8008060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008064:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800806e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008072:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800807c:	b29b      	uxth	r3, r3
 800807e:	461a      	mov	r2, r3
 8008080:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008084:	4413      	add	r3, r2
 8008086:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800808a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800808e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	011a      	lsls	r2, r3, #4
 8008098:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800809c:	4413      	add	r3, r2
 800809e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80080a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80080a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80080b0:	801a      	strh	r2, [r3, #0]
 80080b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	785b      	ldrb	r3, [r3, #1]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f040 8085 	bne.w	80081dc <USB_EPStartXfer+0x1688>
 80080d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80080e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	461a      	mov	r2, r3
 80080f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80080f6:	4413      	add	r3, r2
 80080f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80080fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	011a      	lsls	r2, r3, #4
 800810a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800810e:	4413      	add	r3, r2
 8008110:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008114:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008118:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b29b      	uxth	r3, r3
 8008120:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008124:	b29a      	uxth	r2, r3
 8008126:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800812a:	801a      	strh	r2, [r3, #0]
 800812c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008130:	2b3e      	cmp	r3, #62	@ 0x3e
 8008132:	d923      	bls.n	800817c <USB_EPStartXfer+0x1628>
 8008134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008138:	095b      	lsrs	r3, r3, #5
 800813a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800813e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008142:	f003 031f 	and.w	r3, r3, #31
 8008146:	2b00      	cmp	r3, #0
 8008148:	d104      	bne.n	8008154 <USB_EPStartXfer+0x1600>
 800814a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800814e:	3b01      	subs	r3, #1
 8008150:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008154:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	b29a      	uxth	r2, r3
 800815c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008160:	b29b      	uxth	r3, r3
 8008162:	029b      	lsls	r3, r3, #10
 8008164:	b29b      	uxth	r3, r3
 8008166:	4313      	orrs	r3, r2
 8008168:	b29b      	uxth	r3, r3
 800816a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800816e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008172:	b29a      	uxth	r2, r3
 8008174:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008178:	801a      	strh	r2, [r3, #0]
 800817a:	e05c      	b.n	8008236 <USB_EPStartXfer+0x16e2>
 800817c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10c      	bne.n	800819e <USB_EPStartXfer+0x164a>
 8008184:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	b29b      	uxth	r3, r3
 800818c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008194:	b29a      	uxth	r2, r3
 8008196:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800819a:	801a      	strh	r2, [r3, #0]
 800819c:	e04b      	b.n	8008236 <USB_EPStartXfer+0x16e2>
 800819e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a2:	085b      	lsrs	r3, r3, #1
 80081a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80081a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d004      	beq.n	80081be <USB_EPStartXfer+0x166a>
 80081b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081b8:	3301      	adds	r3, #1
 80081ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80081be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	029b      	lsls	r3, r3, #10
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	4313      	orrs	r3, r2
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081d8:	801a      	strh	r2, [r3, #0]
 80081da:	e02c      	b.n	8008236 <USB_EPStartXfer+0x16e2>
 80081dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	785b      	ldrb	r3, [r3, #1]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d124      	bne.n	8008236 <USB_EPStartXfer+0x16e2>
 80081ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	461a      	mov	r2, r3
 80081fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008202:	4413      	add	r3, r2
 8008204:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800820c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	011a      	lsls	r2, r3, #4
 8008216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800821a:	4413      	add	r3, r2
 800821c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008220:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008228:	b29a      	uxth	r2, r3
 800822a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800822e:	801a      	strh	r2, [r3, #0]
 8008230:	e001      	b.n	8008236 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e03a      	b.n	80082ac <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800823a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	b29b      	uxth	r3, r3
 8008254:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800825c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008260:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008264:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008268:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800826c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008270:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008274:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800827c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008286:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	441a      	add	r2, r3
 8008292:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008296:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800829a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800829e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b085      	sub	sp, #20
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	785b      	ldrb	r3, [r3, #1]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d020      	beq.n	800830a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082de:	81bb      	strh	r3, [r7, #12]
 80082e0:	89bb      	ldrh	r3, [r7, #12]
 80082e2:	f083 0310 	eor.w	r3, r3, #16
 80082e6:	81bb      	strh	r3, [r7, #12]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	441a      	add	r2, r3
 80082f2:	89bb      	ldrh	r3, [r7, #12]
 80082f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008304:	b29b      	uxth	r3, r3
 8008306:	8013      	strh	r3, [r2, #0]
 8008308:	e01f      	b.n	800834a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	b29b      	uxth	r3, r3
 8008318:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800831c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008320:	81fb      	strh	r3, [r7, #14]
 8008322:	89fb      	ldrh	r3, [r7, #14]
 8008324:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008328:	81fb      	strh	r3, [r7, #14]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	441a      	add	r2, r3
 8008334:	89fb      	ldrh	r3, [r7, #14]
 8008336:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800833a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800833e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008346:	b29b      	uxth	r3, r3
 8008348:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	bc80      	pop	{r7}
 8008354:	4770      	bx	lr

08008356 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008356:	b480      	push	{r7}
 8008358:	b087      	sub	sp, #28
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	7b1b      	ldrb	r3, [r3, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	f040 809d 	bne.w	80084a4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	785b      	ldrb	r3, [r3, #1]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d04c      	beq.n	800840c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	823b      	strh	r3, [r7, #16]
 8008380:	8a3b      	ldrh	r3, [r7, #16]
 8008382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008386:	2b00      	cmp	r3, #0
 8008388:	d01b      	beq.n	80083c2 <USB_EPClearStall+0x6c>
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	b29b      	uxth	r3, r3
 8008398:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800839c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083a0:	81fb      	strh	r3, [r7, #14]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	441a      	add	r2, r3
 80083ac:	89fb      	ldrh	r3, [r7, #14]
 80083ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083be:	b29b      	uxth	r3, r3
 80083c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	78db      	ldrb	r3, [r3, #3]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d06c      	beq.n	80084a4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083e0:	81bb      	strh	r3, [r7, #12]
 80083e2:	89bb      	ldrh	r3, [r7, #12]
 80083e4:	f083 0320 	eor.w	r3, r3, #32
 80083e8:	81bb      	strh	r3, [r7, #12]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	441a      	add	r2, r3
 80083f4:	89bb      	ldrh	r3, [r7, #12]
 80083f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008406:	b29b      	uxth	r3, r3
 8008408:	8013      	strh	r3, [r2, #0]
 800840a:	e04b      	b.n	80084a4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	82fb      	strh	r3, [r7, #22]
 800841a:	8afb      	ldrh	r3, [r7, #22]
 800841c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d01b      	beq.n	800845c <USB_EPClearStall+0x106>
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	b29b      	uxth	r3, r3
 8008432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800843a:	82bb      	strh	r3, [r7, #20]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	441a      	add	r2, r3
 8008446:	8abb      	ldrh	r3, [r7, #20]
 8008448:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800844c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008450:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008458:	b29b      	uxth	r3, r3
 800845a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	881b      	ldrh	r3, [r3, #0]
 8008468:	b29b      	uxth	r3, r3
 800846a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800846e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008472:	827b      	strh	r3, [r7, #18]
 8008474:	8a7b      	ldrh	r3, [r7, #18]
 8008476:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800847a:	827b      	strh	r3, [r7, #18]
 800847c:	8a7b      	ldrh	r3, [r7, #18]
 800847e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008482:	827b      	strh	r3, [r7, #18]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	441a      	add	r2, r3
 800848e:	8a7b      	ldrh	r3, [r7, #18]
 8008490:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008494:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008498:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800849c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	371c      	adds	r7, #28
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bc80      	pop	{r7}
 80084ae:	4770      	bx	lr

080084b0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80084bc:	78fb      	ldrb	r3, [r7, #3]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d103      	bne.n	80084ca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2280      	movs	r2, #128	@ 0x80
 80084c6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bc80      	pop	{r7}
 80084d4:	4770      	bx	lr

080084d6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b083      	sub	sp, #12
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bc80      	pop	{r7}
 80084e8:	4770      	bx	lr

080084ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b083      	sub	sp, #12
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bc80      	pop	{r7}
 80084fc:	4770      	bx	lr

080084fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80084fe:	b480      	push	{r7}
 8008500:	b085      	sub	sp, #20
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800850c:	b29b      	uxth	r3, r3
 800850e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008510:	68fb      	ldr	r3, [r7, #12]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3714      	adds	r7, #20
 8008516:	46bd      	mov	sp, r7
 8008518:	bc80      	pop	{r7}
 800851a:	4770      	bx	lr

0800851c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	bc80      	pop	{r7}
 8008530:	4770      	bx	lr

08008532 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008532:	b480      	push	{r7}
 8008534:	b08b      	sub	sp, #44	@ 0x2c
 8008536:	af00      	add	r7, sp, #0
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	60b9      	str	r1, [r7, #8]
 800853c:	4611      	mov	r1, r2
 800853e:	461a      	mov	r2, r3
 8008540:	460b      	mov	r3, r1
 8008542:	80fb      	strh	r3, [r7, #6]
 8008544:	4613      	mov	r3, r2
 8008546:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008548:	88bb      	ldrh	r3, [r7, #4]
 800854a:	3301      	adds	r3, #1
 800854c:	085b      	lsrs	r3, r3, #1
 800854e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008558:	88fb      	ldrh	r3, [r7, #6]
 800855a:	005a      	lsls	r2, r3, #1
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008564:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	627b      	str	r3, [r7, #36]	@ 0x24
 800856a:	e01f      	b.n	80085ac <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	3301      	adds	r3, #1
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	b21b      	sxth	r3, r3
 800857a:	021b      	lsls	r3, r3, #8
 800857c:	b21a      	sxth	r2, r3
 800857e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008582:	4313      	orrs	r3, r2
 8008584:	b21b      	sxth	r3, r3
 8008586:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	8a7a      	ldrh	r2, [r7, #18]
 800858c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	3302      	adds	r3, #2
 8008592:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	3302      	adds	r3, #2
 8008598:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	3301      	adds	r3, #1
 800859e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	3301      	adds	r3, #1
 80085a4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80085a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a8:	3b01      	subs	r3, #1
 80085aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80085ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1dc      	bne.n	800856c <USB_WritePMA+0x3a>
  }
}
 80085b2:	bf00      	nop
 80085b4:	bf00      	nop
 80085b6:	372c      	adds	r7, #44	@ 0x2c
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bc80      	pop	{r7}
 80085bc:	4770      	bx	lr

080085be <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80085be:	b480      	push	{r7}
 80085c0:	b08b      	sub	sp, #44	@ 0x2c
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	60f8      	str	r0, [r7, #12]
 80085c6:	60b9      	str	r1, [r7, #8]
 80085c8:	4611      	mov	r1, r2
 80085ca:	461a      	mov	r2, r3
 80085cc:	460b      	mov	r3, r1
 80085ce:	80fb      	strh	r3, [r7, #6]
 80085d0:	4613      	mov	r3, r2
 80085d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80085d4:	88bb      	ldrh	r3, [r7, #4]
 80085d6:	085b      	lsrs	r3, r3, #1
 80085d8:	b29b      	uxth	r3, r3
 80085da:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80085e4:	88fb      	ldrh	r3, [r7, #6]
 80085e6:	005a      	lsls	r2, r3, #1
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	4413      	add	r3, r2
 80085ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085f0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80085f6:	e01b      	b.n	8008630 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	881b      	ldrh	r3, [r3, #0]
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	3302      	adds	r3, #2
 8008604:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	b2da      	uxtb	r2, r3
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	3301      	adds	r3, #1
 8008612:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	0a1b      	lsrs	r3, r3, #8
 8008618:	b2da      	uxtb	r2, r3
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	3301      	adds	r3, #1
 8008622:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	3302      	adds	r3, #2
 8008628:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800862a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862c:	3b01      	subs	r3, #1
 800862e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e0      	bne.n	80085f8 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008636:	88bb      	ldrh	r3, [r7, #4]
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	b29b      	uxth	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d007      	beq.n	8008652 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	b29b      	uxth	r3, r3
 8008648:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	b2da      	uxtb	r2, r3
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	701a      	strb	r2, [r3, #0]
  }
}
 8008652:	bf00      	nop
 8008654:	372c      	adds	r7, #44	@ 0x2c
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr

0800865c <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8008668:	2300      	movs	r3, #0
 800866a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	7c1b      	ldrb	r3, [r3, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d11c      	bne.n	80086ae <USBD_CDC_Init+0x52>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8008674:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008678:	2202      	movs	r2, #2
 800867a:	2181      	movs	r1, #129	@ 0x81
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f001 fdbf 	bl	800a200 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8008682:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008686:	2202      	movs	r2, #2
 8008688:	2101      	movs	r1, #1
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f001 fdb8 	bl	800a200 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_OUT_PACKET_SIZE);
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8008690:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008694:	2202      	movs	r2, #2
 8008696:	2183      	movs	r1, #131	@ 0x83
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f001 fdb1 	bl	800a200 <USBD_LL_OpenEP>
                   CDC_IN_EP+2,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800869e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086a2:	2202      	movs	r2, #2
 80086a4:	2103      	movs	r1, #3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f001 fdaa 	bl	800a200 <USBD_LL_OpenEP>
 80086ac:	e017      	b.n	80086de <USBD_CDC_Init+0x82>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80086ae:	2340      	movs	r3, #64	@ 0x40
 80086b0:	2202      	movs	r2, #2
 80086b2:	2181      	movs	r1, #129	@ 0x81
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 fda3 	bl	800a200 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80086ba:	2340      	movs	r3, #64	@ 0x40
 80086bc:	2202      	movs	r2, #2
 80086be:	2101      	movs	r1, #1
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 fd9d 	bl	800a200 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 80086c6:	2340      	movs	r3, #64	@ 0x40
 80086c8:	2202      	movs	r2, #2
 80086ca:	2183      	movs	r1, #131	@ 0x83
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f001 fd97 	bl	800a200 <USBD_LL_OpenEP>
                   CDC_IN_EP+2,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80086d2:	2340      	movs	r3, #64	@ 0x40
 80086d4:	2202      	movs	r2, #2
 80086d6:	2103      	movs	r1, #3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f001 fd91 	bl	800a200 <USBD_LL_OpenEP>
                   CDC_OUT_EP+2,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 80086de:	2308      	movs	r3, #8
 80086e0:	2203      	movs	r2, #3
 80086e2:	2182      	movs	r1, #130	@ 0x82
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 fd8b 	bl	800a200 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);

  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 80086ea:	2308      	movs	r3, #8
 80086ec:	2203      	movs	r2, #3
 80086ee:	2184      	movs	r1, #132	@ 0x84
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 fd85 	bl	800a200 <USBD_LL_OpenEP>
                 CDC_CMD_EP+2,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80086f6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80086fa:	f001 ff4b 	bl	800a594 <USBD_static_malloc>
 80086fe:	4602      	mov	r2, r0
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
  
  if(pdev->pClassData == NULL)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <USBD_CDC_Init+0xba>
  {
    ret = 1; 
 8008710:	2301      	movs	r3, #1
 8008712:	73fb      	strb	r3, [r7, #15]
 8008714:	e037      	b.n	8008786 <USBD_CDC_Init+0x12a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800871c:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2200      	movs	r2, #0
 800872c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState =0;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2200      	movs	r2, #0
 8008734:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	7c1b      	ldrb	r3, [r3, #16]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d112      	bne.n	8008766 <USBD_CDC_Init+0x10a>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008746:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800874a:	2101      	movs	r1, #1
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f001 fed3 	bl	800a4f8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_HS_OUT_PACKET_SIZE);
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008758:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800875c:	2103      	movs	r1, #3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f001 feca 	bl	800a4f8 <USBD_LL_PrepareReceive>
 8008764:	e00f      	b.n	8008786 <USBD_CDC_Init+0x12a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800876c:	2340      	movs	r3, #64	@ 0x40
 800876e:	2101      	movs	r1, #1
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f001 fec1 	bl	800a4f8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800877c:	2340      	movs	r3, #64	@ 0x40
 800877e:	2103      	movs	r1, #3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f001 feb9 	bl	800a4f8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8008786:	7bfb      	ldrb	r3, [r7, #15]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 80087a0:	2181      	movs	r1, #129	@ 0x81
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f001 fd6a 	bl	800a27c <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 80087a8:	2101      	movs	r1, #1
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 fd66 	bl	800a27c <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 80087b0:	2182      	movs	r1, #130	@ 0x82
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f001 fd62 	bl	800a27c <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 80087b8:	2183      	movs	r1, #131	@ 0x83
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f001 fd5e 	bl	800a27c <USBD_LL_CloseEP>
              CDC_IN_EP+2);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 80087c0:	2103      	movs	r1, #3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f001 fd5a 	bl	800a27c <USBD_LL_CloseEP>
              CDC_OUT_EP+2);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 80087c8:	2184      	movs	r1, #132	@ 0x84
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f001 fd56 	bl	800a27c <USBD_LL_CloseEP>
              CDC_CMD_EP+2);
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00e      	beq.n	80087f8 <USBD_CDC_DeInit+0x68>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80087ea:	4618      	mov	r0, r3
 80087ec:	f001 fede 	bl	800a5ac <USBD_static_free>
    pdev->pClassData = NULL;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
  }
  
  return ret;
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8008804:	b590      	push	{r4, r7, lr}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008814:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800881e:	2b00      	cmp	r3, #0
 8008820:	d03d      	beq.n	800889e <USBD_CDC_Setup+0x9a>
 8008822:	2b20      	cmp	r3, #32
 8008824:	d147      	bne.n	80088b6 <USBD_CDC_Setup+0xb2>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	88db      	ldrh	r3, [r3, #6]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d02b      	beq.n	8008886 <USBD_CDC_Setup+0x82>
    {
      if (req->bmRequest & 0x80)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	b25b      	sxtb	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	da13      	bge.n	8008860 <USBD_CDC_Setup+0x5c>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800883e:	689c      	ldr	r4, [r3, #8]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	7858      	ldrb	r0, [r3, #1]
                                                          (uint8_t *)hcdc->data,
 8008844:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	88da      	ldrh	r2, [r3, #6]
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	889b      	ldrh	r3, [r3, #4]
 800884e:	47a0      	blx	r4
                                                          req->wLength, 
                                                          req->wIndex);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hcdc->data,
 8008850:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	88db      	ldrh	r3, [r3, #6]
 8008856:	461a      	mov	r2, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f001 f832 	bl	80098c2 <USBD_CtlSendData>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0,
                                                        req->wIndex);
    }
    break;
 800885e:	e02b      	b.n	80088b8 <USBD_CDC_Setup+0xb4>
        hcdc->CmdOpCode = req->bRequest;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	785a      	ldrb	r2, [r3, #1]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
        hcdc->CmdLength = req->wLength;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	88db      	ldrh	r3, [r3, #6]
 800886e:	b2da      	uxtb	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
                           (uint8_t *)hcdc->data,
 8008876:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	88db      	ldrh	r3, [r3, #6]
 800887c:	461a      	mov	r2, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 f84d 	bl	800991e <USBD_CtlPrepareRx>
    break;
 8008884:	e018      	b.n	80088b8 <USBD_CDC_Setup+0xb4>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800888c:	689c      	ldr	r4, [r3, #8]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	7858      	ldrb	r0, [r3, #1]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	889b      	ldrh	r3, [r3, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	47a0      	blx	r4
    break;
 800889c:	e00c      	b.n	80088b8 <USBD_CDC_Setup+0xb4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	785b      	ldrb	r3, [r3, #1]
 80088a2:	2b0a      	cmp	r3, #10
 80088a4:	d001      	beq.n	80088aa <USBD_CDC_Setup+0xa6>
 80088a6:	2b0b      	cmp	r3, #11
                        &ifalt,
                        1);
      break;
      
    case USB_REQ_SET_INTERFACE :
      break;
 80088a8:	e005      	b.n	80088b6 <USBD_CDC_Setup+0xb2>
      USBD_CtlSendData (pdev,
 80088aa:	2201      	movs	r2, #1
 80088ac:	4905      	ldr	r1, [pc, #20]	@ (80088c4 <USBD_CDC_Setup+0xc0>)
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f001 f807 	bl	80098c2 <USBD_CtlSendData>
      break;
 80088b4:	bf00      	nop
    }
 
  default: 
    break;
 80088b6:	bf00      	nop
  }
  return USBD_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3714      	adds	r7, #20
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd90      	pop	{r4, r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20002768 	.word	0x20002768

080088c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	460b      	mov	r3, r1
 80088d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80088da:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d005      	beq.n	80088f2 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    return USBD_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e000      	b.n	80088f4 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 80088f2:	2302      	movs	r3, #2
  }
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bc80      	pop	{r7}
 80088fc:	4770      	bx	lr

080088fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	460b      	mov	r3, r1
 8008908:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008910:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8008912:	78fb      	ldrb	r3, [r7, #3]
 8008914:	4619      	mov	r1, r3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 fe28 	bl	800a56c <USBD_LL_GetRxDataSize>
 800891c:	4602      	mov	r2, r0
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800892a:	2b00      	cmp	r3, #0
 800892c:	d012      	beq.n	8008954 <USBD_CDC_DataOut+0x56>
  {    
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength, (epnum == CDC_OUT_EP) ? 0 : 2);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	f502 7103 	add.w	r1, r2, #524	@ 0x20c
 8008942:	78fa      	ldrb	r2, [r7, #3]
 8008944:	2a01      	cmp	r2, #1
 8008946:	d101      	bne.n	800894c <USBD_CDC_DataOut+0x4e>
 8008948:	2200      	movs	r2, #0
 800894a:	e000      	b.n	800894e <USBD_CDC_DataOut+0x50>
 800894c:	2202      	movs	r2, #2
 800894e:	4798      	blx	r3

    return USBD_OK;
 8008950:	2300      	movs	r3, #0
 8008952:	e000      	b.n	8008956 <USBD_CDC_DataOut+0x58>
  }
  else
  {
    return USBD_FAIL;
 8008954:	2302      	movs	r3, #2
  }
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800895e:	b590      	push	{r4, r7, lr}
 8008960:	b085      	sub	sp, #20
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800896c:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8008974:	2b00      	cmp	r3, #0
 8008976:	d018      	beq.n	80089aa <USBD_CDC_EP0_RxReady+0x4c>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800897e:	2bff      	cmp	r3, #255	@ 0xff
 8008980:	d013      	beq.n	80089aa <USBD_CDC_EP0_RxReady+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8008988:	689c      	ldr	r4, [r3, #8]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f893 0200 	ldrb.w	r0, [r3, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8008990:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength, 
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008998:	461a      	mov	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 80089a0:	47a0      	blx	r4
                                                      pdev->request.wIndex);
      hcdc->CmdOpCode = 0xFF; 
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	22ff      	movs	r2, #255	@ 0xff
 80089a6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
      
  }
  return USBD_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd90      	pop	{r4, r7, pc}

080089b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	228d      	movs	r2, #141	@ 0x8d
 80089c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80089c2:	4b03      	ldr	r3, [pc, #12]	@ (80089d0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bc80      	pop	{r7}
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	200000e0 	.word	0x200000e0

080089d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	228d      	movs	r2, #141	@ 0x8d
 80089e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80089e2:	4b03      	ldr	r3, [pc, #12]	@ (80089f0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bc80      	pop	{r7}
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	20000050 	.word	0x20000050

080089f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	228d      	movs	r2, #141	@ 0x8d
 8008a00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008a02:	4b03      	ldr	r3, [pc, #12]	@ (8008a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bc80      	pop	{r7}
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	20000170 	.word	0x20000170

08008a14 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	220a      	movs	r2, #10
 8008a20:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008a22:	4b03      	ldr	r3, [pc, #12]	@ (8008a30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bc80      	pop	{r7}
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	2000000c 	.word	0x2000000c

08008a34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008a3e:	2302      	movs	r3, #2
 8008a40:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    ret = USBD_OK;    
 8008a50:	2300      	movs	r3, #0
 8008a52:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bc80      	pop	{r7}
 8008a5e:	4770      	bx	lr

08008a60 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b087      	sub	sp, #28
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008a74:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;  
 8008a7e:	88fa      	ldrh	r2, [r7, #6]
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  
  return USBD_OK;  
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	371c      	adds	r7, #28
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bc80      	pop	{r7}
 8008a90:	4770      	bx	lr

08008a92 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b085      	sub	sp, #20
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008aa2:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  
  return USBD_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bc80      	pop	{r7}
 8008ab6:	4770      	bx	lr

08008ab8 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint16_t index)
{      
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	807b      	strh	r3, [r7, #2]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008aca:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d01c      	beq.n	8008b10 <USBD_CDC_TransmitPacket+0x58>
  {
    if(hcdc->TxState == 0)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d115      	bne.n	8008b0c <USBD_CDC_TransmitPacket+0x54>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
      /* Transmit next packet */      
      USBD_LL_Transmit(pdev,
 8008ae8:	887b      	ldrh	r3, [r7, #2]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d801      	bhi.n	8008af2 <USBD_CDC_TransmitPacket+0x3a>
 8008aee:	2181      	movs	r1, #129	@ 0x81
 8008af0:	e000      	b.n	8008af4 <USBD_CDC_TransmitPacket+0x3c>
 8008af2:	2183      	movs	r1, #131	@ 0x83
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (index < 2) ? CDC_IN_EP : (CDC_IN_EP+2),
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev,
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f001 fcbe 	bl	800a484 <USBD_LL_Transmit>
      
      return USBD_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	e002      	b.n	8008b12 <USBD_CDC_TransmitPacket+0x5a>
    }
    else
    {
      return USBD_BUSY;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e000      	b.n	8008b12 <USBD_CDC_TransmitPacket+0x5a>
    }
  }
  else
  {
    return USBD_FAIL;
 8008b10:	2302      	movs	r3, #2
  }
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev, uint16_t index)
{      
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b084      	sub	sp, #16
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	460b      	mov	r3, r1
 8008b24:	807b      	strh	r3, [r7, #2]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008b2c:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d021      	beq.n	8008b7c <USBD_CDC_ReceivePacket+0x62>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	7c1b      	ldrb	r3, [r3, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10e      	bne.n	8008b5e <USBD_CDC_ReceivePacket+0x44>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008b40:	887b      	ldrh	r3, [r7, #2]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d801      	bhi.n	8008b4a <USBD_CDC_ReceivePacket+0x30>
 8008b46:	2101      	movs	r1, #1
 8008b48:	e000      	b.n	8008b4c <USBD_CDC_ReceivePacket+0x32>
 8008b4a:	2103      	movs	r1, #3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f001 fcce 	bl	800a4f8 <USBD_LL_PrepareReceive>
 8008b5c:	e00c      	b.n	8008b78 <USBD_CDC_ReceivePacket+0x5e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008b5e:	887b      	ldrh	r3, [r7, #2]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d801      	bhi.n	8008b68 <USBD_CDC_ReceivePacket+0x4e>
 8008b64:	2101      	movs	r1, #1
 8008b66:	e000      	b.n	8008b6a <USBD_CDC_ReceivePacket+0x50>
 8008b68:	2103      	movs	r1, #3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b70:	2340      	movs	r3, #64	@ 0x40
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f001 fcc0 	bl	800a4f8 <USBD_LL_PrepareReceive>
                             (index < 2) ? CDC_OUT_EP : (CDC_OUT_EP+2),
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	e000      	b.n	8008b7e <USBD_CDC_ReceivePacket+0x64>
  }
  else
  {
    return USBD_FAIL;
 8008b7c:	2302      	movs	r3, #2
  }
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b084      	sub	sp, #16
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	60f8      	str	r0, [r7, #12]
 8008b8e:	60b9      	str	r1, [r7, #8]
 8008b90:	4613      	mov	r3, r2
 8008b92:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d101      	bne.n	8008b9e <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	e01a      	b.n	8008bd4 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d003      	beq.n	8008bb0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
  pdev->id = id;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	79fa      	ldrb	r2, [r7, #7]
 8008bca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f001 fa69 	bl	800a0a4 <USBD_LL_Init>
  
  return USBD_OK; 
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d006      	beq.n	8008bfe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    status = USBD_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	73fb      	strb	r3, [r7, #15]
 8008bfc:	e001      	b.n	8008c02 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8008bfe:	2302      	movs	r3, #2
 8008c00:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bc80      	pop	{r7}
 8008c0c:	4770      	bx	lr

08008c0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b082      	sub	sp, #8
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f001 fac0 	bl	800a19c <USBD_LL_Start>
  
  return USBD_OK;  
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8008c26:	b480      	push	{r7}
 8008c28:	b083      	sub	sp, #12
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bc80      	pop	{r7}
 8008c38:	4770      	bx	lr

08008c3a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b084      	sub	sp, #16
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	460b      	mov	r3, r1
 8008c44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008c46:	2302      	movs	r3, #2
 8008c48:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00c      	beq.n	8008c6e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	78fa      	ldrb	r2, [r7, #3]
 8008c5e:	4611      	mov	r1, r2
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	4798      	blx	r3
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d101      	bne.n	8008c6e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	460b      	mov	r3, r1
 8008c82:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	78fa      	ldrb	r2, [r7, #3]
 8008c8e:	4611      	mov	r1, r2
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	4798      	blx	r3
  return USBD_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b082      	sub	sp, #8
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f000 fd62 	bl	800977a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8008cd2:	f003 031f 	and.w	r3, r3, #31
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d016      	beq.n	8008d08 <USBD_LL_SetupStage+0x6a>
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	dc1c      	bgt.n	8008d18 <USBD_LL_SetupStage+0x7a>
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d002      	beq.n	8008ce8 <USBD_LL_SetupStage+0x4a>
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d008      	beq.n	8008cf8 <USBD_LL_SetupStage+0x5a>
 8008ce6:	e017      	b.n	8008d18 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f987 	bl	8009004 <USBD_StdDevReq>
    break;
 8008cf6:	e01a      	b.n	8008d2e <USBD_LL_SetupStage+0x90>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f9cf 	bl	80090a4 <USBD_StdItfReq>
    break;
 8008d06:	e012      	b.n	8008d2e <USBD_LL_SetupStage+0x90>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f9fa 	bl	800910a <USBD_StdEPReq>
    break;
 8008d16:	e00a      	b.n	8008d2e <USBD_LL_SetupStage+0x90>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 8008d1e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f001 fade 	bl	800a2e8 <USBD_LL_StallEP>
    break;
 8008d2c:	bf00      	nop
  }  
  return USBD_OK;  
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	460b      	mov	r3, r1
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8008d46:	7afb      	ldrb	r3, [r7, #11]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d138      	bne.n	8008dbe <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8008d52:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f8d3 31f4 	ldr.w	r3, [r3, #500]	@ 0x1f4
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d142      	bne.n	8008de4 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	689a      	ldr	r2, [r3, #8]
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d914      	bls.n	8008d94 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	689a      	ldr	r2, [r3, #8]
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	1ad2      	subs	r2, r2, r3
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	68da      	ldr	r2, [r3, #12]
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	4293      	cmp	r3, r2
 8008d82:	bf28      	it	cs
 8008d84:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	461a      	mov	r2, r3
 8008d8a:	6879      	ldr	r1, [r7, #4]
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f000 fde4 	bl	800995a <USBD_CtlContinueRx>
 8008d92:	e027      	b.n	8008de4 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00a      	beq.n	8008db6 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	d105      	bne.n	8008db6 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 fde1 	bl	800997e <USBD_CtlSendStatus>
 8008dbc:	e012      	b.n	8008de4 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00c      	beq.n	8008de4 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8008dd0:	2b03      	cmp	r3, #3
 8008dd2:	d107      	bne.n	8008de4 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	7afa      	ldrb	r2, [r7, #11]
 8008dde:	4611      	mov	r1, r2
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	4798      	blx	r3
  }  
  return USBD_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3718      	adds	r7, #24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b086      	sub	sp, #24
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	460b      	mov	r3, r1
 8008df8:	607a      	str	r2, [r7, #4]
 8008dfa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8008dfc:	7afb      	ldrb	r3, [r7, #11]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d16c      	bne.n	8008edc <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	3314      	adds	r3, #20
 8008e06:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	@ 0x1f4
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d157      	bne.n	8008ec2 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	689a      	ldr	r2, [r3, #8]
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d915      	bls.n	8008e4a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	689a      	ldr	r2, [r3, #8]
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	1ad2      	subs	r2, r2, r3
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	461a      	mov	r2, r3
 8008e34:	6879      	ldr	r1, [r7, #4]
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f000 fd5f 	bl	80098fa <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	2200      	movs	r2, #0
 8008e40:	2100      	movs	r1, #0
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f001 fb58 	bl	800a4f8 <USBD_LL_PrepareReceive>
 8008e48:	e03b      	b.n	8008ec2 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	68d2      	ldr	r2, [r2, #12]
 8008e52:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e56:	fb01 f202 	mul.w	r2, r1, r2
 8008e5a:	1a9b      	subs	r3, r3, r2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d11c      	bne.n	8008e9a <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d316      	bcc.n	8008e9a <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f8d3 31f8 	ldr.w	r3, [r3, #504]	@ 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d20f      	bcs.n	8008e9a <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f000 fd3b 	bl	80098fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	2200      	movs	r2, #0
 8008e90:	2100      	movs	r1, #0
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f001 fb30 	bl	800a4f8 <USBD_LL_PrepareReceive>
 8008e98:	e013      	b.n	8008ec2 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00a      	beq.n	8008ebc <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d105      	bne.n	8008ebc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f000 fd71 	bl	80099a4 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d11a      	bne.n	8008f02 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f7ff feaa 	bl	8008c26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
 8008eda:	e012      	b.n	8008f02 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00c      	beq.n	8008f02 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d107      	bne.n	8008f02 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	7afa      	ldrb	r2, [r7, #11]
 8008efc:	4611      	mov	r1, r2
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	4798      	blx	r3
  }  
  return USBD_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3718      	adds	r7, #24
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8008f14:	2340      	movs	r3, #64	@ 0x40
 8008f16:	2200      	movs	r2, #0
 8008f18:	2100      	movs	r1, #0
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f001 f970 	bl	800a200 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2240      	movs	r2, #64	@ 0x40
 8008f24:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8008f28:	2340      	movs	r3, #64	@ 0x40
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	2180      	movs	r1, #128	@ 0x80
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f001 f966 	bl	800a200 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2240      	movs	r2, #64	@ 0x40
 8008f38:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
  
  if (pdev->pClassData) 
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d009      	beq.n	8008f60 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	6852      	ldr	r2, [r2, #4]
 8008f58:	b2d2      	uxtb	r2, r2
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	4798      	blx	r3
 
  
  return USBD_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	460b      	mov	r3, r1
 8008f74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	78fa      	ldrb	r2, [r7, #3]
 8008f7a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bc80      	pop	{r7}
 8008f86:	4770      	bx	lr

08008f88 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f893 21fc 	ldrb.w	r2, [r3, #508]	@ 0x1fc
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f883 21fd 	strb.w	r2, [r3, #509]	@ 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2204      	movs	r2, #4
 8008fa0:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
  return USBD_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	370c      	adds	r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bc80      	pop	{r7}
 8008fae:	4770      	bx	lr

08008fb0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 21fd 	ldrb.w	r2, [r3, #509]	@ 0x1fd
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
  return USBD_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bc80      	pop	{r7}
 8008fce:	4770      	bx	lr

08008fd0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d10b      	bne.n	8008ffa <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d005      	beq.n	8008ffa <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	785b      	ldrb	r3, [r3, #1]
 8009016:	2b09      	cmp	r3, #9
 8009018:	d839      	bhi.n	800908e <USBD_StdDevReq+0x8a>
 800901a:	a201      	add	r2, pc, #4	@ (adr r2, 8009020 <USBD_StdDevReq+0x1c>)
 800901c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009020:	08009071 	.word	0x08009071
 8009024:	08009085 	.word	0x08009085
 8009028:	0800908f 	.word	0x0800908f
 800902c:	0800907b 	.word	0x0800907b
 8009030:	0800908f 	.word	0x0800908f
 8009034:	08009053 	.word	0x08009053
 8009038:	08009049 	.word	0x08009049
 800903c:	0800908f 	.word	0x0800908f
 8009040:	08009067 	.word	0x08009067
 8009044:	0800905d 	.word	0x0800905d
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f93a 	bl	80092c4 <USBD_GetDescriptor>
    break;
 8009050:	e022      	b.n	8009098 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fa29 	bl	80094ac <USBD_SetAddress>
    break;
 800905a:	e01d      	b.n	8009098 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fa64 	bl	800952c <USBD_SetConfig>
    break;
 8009064:	e018      	b.n	8009098 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8009066:	6839      	ldr	r1, [r7, #0]
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fae7 	bl	800963c <USBD_GetConfig>
    break;
 800906e:	e013      	b.n	8009098 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8009070:	6839      	ldr	r1, [r7, #0]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fb14 	bl	80096a0 <USBD_GetStatus>
    break;
 8009078:	e00e      	b.n	8009098 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800907a:	6839      	ldr	r1, [r7, #0]
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fb39 	bl	80096f4 <USBD_SetFeature>
    break;
 8009082:	e009      	b.n	8009098 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fb4f 	bl	800972a <USBD_ClrFeature>
    break;
 800908c:	e004      	b.n	8009098 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fbab 	bl	80097ec <USBD_CtlError>
    break;
 8009096:	bf00      	nop
  }
  
  return ret;
 8009098:	7bfb      	ldrb	r3, [r7, #15]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop

080090a4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80090ae:	2300      	movs	r3, #0
 80090b0:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 80090b8:	2b03      	cmp	r3, #3
 80090ba:	d11b      	bne.n	80090f4 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	889b      	ldrh	r3, [r3, #4]
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b03      	cmp	r3, #3
 80090c4:	d811      	bhi.n	80090ea <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	88db      	ldrh	r3, [r3, #6]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d110      	bne.n	80090fe <USBD_StdItfReq+0x5a>
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10d      	bne.n	80090fe <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fc4b 	bl	800997e <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 80090e8:	e009      	b.n	80090fe <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 80090ea:	6839      	ldr	r1, [r7, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 fb7d 	bl	80097ec <USBD_CtlError>
    break;
 80090f2:	e004      	b.n	80090fe <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fb78 	bl	80097ec <USBD_CtlError>
    break;
 80090fc:	e000      	b.n	8009100 <USBD_StdItfReq+0x5c>
    break;
 80090fe:	bf00      	nop
  }
  return USBD_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b084      	sub	sp, #16
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8009114:	2300      	movs	r3, #0
 8009116:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	889b      	ldrh	r3, [r3, #4]
 800911c:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009126:	2b20      	cmp	r3, #32
 8009128:	d108      	bne.n	800913c <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	4798      	blx	r3
    
    return USBD_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	e0be      	b.n	80092ba <USBD_StdEPReq+0x1b0>
  }
  
  switch (req->bRequest) 
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	785b      	ldrb	r3, [r3, #1]
 8009140:	2b03      	cmp	r3, #3
 8009142:	d007      	beq.n	8009154 <USBD_StdEPReq+0x4a>
 8009144:	2b03      	cmp	r3, #3
 8009146:	f300 80b6 	bgt.w	80092b6 <USBD_StdEPReq+0x1ac>
 800914a:	2b00      	cmp	r3, #0
 800914c:	d06d      	beq.n	800922a <USBD_StdEPReq+0x120>
 800914e:	2b01      	cmp	r3, #1
 8009150:	d035      	beq.n	80091be <USBD_StdEPReq+0xb4>
      break;
    }
    break;
    
  default:
    break;
 8009152:	e0b0      	b.n	80092b6 <USBD_StdEPReq+0x1ac>
    switch (pdev->dev_state) 
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 800915a:	2b02      	cmp	r3, #2
 800915c:	d002      	beq.n	8009164 <USBD_StdEPReq+0x5a>
 800915e:	2b03      	cmp	r3, #3
 8009160:	d00c      	beq.n	800917c <USBD_StdEPReq+0x72>
 8009162:	e025      	b.n	80091b0 <USBD_StdEPReq+0xa6>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8009164:	7bbb      	ldrb	r3, [r7, #14]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d027      	beq.n	80091ba <USBD_StdEPReq+0xb0>
 800916a:	7bbb      	ldrb	r3, [r7, #14]
 800916c:	2b80      	cmp	r3, #128	@ 0x80
 800916e:	d024      	beq.n	80091ba <USBD_StdEPReq+0xb0>
        USBD_LL_StallEP(pdev , ep_addr);
 8009170:	7bbb      	ldrb	r3, [r7, #14]
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 f8b7 	bl	800a2e8 <USBD_LL_StallEP>
      break;	
 800917a:	e01e      	b.n	80091ba <USBD_StdEPReq+0xb0>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	885b      	ldrh	r3, [r3, #2]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10a      	bne.n	800919a <USBD_StdEPReq+0x90>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8009184:	7bbb      	ldrb	r3, [r7, #14]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d007      	beq.n	800919a <USBD_StdEPReq+0x90>
 800918a:	7bbb      	ldrb	r3, [r7, #14]
 800918c:	2b80      	cmp	r3, #128	@ 0x80
 800918e:	d004      	beq.n	800919a <USBD_StdEPReq+0x90>
          USBD_LL_StallEP(pdev , ep_addr);
 8009190:	7bbb      	ldrb	r3, [r7, #14]
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f001 f8a7 	bl	800a2e8 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fbe8 	bl	800997e <USBD_CtlSendStatus>
      break;
 80091ae:	e005      	b.n	80091bc <USBD_StdEPReq+0xb2>
      USBD_CtlError(pdev , req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fb1a 	bl	80097ec <USBD_CtlError>
      break;    
 80091b8:	e000      	b.n	80091bc <USBD_StdEPReq+0xb2>
      break;	
 80091ba:	bf00      	nop
    break;
 80091bc:	e07c      	b.n	80092b8 <USBD_StdEPReq+0x1ae>
    switch (pdev->dev_state) 
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d002      	beq.n	80091ce <USBD_StdEPReq+0xc4>
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d00c      	beq.n	80091e6 <USBD_StdEPReq+0xdc>
 80091cc:	e024      	b.n	8009218 <USBD_StdEPReq+0x10e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d026      	beq.n	8009222 <USBD_StdEPReq+0x118>
 80091d4:	7bbb      	ldrb	r3, [r7, #14]
 80091d6:	2b80      	cmp	r3, #128	@ 0x80
 80091d8:	d023      	beq.n	8009222 <USBD_StdEPReq+0x118>
        USBD_LL_StallEP(pdev , ep_addr);
 80091da:	7bbb      	ldrb	r3, [r7, #14]
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f001 f882 	bl	800a2e8 <USBD_LL_StallEP>
      break;	
 80091e4:	e01d      	b.n	8009222 <USBD_StdEPReq+0x118>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	885b      	ldrh	r3, [r3, #2]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d11b      	bne.n	8009226 <USBD_StdEPReq+0x11c>
        if ((ep_addr & 0x7F) != 0x00) 
 80091ee:	7bbb      	ldrb	r3, [r7, #14]
 80091f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00b      	beq.n	8009210 <USBD_StdEPReq+0x106>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f001 f8a9 	bl	800a354 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fbb4 	bl	800997e <USBD_CtlSendStatus>
      break;
 8009216:	e006      	b.n	8009226 <USBD_StdEPReq+0x11c>
      USBD_CtlError(pdev , req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fae6 	bl	80097ec <USBD_CtlError>
      break;    
 8009220:	e002      	b.n	8009228 <USBD_StdEPReq+0x11e>
      break;	
 8009222:	bf00      	nop
 8009224:	e048      	b.n	80092b8 <USBD_StdEPReq+0x1ae>
      break;
 8009226:	bf00      	nop
    break;
 8009228:	e046      	b.n	80092b8 <USBD_StdEPReq+0x1ae>
    switch (pdev->dev_state) 
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 8009230:	2b02      	cmp	r3, #2
 8009232:	d002      	beq.n	800923a <USBD_StdEPReq+0x130>
 8009234:	2b03      	cmp	r3, #3
 8009236:	d00b      	beq.n	8009250 <USBD_StdEPReq+0x146>
 8009238:	e036      	b.n	80092a8 <USBD_StdEPReq+0x19e>
      if ((ep_addr & 0x7F) != 0x00) 
 800923a:	7bbb      	ldrb	r3, [r7, #14]
 800923c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009240:	2b00      	cmp	r3, #0
 8009242:	d036      	beq.n	80092b2 <USBD_StdEPReq+0x1a8>
        USBD_LL_StallEP(pdev , ep_addr);
 8009244:	7bbb      	ldrb	r3, [r7, #14]
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 f84d 	bl	800a2e8 <USBD_LL_StallEP>
      break;	
 800924e:	e030      	b.n	80092b2 <USBD_StdEPReq+0x1a8>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8009250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009254:	2b00      	cmp	r3, #0
 8009256:	da08      	bge.n	800926a <USBD_StdEPReq+0x160>
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800925e:	3301      	adds	r3, #1
 8009260:	011b      	lsls	r3, r3, #4
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	4413      	add	r3, r2
 8009266:	3304      	adds	r3, #4
 8009268:	e007      	b.n	800927a <USBD_StdEPReq+0x170>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800926a:	7bbb      	ldrb	r3, [r7, #14]
 800926c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8009270:	3310      	adds	r3, #16
 8009272:	011b      	lsls	r3, r3, #4
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	4413      	add	r3, r2
 8009278:	3304      	adds	r3, #4
 800927a:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f001 f89d 	bl	800a3c0 <USBD_LL_IsStallEP>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d003      	beq.n	8009294 <USBD_StdEPReq+0x18a>
        pep->status = 0x0001;     
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2201      	movs	r2, #1
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	e002      	b.n	800929a <USBD_StdEPReq+0x190>
        pep->status = 0x0000;  
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	2200      	movs	r2, #0
 8009298:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 800929a:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 800929c:	2202      	movs	r2, #2
 800929e:	4619      	mov	r1, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fb0e 	bl	80098c2 <USBD_CtlSendData>
      break;
 80092a6:	e005      	b.n	80092b4 <USBD_StdEPReq+0x1aa>
      USBD_CtlError(pdev , req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fa9e 	bl	80097ec <USBD_CtlError>
      break;
 80092b0:	e000      	b.n	80092b4 <USBD_StdEPReq+0x1aa>
      break;	
 80092b2:	bf00      	nop
    break;
 80092b4:	e000      	b.n	80092b8 <USBD_StdEPReq+0x1ae>
    break;
 80092b6:	bf00      	nop
  }
  return ret;
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	885b      	ldrh	r3, [r3, #2]
 80092d2:	0a1b      	lsrs	r3, r3, #8
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	3b01      	subs	r3, #1
 80092d8:	2b06      	cmp	r3, #6
 80092da:	f200 80c9 	bhi.w	8009470 <USBD_GetDescriptor+0x1ac>
 80092de:	a201      	add	r2, pc, #4	@ (adr r2, 80092e4 <USBD_GetDescriptor+0x20>)
 80092e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e4:	08009301 	.word	0x08009301
 80092e8:	08009319 	.word	0x08009319
 80092ec:	08009359 	.word	0x08009359
 80092f0:	08009471 	.word	0x08009471
 80092f4:	08009471 	.word	0x08009471
 80092f8:	0800941d 	.word	0x0800941d
 80092fc:	08009443 	.word	0x08009443
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	7c12      	ldrb	r2, [r2, #16]
 800930c:	f107 010a 	add.w	r1, r7, #10
 8009310:	4610      	mov	r0, r2
 8009312:	4798      	blx	r3
 8009314:	60f8      	str	r0, [r7, #12]
    break;
 8009316:	e0b0      	b.n	800947a <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	7c1b      	ldrb	r3, [r3, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10d      	bne.n	800933c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009328:	f107 020a 	add.w	r2, r7, #10
 800932c:	4610      	mov	r0, r2
 800932e:	4798      	blx	r3
 8009330:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	3301      	adds	r3, #1
 8009336:	2202      	movs	r2, #2
 8009338:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800933a:	e09e      	b.n	800947a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009344:	f107 020a 	add.w	r2, r7, #10
 8009348:	4610      	mov	r0, r2
 800934a:	4798      	blx	r3
 800934c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	3301      	adds	r3, #1
 8009352:	2202      	movs	r2, #2
 8009354:	701a      	strb	r2, [r3, #0]
    break;
 8009356:	e090      	b.n	800947a <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	885b      	ldrh	r3, [r3, #2]
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b05      	cmp	r3, #5
 8009360:	d856      	bhi.n	8009410 <USBD_GetDescriptor+0x14c>
 8009362:	a201      	add	r2, pc, #4	@ (adr r2, 8009368 <USBD_GetDescriptor+0xa4>)
 8009364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009368:	08009381 	.word	0x08009381
 800936c:	08009399 	.word	0x08009399
 8009370:	080093b1 	.word	0x080093b1
 8009374:	080093c9 	.word	0x080093c9
 8009378:	080093e1 	.word	0x080093e1
 800937c:	080093f9 	.word	0x080093f9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	7c12      	ldrb	r2, [r2, #16]
 800938c:	f107 010a 	add.w	r1, r7, #10
 8009390:	4610      	mov	r0, r2
 8009392:	4798      	blx	r3
 8009394:	60f8      	str	r0, [r7, #12]
      break;
 8009396:	e040      	b.n	800941a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	7c12      	ldrb	r2, [r2, #16]
 80093a4:	f107 010a 	add.w	r1, r7, #10
 80093a8:	4610      	mov	r0, r2
 80093aa:	4798      	blx	r3
 80093ac:	60f8      	str	r0, [r7, #12]
      break;
 80093ae:	e034      	b.n	800941a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	7c12      	ldrb	r2, [r2, #16]
 80093bc:	f107 010a 	add.w	r1, r7, #10
 80093c0:	4610      	mov	r0, r2
 80093c2:	4798      	blx	r3
 80093c4:	60f8      	str	r0, [r7, #12]
      break;
 80093c6:	e028      	b.n	800941a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	7c12      	ldrb	r2, [r2, #16]
 80093d4:	f107 010a 	add.w	r1, r7, #10
 80093d8:	4610      	mov	r0, r2
 80093da:	4798      	blx	r3
 80093dc:	60f8      	str	r0, [r7, #12]
      break;
 80093de:	e01c      	b.n	800941a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80093e6:	695b      	ldr	r3, [r3, #20]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	7c12      	ldrb	r2, [r2, #16]
 80093ec:	f107 010a 	add.w	r1, r7, #10
 80093f0:	4610      	mov	r0, r2
 80093f2:	4798      	blx	r3
 80093f4:	60f8      	str	r0, [r7, #12]
      break;
 80093f6:	e010      	b.n	800941a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	7c12      	ldrb	r2, [r2, #16]
 8009404:	f107 010a 	add.w	r1, r7, #10
 8009408:	4610      	mov	r0, r2
 800940a:	4798      	blx	r3
 800940c:	60f8      	str	r0, [r7, #12]
      break;
 800940e:	e004      	b.n	800941a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8009410:	6839      	ldr	r1, [r7, #0]
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f9ea 	bl	80097ec <USBD_CtlError>
      return;
 8009418:	e044      	b.n	80094a4 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 800941a:	e02e      	b.n	800947a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	7c1b      	ldrb	r3, [r3, #16]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d109      	bne.n	8009438 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800942a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800942c:	f107 020a 	add.w	r2, r7, #10
 8009430:	4610      	mov	r0, r2
 8009432:	4798      	blx	r3
 8009434:	60f8      	str	r0, [r7, #12]
      break;
 8009436:	e020      	b.n	800947a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009438:	6839      	ldr	r1, [r7, #0]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f9d6 	bl	80097ec <USBD_CtlError>
      return;
 8009440:	e030      	b.n	80094a4 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	7c1b      	ldrb	r3, [r3, #16]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10d      	bne.n	8009466 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009452:	f107 020a 	add.w	r2, r7, #10
 8009456:	4610      	mov	r0, r2
 8009458:	4798      	blx	r3
 800945a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	3301      	adds	r3, #1
 8009460:	2207      	movs	r2, #7
 8009462:	701a      	strb	r2, [r3, #0]
      break; 
 8009464:	e009      	b.n	800947a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f9bf 	bl	80097ec <USBD_CtlError>
      return;
 800946e:	e019      	b.n	80094a4 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f9ba 	bl	80097ec <USBD_CtlError>
    return;
 8009478:	e014      	b.n	80094a4 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800947a:	897b      	ldrh	r3, [r7, #10]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d011      	beq.n	80094a4 <USBD_GetDescriptor+0x1e0>
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	88db      	ldrh	r3, [r3, #6]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00d      	beq.n	80094a4 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	88da      	ldrh	r2, [r3, #6]
 800948c:	897b      	ldrh	r3, [r7, #10]
 800948e:	4293      	cmp	r3, r2
 8009490:	bf28      	it	cs
 8009492:	4613      	movcs	r3, r2
 8009494:	b29b      	uxth	r3, r3
 8009496:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8009498:	897b      	ldrh	r3, [r7, #10]
 800949a:	461a      	mov	r2, r3
 800949c:	68f9      	ldr	r1, [r7, #12]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fa0f 	bl	80098c2 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop

080094ac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	889b      	ldrh	r3, [r3, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d12c      	bne.n	8009518 <USBD_SetAddress+0x6c>
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	88db      	ldrh	r3, [r3, #6]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d128      	bne.n	8009518 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	885b      	ldrh	r3, [r3, #2]
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094d0:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d104      	bne.n	80094e6 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f984 	bl	80097ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80094e4:	e01d      	b.n	8009522 <USBD_SetAddress+0x76>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	7bfa      	ldrb	r2, [r7, #15]
 80094ea:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 ff90 	bl	800a418 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fa40 	bl	800997e <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d004      	beq.n	800950e <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2202      	movs	r2, #2
 8009508:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800950c:	e009      	b.n	8009522 <USBD_SetAddress+0x76>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8009516:	e004      	b.n	8009522 <USBD_SetAddress+0x76>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f966 	bl	80097ec <USBD_CtlError>
  } 
}
 8009520:	bf00      	nop
 8009522:	bf00      	nop
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
	...

0800952c <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	885b      	ldrh	r3, [r3, #2]
 800953a:	b2da      	uxtb	r2, r3
 800953c:	4b3e      	ldr	r3, [pc, #248]	@ (8009638 <USBD_SetConfig+0x10c>)
 800953e:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8009540:	4b3d      	ldr	r3, [pc, #244]	@ (8009638 <USBD_SetConfig+0x10c>)
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d904      	bls.n	8009552 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f94e 	bl	80097ec <USBD_CtlError>
 8009550:	e06f      	b.n	8009632 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 8009558:	2b02      	cmp	r3, #2
 800955a:	d002      	beq.n	8009562 <USBD_SetConfig+0x36>
 800955c:	2b03      	cmp	r3, #3
 800955e:	d023      	beq.n	80095a8 <USBD_SetConfig+0x7c>
 8009560:	e062      	b.n	8009628 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8009562:	4b35      	ldr	r3, [pc, #212]	@ (8009638 <USBD_SetConfig+0x10c>)
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d01a      	beq.n	80095a0 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 800956a:	4b33      	ldr	r3, [pc, #204]	@ (8009638 <USBD_SetConfig+0x10c>)
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2203      	movs	r2, #3
 8009578:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800957c:	4b2e      	ldr	r3, [pc, #184]	@ (8009638 <USBD_SetConfig+0x10c>)
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7ff fb59 	bl	8008c3a <USBD_SetClassConfig>
 8009588:	4603      	mov	r3, r0
 800958a:	2b02      	cmp	r3, #2
 800958c:	d104      	bne.n	8009598 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f92b 	bl	80097ec <USBD_CtlError>
          return;
 8009596:	e04c      	b.n	8009632 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f9f0 	bl	800997e <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800959e:	e048      	b.n	8009632 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f9ec 	bl	800997e <USBD_CtlSendStatus>
      break;
 80095a6:	e044      	b.n	8009632 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80095a8:	4b23      	ldr	r3, [pc, #140]	@ (8009638 <USBD_SetConfig+0x10c>)
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d112      	bne.n	80095d6 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2202      	movs	r2, #2
 80095b4:	f883 21fc 	strb.w	r2, [r3, #508]	@ 0x1fc
        pdev->dev_config = cfgidx;          
 80095b8:	4b1f      	ldr	r3, [pc, #124]	@ (8009638 <USBD_SetConfig+0x10c>)
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	461a      	mov	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80095c2:	4b1d      	ldr	r3, [pc, #116]	@ (8009638 <USBD_SetConfig+0x10c>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	4619      	mov	r1, r3
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f7ff fb55 	bl	8008c78 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f9d5 	bl	800997e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80095d4:	e02d      	b.n	8009632 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 80095d6:	4b18      	ldr	r3, [pc, #96]	@ (8009638 <USBD_SetConfig+0x10c>)
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	461a      	mov	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d01d      	beq.n	8009620 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	4619      	mov	r1, r3
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff fb43 	bl	8008c78 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095f2:	4b11      	ldr	r3, [pc, #68]	@ (8009638 <USBD_SetConfig+0x10c>)
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	461a      	mov	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80095fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009638 <USBD_SetConfig+0x10c>)
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f7ff fb19 	bl	8008c3a <USBD_SetClassConfig>
 8009608:	4603      	mov	r3, r0
 800960a:	2b02      	cmp	r3, #2
 800960c:	d104      	bne.n	8009618 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 800960e:	6839      	ldr	r1, [r7, #0]
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f8eb 	bl	80097ec <USBD_CtlError>
          return;
 8009616:	e00c      	b.n	8009632 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 f9b0 	bl	800997e <USBD_CtlSendStatus>
      break;
 800961e:	e008      	b.n	8009632 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f9ac 	bl	800997e <USBD_CtlSendStatus>
      break;
 8009626:	e004      	b.n	8009632 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f8de 	bl	80097ec <USBD_CtlError>
      break;
 8009630:	bf00      	nop
    }
  }
}
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	20002769 	.word	0x20002769

0800963c <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	88db      	ldrh	r3, [r3, #6]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d004      	beq.n	8009658 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f8cb 	bl	80097ec <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8009656:	e01f      	b.n	8009698 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 800965e:	2b02      	cmp	r3, #2
 8009660:	d002      	beq.n	8009668 <USBD_GetConfig+0x2c>
 8009662:	2b03      	cmp	r3, #3
 8009664:	d00b      	beq.n	800967e <USBD_GetConfig+0x42>
 8009666:	e012      	b.n	800968e <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 8009672:	2201      	movs	r2, #1
 8009674:	4619      	mov	r1, r3
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f923 	bl	80098c2 <USBD_CtlSendData>
      break;
 800967c:	e00c      	b.n	8009698 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 8009682:	2201      	movs	r2, #1
 8009684:	4619      	mov	r1, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f91b 	bl	80098c2 <USBD_CtlSendData>
      break;
 800968c:	e004      	b.n	8009698 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 800968e:	6839      	ldr	r1, [r7, #0]
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f8ab 	bl	80097ec <USBD_CtlError>
      break;
 8009696:	bf00      	nop
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 80096b0:	3b02      	subs	r3, #2
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d815      	bhi.n	80096e2 <USBD_GetStatus+0x42>
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
#else
    pdev->dev_config_status = 0;                                   
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	60da      	str	r2, [r3, #12]
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d005      	beq.n	80096d2 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	f043 0202 	orr.w	r2, r3, #2
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 80096d6:	2202      	movs	r2, #2
 80096d8:	4619      	mov	r1, r3
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f8f1 	bl	80098c2 <USBD_CtlSendData>
                      2);
    break;
 80096e0:	e004      	b.n	80096ec <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f881 	bl	80097ec <USBD_CtlError>
    break;
 80096ea:	bf00      	nop
  }
}
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	885b      	ldrh	r3, [r3, #2]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d10d      	bne.n	8009722 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2201      	movs	r2, #1
 800970a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    pdev->pClass->Setup (pdev, req);   
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 f92e 	bl	800997e <USBD_CtlSendStatus>
  }

}
 8009722:	bf00      	nop
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b082      	sub	sp, #8
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 800973a:	3b02      	subs	r3, #2
 800973c:	2b01      	cmp	r3, #1
 800973e:	d812      	bhi.n	8009766 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	885b      	ldrh	r3, [r3, #2]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d113      	bne.n	8009770 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      pdev->pClass->Setup (pdev, req);   
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f90d 	bl	800997e <USBD_CtlSendStatus>
    }
    break;
 8009764:	e004      	b.n	8009770 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8009766:	6839      	ldr	r1, [r7, #0]
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f83f 	bl	80097ec <USBD_CtlError>
    break;
 800976e:	e000      	b.n	8009772 <USBD_ClrFeature+0x48>
    break;
 8009770:	bf00      	nop
  }
}
 8009772:	bf00      	nop
 8009774:	3708      	adds	r7, #8
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800977a:	b480      	push	{r7}
 800977c:	b083      	sub	sp, #12
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	781a      	ldrb	r2, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	785a      	ldrb	r2, [r3, #1]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	3302      	adds	r3, #2
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	461a      	mov	r2, r3
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	3303      	adds	r3, #3
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	021b      	lsls	r3, r3, #8
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	4413      	add	r3, r2
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	3304      	adds	r3, #4
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	461a      	mov	r2, r3
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	3305      	adds	r3, #5
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	021b      	lsls	r3, r3, #8
 80097be:	b29b      	uxth	r3, r3
 80097c0:	4413      	add	r3, r2
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	3306      	adds	r3, #6
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	3307      	adds	r3, #7
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	021b      	lsls	r3, r3, #8
 80097d8:	b29b      	uxth	r3, r3
 80097da:	4413      	add	r3, r2
 80097dc:	b29a      	uxth	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	80da      	strh	r2, [r3, #6]

}
 80097e2:	bf00      	nop
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bc80      	pop	{r7}
 80097ea:	4770      	bx	lr

080097ec <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 80097f6:	2180      	movs	r1, #128	@ 0x80
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fd75 	bl	800a2e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80097fe:	2100      	movs	r1, #0
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fd71 	bl	800a2e8 <USBD_LL_StallEP>
}
 8009806:	bf00      	nop
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b086      	sub	sp, #24
 8009812:	af00      	add	r7, sp, #0
 8009814:	60f8      	str	r0, [r7, #12]
 8009816:	60b9      	str	r1, [r7, #8]
 8009818:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800981a:	2300      	movs	r3, #0
 800981c:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d033      	beq.n	800988c <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 f835 	bl	8009894 <USBD_GetLen>
 800982a:	4603      	mov	r3, r0
 800982c:	3301      	adds	r3, #1
 800982e:	b29b      	uxth	r3, r3
 8009830:	005b      	lsls	r3, r3, #1
 8009832:	b29a      	uxth	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	881a      	ldrh	r2, [r3, #0]
 800983c:	7dfb      	ldrb	r3, [r7, #23]
 800983e:	1c59      	adds	r1, r3, #1
 8009840:	75f9      	strb	r1, [r7, #23]
 8009842:	4619      	mov	r1, r3
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	440b      	add	r3, r1
 8009848:	b2d2      	uxtb	r2, r2
 800984a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800984c:	7dfb      	ldrb	r3, [r7, #23]
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	75fa      	strb	r2, [r7, #23]
 8009852:	461a      	mov	r2, r3
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	4413      	add	r3, r2
 8009858:	2203      	movs	r2, #3
 800985a:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 800985c:	e012      	b.n	8009884 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	1c5a      	adds	r2, r3, #1
 8009862:	60fa      	str	r2, [r7, #12]
 8009864:	7dfa      	ldrb	r2, [r7, #23]
 8009866:	1c51      	adds	r1, r2, #1
 8009868:	75f9      	strb	r1, [r7, #23]
 800986a:	4611      	mov	r1, r2
 800986c:	68ba      	ldr	r2, [r7, #8]
 800986e:	440a      	add	r2, r1
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8009874:	7dfb      	ldrb	r3, [r7, #23]
 8009876:	1c5a      	adds	r2, r3, #1
 8009878:	75fa      	strb	r2, [r7, #23]
 800987a:	461a      	mov	r2, r3
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	4413      	add	r3, r2
 8009880:	2200      	movs	r2, #0
 8009882:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1e8      	bne.n	800985e <USBD_GetString+0x50>
    }
  } 
}
 800988c:	bf00      	nop
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 80098a0:	e005      	b.n	80098ae <USBD_GetLen+0x1a>
    {
        len++;
 80098a2:	7bfb      	ldrb	r3, [r7, #15]
 80098a4:	3301      	adds	r3, #1
 80098a6:	73fb      	strb	r3, [r7, #15]
        buf++;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	3301      	adds	r3, #1
 80098ac:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1f5      	bne.n	80098a2 <USBD_GetLen+0xe>
    }

    return len;
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	bc80      	pop	{r7}
 80098c0:	4770      	bx	lr

080098c2 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b084      	sub	sp, #16
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	60f8      	str	r0, [r7, #12]
 80098ca:	60b9      	str	r1, [r7, #8]
 80098cc:	4613      	mov	r3, r2
 80098ce:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2202      	movs	r2, #2
 80098d4:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
  pdev->ep_in[0].total_length = len;
 80098d8:	88fa      	ldrh	r2, [r7, #6]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 80098de:	88fa      	ldrh	r2, [r7, #6]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80098e4:	88fb      	ldrh	r3, [r7, #6]
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	2100      	movs	r1, #0
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 fdca 	bl	800a484 <USBD_LL_Transmit>
  
  return USBD_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	60f8      	str	r0, [r7, #12]
 8009902:	60b9      	str	r1, [r7, #8]
 8009904:	4613      	mov	r3, r2
 8009906:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8009908:	88fb      	ldrh	r3, [r7, #6]
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	2100      	movs	r1, #0
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f000 fdb8 	bl	800a484 <USBD_LL_Transmit>
  
  return USBD_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b084      	sub	sp, #16
 8009922:	af00      	add	r7, sp, #0
 8009924:	60f8      	str	r0, [r7, #12]
 8009926:	60b9      	str	r1, [r7, #8]
 8009928:	4613      	mov	r3, r2
 800992a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2203      	movs	r2, #3
 8009930:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
  pdev->ep_out[0].total_length = len;
 8009934:	88fa      	ldrh	r2, [r7, #6]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  pdev->ep_out[0].rem_length   = len;
 800993c:	88fa      	ldrh	r2, [r7, #6]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8009944:	88fb      	ldrh	r3, [r7, #6]
 8009946:	68ba      	ldr	r2, [r7, #8]
 8009948:	2100      	movs	r1, #0
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 fdd4 	bl	800a4f8 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	60f8      	str	r0, [r7, #12]
 8009962:	60b9      	str	r1, [r7, #8]
 8009964:	4613      	mov	r3, r2
 8009966:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8009968:	88fb      	ldrh	r3, [r7, #6]
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	2100      	movs	r1, #0
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 fdc2 	bl	800a4f8 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b082      	sub	sp, #8
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2204      	movs	r2, #4
 800998a:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800998e:	2300      	movs	r3, #0
 8009990:	2200      	movs	r2, #0
 8009992:	2100      	movs	r1, #0
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fd75 	bl	800a484 <USBD_LL_Transmit>
  
  return USBD_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2205      	movs	r2, #5
 80099b0:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80099b4:	2300      	movs	r3, #0
 80099b6:	2200      	movs	r2, #0
 80099b8:	2100      	movs	r1, #0
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fd9c 	bl	800a4f8 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
	...

080099cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80099d0:	2200      	movs	r2, #0
 80099d2:	4908      	ldr	r1, [pc, #32]	@ (80099f4 <MX_USB_DEVICE_Init+0x28>)
 80099d4:	4808      	ldr	r0, [pc, #32]	@ (80099f8 <MX_USB_DEVICE_Init+0x2c>)
 80099d6:	f7ff f8d6 	bl	8008b86 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80099da:	4908      	ldr	r1, [pc, #32]	@ (80099fc <MX_USB_DEVICE_Init+0x30>)
 80099dc:	4806      	ldr	r0, [pc, #24]	@ (80099f8 <MX_USB_DEVICE_Init+0x2c>)
 80099de:	f7ff f8fd 	bl	8008bdc <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80099e2:	4907      	ldr	r1, [pc, #28]	@ (8009a00 <MX_USB_DEVICE_Init+0x34>)
 80099e4:	4804      	ldr	r0, [pc, #16]	@ (80099f8 <MX_USB_DEVICE_Init+0x2c>)
 80099e6:	f7ff f825 	bl	8008a34 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80099ea:	4803      	ldr	r0, [pc, #12]	@ (80099f8 <MX_USB_DEVICE_Init+0x2c>)
 80099ec:	f7ff f90f 	bl	8008c0e <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099f0:	bf00      	nop
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	20000210 	.word	0x20000210
 80099f8:	2000276c 	.word	0x2000276c
 80099fc:	20000018 	.word	0x20000018
 8009a00:	20000200 	.word	0x20000200

08009a04 <__NVIC_ClearPendingIRQ>:
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	db0c      	blt.n	8009a30 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a16:	79fb      	ldrb	r3, [r7, #7]
 8009a18:	f003 021f 	and.w	r2, r3, #31
 8009a1c:	4907      	ldr	r1, [pc, #28]	@ (8009a3c <__NVIC_ClearPendingIRQ+0x38>)
 8009a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a22:	095b      	lsrs	r3, r3, #5
 8009a24:	2001      	movs	r0, #1
 8009a26:	fa00 f202 	lsl.w	r2, r0, r2
 8009a2a:	3360      	adds	r3, #96	@ 0x60
 8009a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bc80      	pop	{r7}
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	e000e100 	.word	0xe000e100

08009a40 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a44:	2200      	movs	r2, #0
 8009a46:	4905      	ldr	r1, [pc, #20]	@ (8009a5c <CDC_Init_FS+0x1c>)
 8009a48:	4805      	ldr	r0, [pc, #20]	@ (8009a60 <CDC_Init_FS+0x20>)
 8009a4a:	f7ff f809 	bl	8008a60 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a4e:	4905      	ldr	r1, [pc, #20]	@ (8009a64 <CDC_Init_FS+0x24>)
 8009a50:	4803      	ldr	r0, [pc, #12]	@ (8009a60 <CDC_Init_FS+0x20>)
 8009a52:	f7ff f81e 	bl	8008a92 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a56:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	20002b90 	.word	0x20002b90
 8009a60:	2000276c 	.word	0x2000276c
 8009a64:	20002990 	.word	0x20002990

08009a68 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bc80      	pop	{r7}
 8009a74:	4770      	bx	lr
	...

08009a78 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length, uint16_t index)
{
 8009a78:	b590      	push	{r4, r7, lr}
 8009a7a:	b08b      	sub	sp, #44	@ 0x2c
 8009a7c:	af04      	add	r7, sp, #16
 8009a7e:	60b9      	str	r1, [r7, #8]
 8009a80:	4611      	mov	r1, r2
 8009a82:	461a      	mov	r2, r3
 8009a84:	4603      	mov	r3, r0
 8009a86:	73fb      	strb	r3, [r7, #15]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	81bb      	strh	r3, [r7, #12]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	2b23      	cmp	r3, #35	@ 0x23
 8009a94:	f200 80ec 	bhi.w	8009c70 <CDC_Control_FS+0x1f8>
 8009a98:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa0 <CDC_Control_FS+0x28>)
 8009a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9e:	bf00      	nop
 8009aa0:	08009c71 	.word	0x08009c71
 8009aa4:	08009c71 	.word	0x08009c71
 8009aa8:	08009c71 	.word	0x08009c71
 8009aac:	08009c71 	.word	0x08009c71
 8009ab0:	08009c71 	.word	0x08009c71
 8009ab4:	08009c71 	.word	0x08009c71
 8009ab8:	08009c71 	.word	0x08009c71
 8009abc:	08009c71 	.word	0x08009c71
 8009ac0:	08009c71 	.word	0x08009c71
 8009ac4:	08009c71 	.word	0x08009c71
 8009ac8:	08009c71 	.word	0x08009c71
 8009acc:	08009c71 	.word	0x08009c71
 8009ad0:	08009c71 	.word	0x08009c71
 8009ad4:	08009c71 	.word	0x08009c71
 8009ad8:	08009c71 	.word	0x08009c71
 8009adc:	08009c71 	.word	0x08009c71
 8009ae0:	08009c71 	.word	0x08009c71
 8009ae4:	08009c71 	.word	0x08009c71
 8009ae8:	08009c71 	.word	0x08009c71
 8009aec:	08009c71 	.word	0x08009c71
 8009af0:	08009c71 	.word	0x08009c71
 8009af4:	08009c71 	.word	0x08009c71
 8009af8:	08009c71 	.word	0x08009c71
 8009afc:	08009c71 	.word	0x08009c71
 8009b00:	08009c71 	.word	0x08009c71
 8009b04:	08009c71 	.word	0x08009c71
 8009b08:	08009c71 	.word	0x08009c71
 8009b0c:	08009c71 	.word	0x08009c71
 8009b10:	08009c71 	.word	0x08009c71
 8009b14:	08009c71 	.word	0x08009c71
 8009b18:	08009c71 	.word	0x08009c71
 8009b1c:	08009c71 	.word	0x08009c71
 8009b20:	08009b31 	.word	0x08009b31
 8009b24:	08009c71 	.word	0x08009c71
 8009b28:	08009c71 	.word	0x08009c71
 8009b2c:	08009c71 	.word	0x08009c71
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    {
      uart_ctx_t * const uart_ctx = (index < 2) ? &ctx.uart1 : &ctx.uart2;
 8009b30:	88fb      	ldrh	r3, [r7, #6]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d801      	bhi.n	8009b3a <CDC_Control_FS+0xc2>
 8009b36:	4b51      	ldr	r3, [pc, #324]	@ (8009c7c <CDC_Control_FS+0x204>)
 8009b38:	e000      	b.n	8009b3c <CDC_Control_FS+0xc4>
 8009b3a:	4b51      	ldr	r3, [pc, #324]	@ (8009c80 <CDC_Control_FS+0x208>)
 8009b3c:	617b      	str	r3, [r7, #20]

      USBD_CDC_LineCodingTypeDef *line_coding = (USBD_CDC_LineCodingTypeDef *)pbuf;
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	613b      	str	r3, [r7, #16]
      if (line_coding->bitrate == 0 || line_coding->datatype == 0) {
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 8093 	beq.w	8009c72 <CDC_Control_FS+0x1fa>
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	799b      	ldrb	r3, [r3, #6]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 808e 	beq.w	8009c72 <CDC_Control_FS+0x1fa>
       *    dwDTERate   -> line_coding->bitrate
       *    bCharFormat -> line_coding->format
       *    bParityType -> line_coding->paritytype
       *    bDataBits   -> line_coding->datatype
       */      
      uart_ctx->huart->Init.BaudRate = line_coding->bitrate;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	693a      	ldr	r2, [r7, #16]
 8009b5c:	6812      	ldr	r2, [r2, #0]
 8009b5e:	605a      	str	r2, [r3, #4]
      uart_ctx->huart->Init.WordLength = (line_coding->datatype == 8) ? UART_WORDLENGTH_8B : UART_WORDLENGTH_9B;
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	799b      	ldrb	r3, [r3, #6]
 8009b64:	2b08      	cmp	r3, #8
 8009b66:	d101      	bne.n	8009b6c <CDC_Control_FS+0xf4>
 8009b68:	2200      	movs	r2, #0
 8009b6a:	e001      	b.n	8009b70 <CDC_Control_FS+0xf8>
 8009b6c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	609a      	str	r2, [r3, #8]
      uart_ctx->huart->Init.StopBits = (line_coding->format == 0) ? UART_STOPBITS_1 : UART_STOPBITS_2;
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	791b      	ldrb	r3, [r3, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d101      	bne.n	8009b82 <CDC_Control_FS+0x10a>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	e001      	b.n	8009b86 <CDC_Control_FS+0x10e>
 8009b82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	60da      	str	r2, [r3, #12]
      uart_ctx->huart->Init.Parity = (line_coding->paritytype == 0) ? UART_PARITY_NONE : (line_coding->paritytype == 1) ? UART_PARITY_ODD : UART_PARITY_EVEN;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	795b      	ldrb	r3, [r3, #5]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d009      	beq.n	8009ba8 <CDC_Control_FS+0x130>
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	795b      	ldrb	r3, [r3, #5]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d102      	bne.n	8009ba2 <CDC_Control_FS+0x12a>
 8009b9c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009ba0:	e003      	b.n	8009baa <CDC_Control_FS+0x132>
 8009ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ba6:	e000      	b.n	8009baa <CDC_Control_FS+0x132>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	697a      	ldr	r2, [r7, #20]
 8009bac:	6852      	ldr	r2, [r2, #4]
 8009bae:	6113      	str	r3, [r2, #16]
      uart_ctx->huart->Init.Mode = UART_MODE_TX_RX;
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	220c      	movs	r2, #12
 8009bb6:	615a      	str	r2, [r3, #20]
      uart_ctx->huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	619a      	str	r2, [r3, #24]
      uart_ctx->huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	61da      	str	r2, [r3, #28]
        
      __HAL_UART_DISABLE(uart_ctx->huart);
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68da      	ldr	r2, [r3, #12]
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009bda:	60da      	str	r2, [r3, #12]
      if (HAL_UART_Init(uart_ctx->huart) != HAL_OK) {
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fb f94e 	bl	8004e82 <HAL_UART_Init>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d004      	beq.n	8009bf6 <CDC_Control_FS+0x17e>
        _Error_Handler(__FILE__, __LINE__);
 8009bec:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8009bf0:	4824      	ldr	r0, [pc, #144]	@ (8009c84 <CDC_Control_FS+0x20c>)
 8009bf2:	f7f7 f953 	bl	8000e9c <_Error_Handler>
      }

      __HAL_UART_ENABLE_IT(uart_ctx->huart, UART_IT_IDLE);
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68da      	ldr	r2, [r3, #12]
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f042 0210 	orr.w	r2, r2, #16
 8009c08:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE(uart_ctx->huart);
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68da      	ldr	r2, [r3, #12]
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c1c:	60da      	str	r2, [r3, #12]
      NVIC_ClearPendingIRQ(uart_ctx->irq_num);
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7ff feed 	bl	8009a04 <__NVIC_ClearPendingIRQ>

      HAL_UART_DMAStop(uart_ctx->huart);
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fb fa0d 	bl	800504e <HAL_UART_DMAStop>
      HAL_UART_Receive_DMA(uart_ctx->huart, (uint8_t *)uart_ctx->buf.data[0], DBL_BUF_TOTAL_LEN);
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	6858      	ldr	r0, [r3, #4]
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	3314      	adds	r3, #20
 8009c3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c40:	4619      	mov	r1, r3
 8009c42:	f7fb f9df 	bl	8005004 <HAL_UART_Receive_DMA>

      SEGGER_RTT_printf(0, "LINE_CODING: UART=%s, bitrate=%d, format=%d, parity=%d, datatype=%d\n",
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	6819      	ldr	r1, [r3, #0]
        uart_ctx->name, line_coding->bitrate, line_coding->format, line_coding->paritytype, line_coding->datatype);
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	791b      	ldrb	r3, [r3, #4]
      SEGGER_RTT_printf(0, "LINE_CODING: UART=%s, bitrate=%d, format=%d, parity=%d, datatype=%d\n",
 8009c52:	4618      	mov	r0, r3
        uart_ctx->name, line_coding->bitrate, line_coding->format, line_coding->paritytype, line_coding->datatype);
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	795b      	ldrb	r3, [r3, #5]
      SEGGER_RTT_printf(0, "LINE_CODING: UART=%s, bitrate=%d, format=%d, parity=%d, datatype=%d\n",
 8009c58:	461c      	mov	r4, r3
        uart_ctx->name, line_coding->bitrate, line_coding->format, line_coding->paritytype, line_coding->datatype);
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	799b      	ldrb	r3, [r3, #6]
      SEGGER_RTT_printf(0, "LINE_CODING: UART=%s, bitrate=%d, format=%d, parity=%d, datatype=%d\n",
 8009c5e:	9302      	str	r3, [sp, #8]
 8009c60:	9401      	str	r4, [sp, #4]
 8009c62:	9000      	str	r0, [sp, #0]
 8009c64:	460b      	mov	r3, r1
 8009c66:	4908      	ldr	r1, [pc, #32]	@ (8009c88 <CDC_Control_FS+0x210>)
 8009c68:	2000      	movs	r0, #0
 8009c6a:	f7f6 ff57 	bl	8000b1c <SEGGER_RTT_printf>
    }
    break;
 8009c6e:	e000      	b.n	8009c72 <CDC_Control_FS+0x1fa>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009c70:	bf00      	nop
  }

  return (USBD_OK);
 8009c72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	371c      	adds	r7, #28
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd90      	pop	{r4, r7, pc}
 8009c7c:	2000055c 	.word	0x2000055c
 8009c80:	20001584 	.word	0x20001584
 8009c84:	0800a6a8 	.word	0x0800a6a8
 8009c88:	0800a6c8 	.word	0x0800a6c8

08009c8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len, uint16_t index)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	4613      	mov	r3, r2
 8009c98:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009c9a:	68f9      	ldr	r1, [r7, #12]
 8009c9c:	480e      	ldr	r0, [pc, #56]	@ (8009cd8 <CDC_Receive_FS+0x4c>)
 8009c9e:	f7fe fef8 	bl	8008a92 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS, index);
 8009ca2:	88fb      	ldrh	r3, [r7, #6]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	480c      	ldr	r0, [pc, #48]	@ (8009cd8 <CDC_Receive_FS+0x4c>)
 8009ca8:	f7fe ff37 	bl	8008b1a <USBD_CDC_ReceivePacket>
#if defined(LOOPBACK_TEST)
  CDC_Transmit_FS(Buf, *Len, index);
#else
  // SEGGER_RTT_printf(0, "[%s] Tx: %c\n", (index < 2) ? "uart1" : "uart2", Buf[0]);
  HAL_UART_Transmit_DMA((index < 2) ? ctx.uart1.huart : ctx.uart2.huart, Buf, *Len);
 8009cac:	88fb      	ldrh	r3, [r7, #6]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d802      	bhi.n	8009cb8 <CDC_Receive_FS+0x2c>
 8009cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8009cdc <CDC_Receive_FS+0x50>)
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	e003      	b.n	8009cc0 <CDC_Receive_FS+0x34>
 8009cb8:	4b08      	ldr	r3, [pc, #32]	@ (8009cdc <CDC_Receive_FS+0x50>)
 8009cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	6812      	ldr	r2, [r2, #0]
 8009cc4:	b292      	uxth	r2, r2
 8009cc6:	68f9      	ldr	r1, [r7, #12]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fb f92b 	bl	8004f24 <HAL_UART_Transmit_DMA>
#endif
  return (USBD_OK);
 8009cce:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	2000276c 	.word	0x2000276c
 8009cdc:	2000055c 	.word	0x2000055c

08009ce0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len, uint16_t index)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	460b      	mov	r3, r1
 8009cea:	807b      	strh	r3, [r7, #2]
 8009cec:	4613      	mov	r3, r2
 8009cee:	803b      	strh	r3, [r7, #0]
  uint8_t result = USBD_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 7 */
  int i;
  int rest_len;
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8009db4 <CDC_Transmit_FS+0xd4>)
 8009cf6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8009cfa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <CDC_Transmit_FS+0x2a>
    return USBD_BUSY;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e050      	b.n	8009dac <CDC_Transmit_FS+0xcc>
  }

  rest_len = Len;
 8009d0a:	887b      	ldrh	r3, [r7, #2]
 8009d0c:	60fb      	str	r3, [r7, #12]
  for (i = 0; result == USBD_OK && i <= Len; rest_len = Len - i) {
 8009d0e:	2300      	movs	r3, #0
 8009d10:	613b      	str	r3, [r7, #16]
 8009d12:	e043      	b.n	8009d9c <CDC_Transmit_FS+0xbc>
    
    if (rest_len >= USB_FS_MAX_PACKET_SIZE) {
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b3f      	cmp	r3, #63	@ 0x3f
 8009d18:	dd15      	ble.n	8009d46 <CDC_Transmit_FS+0x66>
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &Buf[i], USB_FS_MAX_PACKET_SIZE);
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	4413      	add	r3, r2
 8009d20:	2240      	movs	r2, #64	@ 0x40
 8009d22:	4619      	mov	r1, r3
 8009d24:	4823      	ldr	r0, [pc, #140]	@ (8009db4 <CDC_Transmit_FS+0xd4>)
 8009d26:	f7fe fe9b 	bl	8008a60 <USBD_CDC_SetTxBuffer>
      i += USB_FS_MAX_PACKET_SIZE;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	3340      	adds	r3, #64	@ 0x40
 8009d2e:	613b      	str	r3, [r7, #16]
      do {
        result = USBD_CDC_TransmitPacket(&hUsbDeviceFS, index);
 8009d30:	883b      	ldrh	r3, [r7, #0]
 8009d32:	4619      	mov	r1, r3
 8009d34:	481f      	ldr	r0, [pc, #124]	@ (8009db4 <CDC_Transmit_FS+0xd4>)
 8009d36:	f7fe febf 	bl	8008ab8 <USBD_CDC_TransmitPacket>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	75fb      	strb	r3, [r7, #23]
      } while (result == USBD_BUSY);
 8009d3e:	7dfb      	ldrb	r3, [r7, #23]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d0f5      	beq.n	8009d30 <CDC_Transmit_FS+0x50>
 8009d44:	e026      	b.n	8009d94 <CDC_Transmit_FS+0xb4>

    } else if (rest_len == 0) {
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10f      	bne.n	8009d6c <CDC_Transmit_FS+0x8c>
      // It's necessary to send zero-length packet to compliance USB protocol.
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &Buf[0], 0);
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	6879      	ldr	r1, [r7, #4]
 8009d50:	4818      	ldr	r0, [pc, #96]	@ (8009db4 <CDC_Transmit_FS+0xd4>)
 8009d52:	f7fe fe85 	bl	8008a60 <USBD_CDC_SetTxBuffer>
      do {
        result = USBD_CDC_TransmitPacket(&hUsbDeviceFS, index);
 8009d56:	883b      	ldrh	r3, [r7, #0]
 8009d58:	4619      	mov	r1, r3
 8009d5a:	4816      	ldr	r0, [pc, #88]	@ (8009db4 <CDC_Transmit_FS+0xd4>)
 8009d5c:	f7fe feac 	bl	8008ab8 <USBD_CDC_TransmitPacket>
 8009d60:	4603      	mov	r3, r0
 8009d62:	75fb      	strb	r3, [r7, #23]
      } while (result == USBD_BUSY);
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	d0f5      	beq.n	8009d56 <CDC_Transmit_FS+0x76>
      break;
 8009d6a:	e01e      	b.n	8009daa <CDC_Transmit_FS+0xca>

    } else {
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &Buf[i], rest_len);
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	4413      	add	r3, r2
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	b292      	uxth	r2, r2
 8009d76:	4619      	mov	r1, r3
 8009d78:	480e      	ldr	r0, [pc, #56]	@ (8009db4 <CDC_Transmit_FS+0xd4>)
 8009d7a:	f7fe fe71 	bl	8008a60 <USBD_CDC_SetTxBuffer>
      do {
        result = USBD_CDC_TransmitPacket(&hUsbDeviceFS, index);
 8009d7e:	883b      	ldrh	r3, [r7, #0]
 8009d80:	4619      	mov	r1, r3
 8009d82:	480c      	ldr	r0, [pc, #48]	@ (8009db4 <CDC_Transmit_FS+0xd4>)
 8009d84:	f7fe fe98 	bl	8008ab8 <USBD_CDC_TransmitPacket>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	75fb      	strb	r3, [r7, #23]
      } while (result == USBD_BUSY);
 8009d8c:	7dfb      	ldrb	r3, [r7, #23]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d0f5      	beq.n	8009d7e <CDC_Transmit_FS+0x9e>
      break;
 8009d92:	e00a      	b.n	8009daa <CDC_Transmit_FS+0xca>
  for (i = 0; result == USBD_OK && i <= Len; rest_len = Len - i) {
 8009d94:	887a      	ldrh	r2, [r7, #2]
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	7dfb      	ldrb	r3, [r7, #23]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d103      	bne.n	8009daa <CDC_Transmit_FS+0xca>
 8009da2:	887b      	ldrh	r3, [r7, #2]
 8009da4:	693a      	ldr	r2, [r7, #16]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	ddb4      	ble.n	8009d14 <CDC_Transmit_FS+0x34>

    }
  }

  /* USER CODE END 7 */
  return result;
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3718      	adds	r7, #24
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	2000276c 	.word	0x2000276c

08009db8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	6039      	str	r1, [r7, #0]
 8009dc2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	2212      	movs	r2, #18
 8009dc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009dca:	4b03      	ldr	r3, [pc, #12]	@ (8009dd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bc80      	pop	{r7}
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	2000022c 	.word	0x2000022c

08009ddc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	4603      	mov	r3, r0
 8009de4:	6039      	str	r1, [r7, #0]
 8009de6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	2204      	movs	r2, #4
 8009dec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009dee:	4b03      	ldr	r3, [pc, #12]	@ (8009dfc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bc80      	pop	{r7}
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	20000240 	.word	0x20000240

08009e00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	4603      	mov	r3, r0
 8009e08:	6039      	str	r1, [r7, #0]
 8009e0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e0c:	79fb      	ldrb	r3, [r7, #7]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d105      	bne.n	8009e1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e12:	683a      	ldr	r2, [r7, #0]
 8009e14:	4907      	ldr	r1, [pc, #28]	@ (8009e34 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e16:	4808      	ldr	r0, [pc, #32]	@ (8009e38 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e18:	f7ff fcf9 	bl	800980e <USBD_GetString>
 8009e1c:	e004      	b.n	8009e28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e1e:	683a      	ldr	r2, [r7, #0]
 8009e20:	4904      	ldr	r1, [pc, #16]	@ (8009e34 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e22:	4805      	ldr	r0, [pc, #20]	@ (8009e38 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e24:	f7ff fcf3 	bl	800980e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e28:	4b02      	ldr	r3, [pc, #8]	@ (8009e34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20002d90 	.word	0x20002d90
 8009e38:	0800a710 	.word	0x0800a710

08009e3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	4603      	mov	r3, r0
 8009e44:	6039      	str	r1, [r7, #0]
 8009e46:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	4904      	ldr	r1, [pc, #16]	@ (8009e5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e4c:	4804      	ldr	r0, [pc, #16]	@ (8009e60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e4e:	f7ff fcde 	bl	800980e <USBD_GetString>
  return USBD_StrDesc;
 8009e52:	4b02      	ldr	r3, [pc, #8]	@ (8009e5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	20002d90 	.word	0x20002d90
 8009e60:	0800a71c 	.word	0x0800a71c

08009e64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	6039      	str	r1, [r7, #0]
 8009e6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e70:	79fb      	ldrb	r3, [r7, #7]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d105      	bne.n	8009e82 <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	4907      	ldr	r1, [pc, #28]	@ (8009e98 <USBD_FS_SerialStrDescriptor+0x34>)
 8009e7a:	4808      	ldr	r0, [pc, #32]	@ (8009e9c <USBD_FS_SerialStrDescriptor+0x38>)
 8009e7c:	f7ff fcc7 	bl	800980e <USBD_GetString>
 8009e80:	e004      	b.n	8009e8c <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	4904      	ldr	r1, [pc, #16]	@ (8009e98 <USBD_FS_SerialStrDescriptor+0x34>)
 8009e86:	4805      	ldr	r0, [pc, #20]	@ (8009e9c <USBD_FS_SerialStrDescriptor+0x38>)
 8009e88:	f7ff fcc1 	bl	800980e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e8c:	4b02      	ldr	r3, [pc, #8]	@ (8009e98 <USBD_FS_SerialStrDescriptor+0x34>)
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20002d90 	.word	0x20002d90
 8009e9c:	0800a724 	.word	0x0800a724

08009ea0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	6039      	str	r1, [r7, #0]
 8009eaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009eac:	79fb      	ldrb	r3, [r7, #7]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d105      	bne.n	8009ebe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	4907      	ldr	r1, [pc, #28]	@ (8009ed4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009eb6:	4808      	ldr	r0, [pc, #32]	@ (8009ed8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009eb8:	f7ff fca9 	bl	800980e <USBD_GetString>
 8009ebc:	e004      	b.n	8009ec8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	4904      	ldr	r1, [pc, #16]	@ (8009ed4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ec2:	4805      	ldr	r0, [pc, #20]	@ (8009ed8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ec4:	f7ff fca3 	bl	800980e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ec8:	4b02      	ldr	r3, [pc, #8]	@ (8009ed4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	20002d90 	.word	0x20002d90
 8009ed8:	0800a734 	.word	0x0800a734

08009edc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	6039      	str	r1, [r7, #0]
 8009ee6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ee8:	79fb      	ldrb	r3, [r7, #7]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d105      	bne.n	8009efa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	4907      	ldr	r1, [pc, #28]	@ (8009f10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ef2:	4808      	ldr	r0, [pc, #32]	@ (8009f14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ef4:	f7ff fc8b 	bl	800980e <USBD_GetString>
 8009ef8:	e004      	b.n	8009f04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009efa:	683a      	ldr	r2, [r7, #0]
 8009efc:	4904      	ldr	r1, [pc, #16]	@ (8009f10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009efe:	4805      	ldr	r0, [pc, #20]	@ (8009f14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f00:	f7ff fc85 	bl	800980e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f04:	4b02      	ldr	r3, [pc, #8]	@ (8009f10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3708      	adds	r7, #8
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	20002d90 	.word	0x20002d90
 8009f14:	0800a740 	.word	0x0800a740

08009f18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a0d      	ldr	r2, [pc, #52]	@ (8009f5c <HAL_PCD_MspInit+0x44>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d113      	bne.n	8009f52 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f60 <HAL_PCD_MspInit+0x48>)
 8009f2c:	69db      	ldr	r3, [r3, #28]
 8009f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8009f60 <HAL_PCD_MspInit+0x48>)
 8009f30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009f34:	61d3      	str	r3, [r2, #28]
 8009f36:	4b0a      	ldr	r3, [pc, #40]	@ (8009f60 <HAL_PCD_MspInit+0x48>)
 8009f38:	69db      	ldr	r3, [r3, #28]
 8009f3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f3e:	60fb      	str	r3, [r7, #12]
 8009f40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009f42:	2200      	movs	r2, #0
 8009f44:	2100      	movs	r1, #0
 8009f46:	2014      	movs	r0, #20
 8009f48:	f7f7 fd6d 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009f4c:	2014      	movs	r0, #20
 8009f4e:	f7f7 fd86 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009f52:	bf00      	nop
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	40005c00 	.word	0x40005c00
 8009f60:	40021000 	.word	0x40021000

08009f64 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009f78:	4619      	mov	r1, r3
 8009f7a:	4610      	mov	r0, r2
 8009f7c:	f7fe fe8f 	bl	8008c9e <USBD_LL_SetupStage>
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	460b      	mov	r3, r1
 8009f92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009f9a:	78fa      	ldrb	r2, [r7, #3]
 8009f9c:	6879      	ldr	r1, [r7, #4]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	00db      	lsls	r3, r3, #3
 8009fa6:	440b      	add	r3, r1
 8009fa8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	78fb      	ldrb	r3, [r7, #3]
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	f7fe fec1 	bl	8008d38 <USBD_LL_DataOutStage>
}
 8009fb6:	bf00      	nop
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b082      	sub	sp, #8
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009fd0:	78fa      	ldrb	r2, [r7, #3]
 8009fd2:	6879      	ldr	r1, [r7, #4]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	4413      	add	r3, r2
 8009fda:	00db      	lsls	r3, r3, #3
 8009fdc:	440b      	add	r3, r1
 8009fde:	3324      	adds	r3, #36	@ 0x24
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	78fb      	ldrb	r3, [r7, #3]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	f7fe ff02 	bl	8008dee <USBD_LL_DataInStage>
}
 8009fea:	bf00      	nop
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b082      	sub	sp, #8
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a000:	4618      	mov	r0, r3
 800a002:	f7fe ffe5 	bl	8008fd0 <USBD_LL_SOF>
}
 800a006:	bf00      	nop
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800a00e:	b580      	push	{r7, lr}
 800a010:	b084      	sub	sp, #16
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a016:	2301      	movs	r3, #1
 800a018:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	799b      	ldrb	r3, [r3, #6]
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d102      	bne.n	800a028 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800a022:	2301      	movs	r3, #1
 800a024:	73fb      	strb	r3, [r7, #15]
    break;
 800a026:	e002      	b.n	800a02e <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;
 800a028:	2301      	movs	r3, #1
 800a02a:	73fb      	strb	r3, [r7, #15]
    break;    
 800a02c:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a034:	7bfa      	ldrb	r2, [r7, #15]
 800a036:	4611      	mov	r1, r2
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fe ff96 	bl	8008f6a <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a044:	4618      	mov	r0, r3
 800a046:	f7fe ff61 	bl	8008f0c <USBD_LL_Reset>
}
 800a04a:	bf00      	nop
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
	...

0800a054 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a062:	4618      	mov	r0, r3
 800a064:	f7fe ff90 	bl	8008f88 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	7a9b      	ldrb	r3, [r3, #10]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d005      	beq.n	800a07c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a070:	4b04      	ldr	r3, [pc, #16]	@ (800a084 <HAL_PCD_SuspendCallback+0x30>)
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	4a03      	ldr	r2, [pc, #12]	@ (800a084 <HAL_PCD_SuspendCallback+0x30>)
 800a076:	f043 0306 	orr.w	r3, r3, #6
 800a07a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a07c:	bf00      	nop
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	e000ed00 	.word	0xe000ed00

0800a088 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a096:	4618      	mov	r0, r3
 800a098:	f7fe ff8a 	bl	8008fb0 <USBD_LL_Resume>
}
 800a09c:	bf00      	nop
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a0ac:	4a38      	ldr	r2, [pc, #224]	@ (800a190 <USBD_LL_Init+0xec>)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a36      	ldr	r2, [pc, #216]	@ (800a190 <USBD_LL_Init+0xec>)
 800a0b8:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220

  hpcd_USB_FS.Instance = USB;
 800a0bc:	4b34      	ldr	r3, [pc, #208]	@ (800a190 <USBD_LL_Init+0xec>)
 800a0be:	4a35      	ldr	r2, [pc, #212]	@ (800a194 <USBD_LL_Init+0xf0>)
 800a0c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a0c2:	4b33      	ldr	r3, [pc, #204]	@ (800a190 <USBD_LL_Init+0xec>)
 800a0c4:	2208      	movs	r2, #8
 800a0c6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a0c8:	4b31      	ldr	r3, [pc, #196]	@ (800a190 <USBD_LL_Init+0xec>)
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.ep0_mps = PCD_EP0MPS_08;
 800a0ce:	4b30      	ldr	r3, [pc, #192]	@ (800a190 <USBD_LL_Init+0xec>)
 800a0d0:	2203      	movs	r2, #3
 800a0d2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a0d4:	4b2e      	ldr	r3, [pc, #184]	@ (800a190 <USBD_LL_Init+0xec>)
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a0da:	4b2d      	ldr	r3, [pc, #180]	@ (800a190 <USBD_LL_Init+0xec>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a0e0:	4b2b      	ldr	r3, [pc, #172]	@ (800a190 <USBD_LL_Init+0xec>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a0e6:	482a      	ldr	r0, [pc, #168]	@ (800a190 <USBD_LL_Init+0xec>)
 800a0e8:	f7f8 fada 	bl	80026a0 <HAL_PCD_Init>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d004      	beq.n	800a0fc <USBD_LL_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 800a0f2:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 800a0f6:	4828      	ldr	r0, [pc, #160]	@ (800a198 <USBD_LL_Init+0xf4>)
 800a0f8:	f7f6 fed0 	bl	8000e9c <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x28);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a102:	2328      	movs	r3, #40	@ 0x28
 800a104:	2200      	movs	r2, #0
 800a106:	2100      	movs	r1, #0
 800a108:	f7f9 ffe8 	bl	80040dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x60);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a112:	2360      	movs	r3, #96	@ 0x60
 800a114:	2200      	movs	r2, #0
 800a116:	2180      	movs	r1, #128	@ 0x80
 800a118:	f7f9 ffe0 	bl	80040dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a122:	23c0      	movs	r3, #192	@ 0xc0
 800a124:	2200      	movs	r2, #0
 800a126:	2181      	movs	r1, #129	@ 0x81
 800a128:	f7f9 ffd8 	bl	80040dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a132:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a136:	2200      	movs	r2, #0
 800a138:	2101      	movs	r1, #1
 800a13a:	f7f9 ffcf 	bl	80040dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a144:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a148:	2200      	movs	r2, #0
 800a14a:	2182      	movs	r1, #130	@ 0x82
 800a14c:	f7f9 ffc6 	bl	80040dc <HAL_PCDEx_PMAConfig>

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81+2 , PCD_SNG_BUF, 0x180);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a156:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800a15a:	2200      	movs	r2, #0
 800a15c:	2183      	movs	r1, #131	@ 0x83
 800a15e:	f7f9 ffbd 	bl	80040dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01+2 , PCD_SNG_BUF, 0x1C0);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a168:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800a16c:	2200      	movs	r2, #0
 800a16e:	2103      	movs	r1, #3
 800a170:	f7f9 ffb4 	bl	80040dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82+2 , PCD_SNG_BUF, 0x1D0);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a17a:	f44f 73e8 	mov.w	r3, #464	@ 0x1d0
 800a17e:	2200      	movs	r2, #0
 800a180:	2184      	movs	r1, #132	@ 0x84
 800a182:	f7f9 ffab 	bl	80040dc <HAL_PCDEx_PMAConfig>

  return USBD_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	20002f90 	.word	0x20002f90
 800a194:	40005c00 	.word	0x40005c00
 800a198:	0800a750 	.word	0x0800a750

0800a19c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7f8 fb6a 	bl	800288c <HAL_PCD_Start>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a1bc:	7bbb      	ldrb	r3, [r7, #14]
 800a1be:	2b03      	cmp	r3, #3
 800a1c0:	d816      	bhi.n	800a1f0 <USBD_LL_Start+0x54>
 800a1c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c8 <USBD_LL_Start+0x2c>)
 800a1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c8:	0800a1d9 	.word	0x0800a1d9
 800a1cc:	0800a1df 	.word	0x0800a1df
 800a1d0:	0800a1e5 	.word	0x0800a1e5
 800a1d4:	0800a1eb 	.word	0x0800a1eb
    case HAL_OK :
      usb_status = USBD_OK;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	73fb      	strb	r3, [r7, #15]
    break;
 800a1dc:	e00b      	b.n	800a1f6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1de:	2302      	movs	r3, #2
 800a1e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a1e2:	e008      	b.n	800a1f6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a1e8:	e005      	b.n	800a1f6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	73fb      	strb	r3, [r7, #15]
    break;
 800a1ee:	e002      	b.n	800a1f6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1f4:	bf00      	nop
  }
  return usb_status;
 800a1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	4608      	mov	r0, r1
 800a20a:	4611      	mov	r1, r2
 800a20c:	461a      	mov	r2, r3
 800a20e:	4603      	mov	r3, r0
 800a210:	70fb      	strb	r3, [r7, #3]
 800a212:	460b      	mov	r3, r1
 800a214:	70bb      	strb	r3, [r7, #2]
 800a216:	4613      	mov	r3, r2
 800a218:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a21e:	2300      	movs	r3, #0
 800a220:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a228:	78bb      	ldrb	r3, [r7, #2]
 800a22a:	883a      	ldrh	r2, [r7, #0]
 800a22c:	78f9      	ldrb	r1, [r7, #3]
 800a22e:	f7f8 fca7 	bl	8002b80 <HAL_PCD_EP_Open>
 800a232:	4603      	mov	r3, r0
 800a234:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a236:	7bbb      	ldrb	r3, [r7, #14]
 800a238:	2b03      	cmp	r3, #3
 800a23a:	d817      	bhi.n	800a26c <USBD_LL_OpenEP+0x6c>
 800a23c:	a201      	add	r2, pc, #4	@ (adr r2, 800a244 <USBD_LL_OpenEP+0x44>)
 800a23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a242:	bf00      	nop
 800a244:	0800a255 	.word	0x0800a255
 800a248:	0800a25b 	.word	0x0800a25b
 800a24c:	0800a261 	.word	0x0800a261
 800a250:	0800a267 	.word	0x0800a267
    case HAL_OK :
      usb_status = USBD_OK;
 800a254:	2300      	movs	r3, #0
 800a256:	73fb      	strb	r3, [r7, #15]
    break;
 800a258:	e00b      	b.n	800a272 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a25a:	2302      	movs	r3, #2
 800a25c:	73fb      	strb	r3, [r7, #15]
    break;
 800a25e:	e008      	b.n	800a272 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a260:	2301      	movs	r3, #1
 800a262:	73fb      	strb	r3, [r7, #15]
    break;
 800a264:	e005      	b.n	800a272 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a266:	2302      	movs	r3, #2
 800a268:	73fb      	strb	r3, [r7, #15]
    break;
 800a26a:	e002      	b.n	800a272 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a26c:	2302      	movs	r3, #2
 800a26e:	73fb      	strb	r3, [r7, #15]
    break;
 800a270:	bf00      	nop
  }
  return usb_status;
 800a272:	7bfb      	ldrb	r3, [r7, #15]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	460b      	mov	r3, r1
 800a286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800a296:	78fa      	ldrb	r2, [r7, #3]
 800a298:	4611      	mov	r1, r2
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7f8 fccd 	bl	8002c3a <HAL_PCD_EP_Close>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800a2a4:	7bbb      	ldrb	r3, [r7, #14]
 800a2a6:	2b03      	cmp	r3, #3
 800a2a8:	d816      	bhi.n	800a2d8 <USBD_LL_CloseEP+0x5c>
 800a2aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b0 <USBD_LL_CloseEP+0x34>)
 800a2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b0:	0800a2c1 	.word	0x0800a2c1
 800a2b4:	0800a2c7 	.word	0x0800a2c7
 800a2b8:	0800a2cd 	.word	0x0800a2cd
 800a2bc:	0800a2d3 	.word	0x0800a2d3
    case HAL_OK :
      usb_status = USBD_OK;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2c4:	e00b      	b.n	800a2de <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ca:	e008      	b.n	800a2de <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d0:	e005      	b.n	800a2de <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2d2:	2302      	movs	r3, #2
 800a2d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d6:	e002      	b.n	800a2de <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a2d8:	2302      	movs	r3, #2
 800a2da:	73fb      	strb	r3, [r7, #15]
    break;
 800a2dc:	bf00      	nop
  }
  return usb_status;  
 800a2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800a302:	78fa      	ldrb	r2, [r7, #3]
 800a304:	4611      	mov	r1, r2
 800a306:	4618      	mov	r0, r3
 800a308:	f7f8 fd5e 	bl	8002dc8 <HAL_PCD_EP_SetStall>
 800a30c:	4603      	mov	r3, r0
 800a30e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a310:	7bbb      	ldrb	r3, [r7, #14]
 800a312:	2b03      	cmp	r3, #3
 800a314:	d816      	bhi.n	800a344 <USBD_LL_StallEP+0x5c>
 800a316:	a201      	add	r2, pc, #4	@ (adr r2, 800a31c <USBD_LL_StallEP+0x34>)
 800a318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31c:	0800a32d 	.word	0x0800a32d
 800a320:	0800a333 	.word	0x0800a333
 800a324:	0800a339 	.word	0x0800a339
 800a328:	0800a33f 	.word	0x0800a33f
    case HAL_OK :
      usb_status = USBD_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	73fb      	strb	r3, [r7, #15]
    break;
 800a330:	e00b      	b.n	800a34a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a332:	2302      	movs	r3, #2
 800a334:	73fb      	strb	r3, [r7, #15]
    break;
 800a336:	e008      	b.n	800a34a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a338:	2301      	movs	r3, #1
 800a33a:	73fb      	strb	r3, [r7, #15]
    break;
 800a33c:	e005      	b.n	800a34a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a33e:	2302      	movs	r3, #2
 800a340:	73fb      	strb	r3, [r7, #15]
    break;
 800a342:	e002      	b.n	800a34a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a344:	2302      	movs	r3, #2
 800a346:	73fb      	strb	r3, [r7, #15]
    break;
 800a348:	bf00      	nop
  }
  return usb_status;  
 800a34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	460b      	mov	r3, r1
 800a35e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800a36e:	78fa      	ldrb	r2, [r7, #3]
 800a370:	4611      	mov	r1, r2
 800a372:	4618      	mov	r0, r3
 800a374:	f7f8 fd88 	bl	8002e88 <HAL_PCD_EP_ClrStall>
 800a378:	4603      	mov	r3, r0
 800a37a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a37c:	7bbb      	ldrb	r3, [r7, #14]
 800a37e:	2b03      	cmp	r3, #3
 800a380:	d816      	bhi.n	800a3b0 <USBD_LL_ClearStallEP+0x5c>
 800a382:	a201      	add	r2, pc, #4	@ (adr r2, 800a388 <USBD_LL_ClearStallEP+0x34>)
 800a384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a388:	0800a399 	.word	0x0800a399
 800a38c:	0800a39f 	.word	0x0800a39f
 800a390:	0800a3a5 	.word	0x0800a3a5
 800a394:	0800a3ab 	.word	0x0800a3ab
    case HAL_OK :
      usb_status = USBD_OK;
 800a398:	2300      	movs	r3, #0
 800a39a:	73fb      	strb	r3, [r7, #15]
    break;
 800a39c:	e00b      	b.n	800a3b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a39e:	2302      	movs	r3, #2
 800a3a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a2:	e008      	b.n	800a3b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a8:	e005      	b.n	800a3b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ae:	e002      	b.n	800a3b6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b4:	bf00      	nop
  }
  return usb_status; 
 800a3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800a3d2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800a3d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	da0b      	bge.n	800a3f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800a3dc:	78fb      	ldrb	r3, [r7, #3]
 800a3de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a3e2:	68f9      	ldr	r1, [r7, #12]
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4413      	add	r3, r2
 800a3ea:	00db      	lsls	r3, r3, #3
 800a3ec:	440b      	add	r3, r1
 800a3ee:	3312      	adds	r3, #18
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	e00b      	b.n	800a40c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800a3f4:	78fb      	ldrb	r3, [r7, #3]
 800a3f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a3fa:	68f9      	ldr	r1, [r7, #12]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4413      	add	r3, r2
 800a402:	00db      	lsls	r3, r3, #3
 800a404:	440b      	add	r3, r1
 800a406:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a40a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3714      	adds	r7, #20
 800a410:	46bd      	mov	sp, r7
 800a412:	bc80      	pop	{r7}
 800a414:	4770      	bx	lr
	...

0800a418 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	460b      	mov	r3, r1
 800a422:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a428:	2300      	movs	r3, #0
 800a42a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800a432:	78fa      	ldrb	r2, [r7, #3]
 800a434:	4611      	mov	r1, r2
 800a436:	4618      	mov	r0, r3
 800a438:	f7f8 fb7e 	bl	8002b38 <HAL_PCD_SetAddress>
 800a43c:	4603      	mov	r3, r0
 800a43e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800a440:	7bbb      	ldrb	r3, [r7, #14]
 800a442:	2b03      	cmp	r3, #3
 800a444:	d816      	bhi.n	800a474 <USBD_LL_SetUSBAddress+0x5c>
 800a446:	a201      	add	r2, pc, #4	@ (adr r2, 800a44c <USBD_LL_SetUSBAddress+0x34>)
 800a448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44c:	0800a45d 	.word	0x0800a45d
 800a450:	0800a463 	.word	0x0800a463
 800a454:	0800a469 	.word	0x0800a469
 800a458:	0800a46f 	.word	0x0800a46f
    case HAL_OK :
      usb_status = USBD_OK;
 800a45c:	2300      	movs	r3, #0
 800a45e:	73fb      	strb	r3, [r7, #15]
    break;
 800a460:	e00b      	b.n	800a47a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a462:	2302      	movs	r3, #2
 800a464:	73fb      	strb	r3, [r7, #15]
    break;
 800a466:	e008      	b.n	800a47a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a468:	2301      	movs	r3, #1
 800a46a:	73fb      	strb	r3, [r7, #15]
    break;
 800a46c:	e005      	b.n	800a47a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a46e:	2302      	movs	r3, #2
 800a470:	73fb      	strb	r3, [r7, #15]
    break;
 800a472:	e002      	b.n	800a47a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a474:	2302      	movs	r3, #2
 800a476:	73fb      	strb	r3, [r7, #15]
    break;
 800a478:	bf00      	nop
  }
  return usb_status;  
 800a47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	607a      	str	r2, [r7, #4]
 800a48e:	461a      	mov	r2, r3
 800a490:	460b      	mov	r3, r1
 800a492:	72fb      	strb	r3, [r7, #11]
 800a494:	4613      	mov	r3, r2
 800a496:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a49c:	2300      	movs	r3, #0
 800a49e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a4a6:	893b      	ldrh	r3, [r7, #8]
 800a4a8:	7af9      	ldrb	r1, [r7, #11]
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	f7f8 fc55 	bl	8002d5a <HAL_PCD_EP_Transmit>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800a4b4:	7dbb      	ldrb	r3, [r7, #22]
 800a4b6:	2b03      	cmp	r3, #3
 800a4b8:	d816      	bhi.n	800a4e8 <USBD_LL_Transmit+0x64>
 800a4ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a4c0 <USBD_LL_Transmit+0x3c>)
 800a4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c0:	0800a4d1 	.word	0x0800a4d1
 800a4c4:	0800a4d7 	.word	0x0800a4d7
 800a4c8:	0800a4dd 	.word	0x0800a4dd
 800a4cc:	0800a4e3 	.word	0x0800a4e3
    case HAL_OK :
      usb_status = USBD_OK;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	75fb      	strb	r3, [r7, #23]
    break;
 800a4d4:	e00b      	b.n	800a4ee <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4d6:	2302      	movs	r3, #2
 800a4d8:	75fb      	strb	r3, [r7, #23]
    break;
 800a4da:	e008      	b.n	800a4ee <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	75fb      	strb	r3, [r7, #23]
    break;
 800a4e0:	e005      	b.n	800a4ee <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4e2:	2302      	movs	r3, #2
 800a4e4:	75fb      	strb	r3, [r7, #23]
    break;
 800a4e6:	e002      	b.n	800a4ee <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	75fb      	strb	r3, [r7, #23]
    break;
 800a4ec:	bf00      	nop
  }
  return usb_status;    
 800a4ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3718      	adds	r7, #24
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b086      	sub	sp, #24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	607a      	str	r2, [r7, #4]
 800a502:	461a      	mov	r2, r3
 800a504:	460b      	mov	r3, r1
 800a506:	72fb      	strb	r3, [r7, #11]
 800a508:	4613      	mov	r3, r2
 800a50a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 800a51a:	893b      	ldrh	r3, [r7, #8]
 800a51c:	7af9      	ldrb	r1, [r7, #11]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	f7f8 fbd3 	bl	8002cca <HAL_PCD_EP_Receive>
 800a524:	4603      	mov	r3, r0
 800a526:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800a528:	7dbb      	ldrb	r3, [r7, #22]
 800a52a:	2b03      	cmp	r3, #3
 800a52c:	d816      	bhi.n	800a55c <USBD_LL_PrepareReceive+0x64>
 800a52e:	a201      	add	r2, pc, #4	@ (adr r2, 800a534 <USBD_LL_PrepareReceive+0x3c>)
 800a530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a534:	0800a545 	.word	0x0800a545
 800a538:	0800a54b 	.word	0x0800a54b
 800a53c:	0800a551 	.word	0x0800a551
 800a540:	0800a557 	.word	0x0800a557
    case HAL_OK :
      usb_status = USBD_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	75fb      	strb	r3, [r7, #23]
    break;
 800a548:	e00b      	b.n	800a562 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a54a:	2302      	movs	r3, #2
 800a54c:	75fb      	strb	r3, [r7, #23]
    break;
 800a54e:	e008      	b.n	800a562 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a550:	2301      	movs	r3, #1
 800a552:	75fb      	strb	r3, [r7, #23]
    break;
 800a554:	e005      	b.n	800a562 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a556:	2302      	movs	r3, #2
 800a558:	75fb      	strb	r3, [r7, #23]
    break;
 800a55a:	e002      	b.n	800a562 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800a55c:	2302      	movs	r3, #2
 800a55e:	75fb      	strb	r3, [r7, #23]
    break;
 800a560:	bf00      	nop
  }
  return usb_status; 
 800a562:	7dfb      	ldrb	r3, [r7, #23]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3718      	adds	r7, #24
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	460b      	mov	r3, r1
 800a576:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800a57e:	78fa      	ldrb	r2, [r7, #3]
 800a580:	4611      	mov	r1, r2
 800a582:	4618      	mov	r0, r3
 800a584:	f7f8 fbd2 	bl	8002d2c <HAL_PCD_EP_GetRxCount>
 800a588:	4603      	mov	r3, r0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
	...

0800a594 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a59c:	4b02      	ldr	r3, [pc, #8]	@ (800a5a8 <USBD_static_malloc+0x14>)
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bc80      	pop	{r7}
 800a5a6:	4770      	bx	lr
 800a5a8:	20003268 	.word	0x20003268

0800a5ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]

}
 800a5b4:	bf00      	nop
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bc80      	pop	{r7}
 800a5bc:	4770      	bx	lr

0800a5be <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b083      	sub	sp, #12
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a5ca:	bf00      	nop
 800a5cc:	370c      	adds	r7, #12
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bc80      	pop	{r7}
 800a5d2:	4770      	bx	lr

0800a5d4 <memset>:
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	4402      	add	r2, r0
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d100      	bne.n	800a5de <memset+0xa>
 800a5dc:	4770      	bx	lr
 800a5de:	f803 1b01 	strb.w	r1, [r3], #1
 800a5e2:	e7f9      	b.n	800a5d8 <memset+0x4>

0800a5e4 <__libc_init_array>:
 800a5e4:	b570      	push	{r4, r5, r6, lr}
 800a5e6:	2600      	movs	r6, #0
 800a5e8:	4d0c      	ldr	r5, [pc, #48]	@ (800a61c <__libc_init_array+0x38>)
 800a5ea:	4c0d      	ldr	r4, [pc, #52]	@ (800a620 <__libc_init_array+0x3c>)
 800a5ec:	1b64      	subs	r4, r4, r5
 800a5ee:	10a4      	asrs	r4, r4, #2
 800a5f0:	42a6      	cmp	r6, r4
 800a5f2:	d109      	bne.n	800a608 <__libc_init_array+0x24>
 800a5f4:	f000 f828 	bl	800a648 <_init>
 800a5f8:	2600      	movs	r6, #0
 800a5fa:	4d0a      	ldr	r5, [pc, #40]	@ (800a624 <__libc_init_array+0x40>)
 800a5fc:	4c0a      	ldr	r4, [pc, #40]	@ (800a628 <__libc_init_array+0x44>)
 800a5fe:	1b64      	subs	r4, r4, r5
 800a600:	10a4      	asrs	r4, r4, #2
 800a602:	42a6      	cmp	r6, r4
 800a604:	d105      	bne.n	800a612 <__libc_init_array+0x2e>
 800a606:	bd70      	pop	{r4, r5, r6, pc}
 800a608:	f855 3b04 	ldr.w	r3, [r5], #4
 800a60c:	4798      	blx	r3
 800a60e:	3601      	adds	r6, #1
 800a610:	e7ee      	b.n	800a5f0 <__libc_init_array+0xc>
 800a612:	f855 3b04 	ldr.w	r3, [r5], #4
 800a616:	4798      	blx	r3
 800a618:	3601      	adds	r6, #1
 800a61a:	e7f2      	b.n	800a602 <__libc_init_array+0x1e>
 800a61c:	0800a7c4 	.word	0x0800a7c4
 800a620:	0800a7c4 	.word	0x0800a7c4
 800a624:	0800a7c4 	.word	0x0800a7c4
 800a628:	0800a7c8 	.word	0x0800a7c8

0800a62c <memcpy>:
 800a62c:	440a      	add	r2, r1
 800a62e:	4291      	cmp	r1, r2
 800a630:	f100 33ff 	add.w	r3, r0, #4294967295
 800a634:	d100      	bne.n	800a638 <memcpy+0xc>
 800a636:	4770      	bx	lr
 800a638:	b510      	push	{r4, lr}
 800a63a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a63e:	4291      	cmp	r1, r2
 800a640:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a644:	d1f9      	bne.n	800a63a <memcpy+0xe>
 800a646:	bd10      	pop	{r4, pc}

0800a648 <_init>:
 800a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64a:	bf00      	nop
 800a64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a64e:	bc08      	pop	{r3}
 800a650:	469e      	mov	lr, r3
 800a652:	4770      	bx	lr

0800a654 <_fini>:
 800a654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a656:	bf00      	nop
 800a658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a65a:	bc08      	pop	{r3}
 800a65c:	469e      	mov	lr, r3
 800a65e:	4770      	bx	lr
